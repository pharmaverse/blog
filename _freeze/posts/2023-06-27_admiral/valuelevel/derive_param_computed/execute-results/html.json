{
  "hash": "8d0f1c77699323803f651066207ae0df",
  "result": {
    "markdown": "---\ntitle: \"Derive a new parameter computed from the value of other parameters\"\nauthor:\n  - name: Kangjie Zhang\n\ndescription: \"Use `admiral::derive_param_computed()` like a calculator to derive new parameters/rows based on existing ones\"\ndate: \"2023-06-27\"\ncategories: [admiral]\nimage: \"derive_param_computed.jpg\"\n---\n\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\n## Introduction\n\nWhen creating ADaM Basic Data Structure (BDS) datasets, we often encounter deriving a new parameter based on the analysis values (e.g., AVAL) of other parameters.\n\nThe [`admiral`](https://pharmaverse.github.io/admiral/cran-release/) function [`derive_param_computed()`](https://pharmaverse.github.io/admiral/cran-release/reference/derive_param_computed.html) adds a parameter computed from the analysis value of other parameters.\n\nIt works like a calculator to derive new records without worrying about merging and combining datasets, all you need is a derivation formula, which also improves the readability of the code.\n\n## Example\n\nA value level validation use case, where `derive_param_computed()` is used to validate a derived parameter - `PARAMCD = ADPCYMG` (Actual Dose per Cycle) in ADEX dataset.\n\n### Derivation\n\nActual Dose per Cycle is derived from the Total Amount of Dose (`PARAMCD = TOTDOSE`) / Number of Cycles (`PARAMCD = NUMCYC`)\n\nIn this example, `ADEX.AVAL when ADEX.PARAMCD = ADPCYMG` can be derived as:\n\n$$\nAVAL (PARAMCD = ADPCYMG) = \\frac{AVAL (PARAMCD = TOTDOSE)}{AVAL (PARAMCD = NUMCYC)}\n$$\n\n### Loading Packages and Creating Example Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tibble)\nlibrary(dplyr)\nlibrary(diffdf)\nlibrary(admiral)\n\nadex <- tribble(\n  ~USUBJID,  ~PARAMCD,  ~PARAM,                       ~AVAL,\n  \"101\",     \"TOTDOSE\", \"Total Amount of Dose (mg)\",  180,\n  \"101\",     \"NUMCYC\",  \"Number of Cycles\",           3\n)\n```\n:::\n\n\n### Derive New Parameter\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadex_admiral <- derive_param_computed(\n  adex,\n  by_vars = exprs(USUBJID),\n  parameters = c(\"TOTDOSE\", \"NUMCYC\"),\n  analysis_value = AVAL.TOTDOSE / AVAL.NUMCYC,\n  set_values_to = exprs(\n    PARAMCD = \"ADPCYMG\",\n    PARAM = \"Actual Dose per Cycle (mg)\"\n  )\n)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 Ã— 4\n  USUBJID PARAMCD PARAM                       AVAL\n  <chr>   <chr>   <chr>                      <dbl>\n1 101     TOTDOSE Total Amount of Dose (mg)    180\n2 101     NUMCYC  Number of Cycles               3\n3 101     ADPCYMG Actual Dose per Cycle (mg)    60\n```\n:::\n:::\n\n\n### Compare\n\nFor validation purpose, the [diffdf](https://gowerc.github.io/diffdf/reference/diffdf.html) package is used below to mimic SAS `proc compare`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadex_expected <- bind_rows(\n  adex,\n  tribble(\n    ~USUBJID,  ~PARAMCD,  ~PARAM,                       ~AVAL,\n    \"101\",     \"ADPCYMG\", \"Actual Dose per Cycle (mg)\", 60\n  )\n)\n\ndiffdf(adex_expected, adex_admiral, keys = c(\"USUBJID\", \"PARAMCD\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNo issues were found!\n```\n:::\n:::\n\n\n<!--------------- appendices go here ----------------->\n\n\n::: {.cell}\n::: {.cell-output-display}\n## Last updated {.appendix}\n \n2023-07-04 21:16:26 UTC\n \n## Details {.appendix}\n \n[source code](https://github.com/pharmaverse/blog/tree/main/posts/admiral/index.qmd), [R environment](https://github.com/pharmaverse/blog/tree/main/posts/admiral/renv.lock)\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}