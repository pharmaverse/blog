{
  "hash": "de5022c40d0330cc70d194e02f08691d",
  "result": {
    "markdown": "---\ntitle: \"Hackathon Feedback Application\"\nauthor:\n  - name: Stefan Thoma\ndescription: \"Going through the process of creating a shiny app for the admiral hackathon. The shiny app allows users to check their solutions autonomously, gives feedback, and rates their results.\"\ndate: \"2023-03-14\"\ncategories: [R, shiny, teaching, WIP]\nimage: \"shiny_klee.png\"\neditor: \n  markdown: \n    wrap: sentence\n---\n\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\n\n\n\nWe recently created a shiny application for the `admiral` hackathon in February 2023.\nThe `admiral` hackathon was an event designed to make statistical programmers from the pharmaceutical industry more comfortable with the `admiral` R package which allows users to efficiently transform data from one data standard (sdtm) to another (adam).\n\nHackathon participants formed groups of up to five people and were then tasked to create R-scripts that map the `sdtm` data to `adam` according to specifics defined in the metadata.\n\nThe purpose of the shiny app was threefold:\n\n1.  Allow participants to easily register as a team.\n\n2.  Let participants upload their R-scripts, so that the `admiral` team can see how the `admiral` package is being used -- and how the functions and the documentation could be improved.\n\n3.  Run participants R-scripts on the cloud and compare the produced file to a solution file.\n    Let participants autonomously get feedback on their work.\n\nIn this blog post I want to highlight some of the thoughts that went into this application.\nPlease keep in mind that this work was done under tight time restraints.\n\nThe [hackathon application](https://zxqguo-stefan0pascal-thoma.shinyapps.io/data_upload/?_ga=2.75919894.2036952320.1679990144-1584712930.1674550185) is still online (although data-upload is switched off) and the [GitHub repository](https://github.com/StefanThoma/hackathon_app) is publicly available.\nI have also uploaded to GitHub a `.zip` file of the workspace to which hackathon participants had access via [posit cloud](https://posit.cloud).\nFor more context you can watch [recordings of the hackathon-meetings](https://www.cdisc.org/events/webinar/admiral-hackathon-kickoff).\n\n## Permanent Data\n\nThe biggest challenge you have to consider for this app is the permanent data storage.\nShiny apps run on a server.\nAlthough we can write files on this server, whenever the app restarts, the files are lost.\nTherefore, a [persistent data storage solution](https://shiny.rstudio.com/articles/persistent-data-storage.html#local-vs-remote) is required.\n\n### Google drive\n\nI decided to leverage Google drive using the `googledrive` package.\nThis allowed me to save structured data (the team registry and the submission scores) as well as unstructured data (their R-script files).\n\n::: callout-note\n## Authentication\n\nTo access Google drive using the `googledrive` package we need to authenticate.\nThis can be done interactively using the command `googledrive::drive_auth()` which takes you to the Google login page.\nAfter login you receive an authentication token requested by R.\n\nFor non-interactive authentication this token must be stored locally.\nIn our case where the shiny app must access the token once deployed, the token must be stored on the project level.\n\nI have included the authentication procedure I followed in the `R` folder in `google_init.R`.\nYou can find more extensive [documentation of the non-interactive authentication](https://googledrive.tidyverse.org/reference/drive_auth.html).\n:::\n\nThe initial concept was: Each team gets their own folder including the most recent submission for each task, and a `.csv` file containing team information.\nTo keep track of the submissions and the respective scores we wrote a `.csv` file in the `mock-hackathon` folder, so one folder above the team folders.\n\nSaving the team info as a `.csv` file worked fine as each team received their own file which -- once created -- was not touched anymore.\nAs each upload for every team should simply add a row to the `submissions.csv` file, appending the file would be ideal.\nThis was not possible using the `googledrive` package.\nInstead, for each submission, the `submissions` file was downloaded, appended, and uploaded again.\nUnfortunately, this lead to a data loss, as the file was continuously overwritten, especially when two teams would submit simultaneously.\n\n::: callout-note\n## Recover the Lost Data\n\nWhenever the `submissions.csv` file was uploaded, the previous version was sent to the Google drive bin.\nWe ended up with over 3000 `submissions.csv` files containing a lot of redundant information.\nI had to write the following chunk to first get the unique file IDs of the 3000 `submissions.csv` files, create an empty `submissions` data-frame, and then download each file and add its information to the `submisisons` data-frame.\nTo keep the data-frame as light as possible, after each append I deleted all duplicate submissions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get all task_info.csv ID's\n# each row identifies one file in the trash\ntask_info_master <- drive_find(\n  pattern = \"task_info.csv\",\n  trashed = TRUE\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# set up empty df to store all submissions\norigin <- tibble(\n  score = numeric(),\n  task = character(),\n  team = character(),\n  email = character(),\n  time = character()\n)\n\n# downloads, reads, and returns one csv file given a file id\nget_file <- function(row) {\n  tf <- tempfile()\n  row %>%\n    as_id() %>%\n    drive_download(path = tf)\n  new <- read_csv(tf) %>%\n    select(score, task, team) %>%\n    distinct()\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# quick and dirty for loop to subsequently download each file, extract information\n#  merge with previous information and squash it (using distinct()).\nfor (i in 1:nrow(task_info_master)) {\n  origin <- rbind(origin, get_file(row = task_info_master[i, ])) %>%\n    distinct()\n\n  # save progress in a separate file after every 100 downloaded and merged sheets\n  if (i %% 100 == 0) {\n    print(i)\n    write_csv(origin, paste(\"prog_data/task_info_prog_\", i, \".csv\", sep = \"\"))\n    # update on progress\n    message(i / nrow(task_info_master) * 100)\n  }\n}\n```\n:::\n\n\nWhen doing such a time-intensive task, make sure to try it first with only a couple of files to see whether any errors are produced.\nI am not quite sure how long this took but when I returned from my lunch break everything had finished.\n:::\n\nIf you want to stay in the Google framework, I recommend using the `googlesheets4` package for structured data.\n`googlesheets4` allows appending new information to an already existing sheet without the need to download the file first.\nAs both packages follow the same style, going from one to the other is really simple.\n`googlesheets4` requires authentication as well.\nHowever, you can reuse the cached token from the `googledrive` authentication by setting `gs4_auth(token = drive_token())`.\n\n### Security Concerns\n\nConnecting a public shiny app to your Google account introduces a security vulnerability in general.\nEspecially so because we implemented the upload of files to Google drive.\nAnd even more problematic: We run a user generated script and display some of its output.\nA malicious party might be able to extract the authentication token of our Google account or could upload malware to the drive.\n\nTo reduce the risk, I simply created an un-associated Google account to host the drive.\nThere are certainly better options available, but this seemed a reasonable solution achieved with very little effort.\n\n## Register Team\n\nWe wanted to allow users to sign up as teams using the shiny app.\nThe app provides a simple interface where users could input a team name and the number of members.\nThis in turn would open two fields for each user to input their name and email address.\n\nWe do simple checks to make sure at least one valid email address is supplied, and that the group name is acceptable.\nThe group name cannot be empty, already taken, or contain vulgar words.\n\nThe team registration itself was adding the team information to the Google sheets file `event_info` into the sheet `teams` and to create a team folder in which to store the uploaded R files.\n\nThe checks and registration is implemented in the `register_team()` function stored in `interact_with_google.R`.\n\n![Screenshot of the register team interface](register_team.png)\n\nThe challange here was to adapt the number of input fields depending on the number of team members.\nThis means that the team name and email interface must be rendered: \nFirst, we check how many team members are part of the group, this is stored in the `input$n_members` input variable.\nThen we create a `tagList` with as many elements as team members. \nEach element contains two columns, one for the email, one for the member name. \nThis `tagList` is then returned and displayed to the user.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# render email input UI of the register tab\noutput$name_email <- shiny::renderUI({\n  # create field names\n  N <- input$n_members\n  NAME <- sapply(1:N, function(i) {\n    paste0(\"name\", i)\n  })\n  EMAIL <- sapply(1:N, function(i) {\n    paste0(\"email\", i)\n  })\n\n  output <- tagList()\n\n\n  firstsecondthird <- c(\"First\", \"Second\", \"Third\", \"Fourth\", \"Fifth\")\n  for (i in 1:N) {\n    output[[i]] <- tagList()\n    output[[i]] <- fluidRow(\n      shiny::h4(paste(firstsecondthird[i], \" Member\")),\n      column(6,\n        textInput(NAME[i], \"Name\"),\n        value = \" \" # displayed default value\n      ),\n      column(6,\n        textInput(EMAIL[i], \"Email\"),\n        value = \" \"\n      )\n    )\n  }\n  output\n})\n```\n:::\n\nThe team information is then uploaded to Google drive. \nBecause some teams have more members than others, we have to create the respective data-frame with the number of team members in mind. \n\nThe following chunk creates the registration data. \nNoteworthy here the creation of the `NAME` and `EMAIL` variables which depend on the number of members in this team.\nFurther, the user input of these fields is extracted via `input[[paste0(NAME[i])]]` within a for-loop.\n\nWe also make the data-creation dependent on the press of the `Register Group` button and cache some variables. \n\n::: {.cell}\n\n```{.r .cell-code}\n## registration\nregistrationData <-\n  reactive({\n    N <- input$n_members\n    NAME <- sapply(1:N, function(i) {\n      paste0(\"name\", i)\n    })\n    EMAIL <- sapply(1:N, function(i) {\n      paste0(\"email\", i)\n    })\n    names <- character(0)\n    emails <- character(0)\n\n    for (i in 1:N) {\n      names[i] <- input[[paste0(NAME[i])]]\n      emails[i] <- input[[paste0(EMAIL[i])]]\n    }\n    # create df\n    dplyr::tibble(\n      team_name = input$team_name,\n      n_members = N,\n      member_name = names,\n      member_email = emails\n    )\n  }) %>%\n  bindCache(input$team_name, input$n_members, input$name1, input$email1) %>%\n  bindEvent(input$register) # wait for button press\n```\n:::\n\n\n## Upload & Source Script\n\nTo upload a script, participants had to select their team first.\nThe input options were based on the existing folders on the Google-drive in the `mock_hackathon` folder.\nTo upload a particular script participants had to also select the task to be solved.\nThe uploaded script is then uploaded to the team folder following a standardised script naming convention.\n\nThere are different aspects to be aware of when sourcing scripts on a shiny server.\nFor example, you have to anticipate the packages users will include in their uploaded scripts, as their scripts will load but not install packages.\nFurther, you should keep the global environment of your shiny app separate from the environment in which the script is sourced.\nThis is possible by supplying an environment to the `source()` function, e.g: `source(path_to_script, local = new.env())`\n\nAnother thing we had to consider was to replicate the exact folder-structure on the shiny server that participants were working with when creating the scripts, as they were required to source some scripts and to save their file into a specific folder.\nThis was relatively straight forward as we provided participants with a folder structure in the posit cloud instance they were using.\nThey had access to the `sdtm` folder in which the data was stored, and the `adam` folder into which they saved their solutions.\nThe structure also included a folder with metadata which was also available on the shiny server.\nFor some tasks, participants required some `adam`-datasets stored in the `adam` folder, essentially the output from previous tasks.\n\nThis was achieved by first creating a list mapping tasks to the required adam datasets: \n\n::: {.cell}\n\n```{.r .cell-code}\ndepends_list <- list(\n  \"ADADAS\" = c(\"ADSL\"),\n  \"ADAE\" = c(\"ADSL\"),\n  \"ADLBC\" = c(\"ADSL\"),\n  \"ADLBH\" = c(\"ADSL\"),\n  \"ADLBHY\" = c(\"ADSL\"),\n  \"ADSL\" = NULL,\n  \"ADTTE\" = c(\"ADSL\", \"ADAE\"),\n  \"ADVS\" = c(\"ADSL\")\n)\n```\n:::\n\nThis list is sourced from the `R/parameters.R` file when initiating the application.\nWe then call the `get_depends()` function sourced from `R/get_depends.R` which copies the required files from the `key` folder (where our solutions to the tasks were stored) to the `adam` folder. \nAfter sourcing the uploaded script the content in the `adam` folder is deleted.\n\n## Compare to Solution File\n\nWe want to compare the file created by participants with our solution (key) file stored in the `key` folder.\nThe `diffdf::diffdf()` function allows for easy comparison of two data-frames and directly provides extensive feedback for the user:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\ndf1 <- tibble(\n  numbers = 1:10,\n  letters = LETTERS[1:10]\n)\ndf2 <- tibble(\n  numbers = 1:10,\n  letters = letters[1:10]\n)\n\ndiffdf::diffdf(df1, df2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in diffdf::diffdf(df1, df2): \nNot all Values Compared Equal\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nDifferences found between the objects!\n\nA summary is given below.\n\nNot all Values Compared Equal\nAll rows are shown in table below\n\n  =============================\n   Variable  No of Differences \n  -----------------------------\n   letters          10         \n  -----------------------------\n\n\nAll rows are shown in table below\n\n  ========================================\n   VARIABLE  ..ROWNUMBER..  BASE  COMPARE \n  ----------------------------------------\n   letters         1         A       a    \n   letters         2         B       b    \n   letters         3         C       c    \n   letters         4         D       d    \n   letters         5         E       e    \n   letters         6         F       f    \n   letters         7         G       g    \n   letters         8         H       h    \n   letters         9         I       i    \n   letters        10         J       j    \n  ----------------------------------------\n```\n:::\n:::\n\n\n## Score\n\nTo compare submissions between participants we implemented a simple scoring function (`score_f()`) based on the table comparison by `diffdf()`.\nThe function can be found in the `compare_dfs.R` file:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscore_f <- function(df_user, df_key, keys) {\n  score <- 10\n  diff <- diffdf::diffdf(df_user, df_key, keys = keys)\n  if (!diffdf::diffdf_has_issues(diff)) {\n    return(score)\n  }\n\n  # check if there are any differences if the comparison is not strict:\n  if (!diffdf::diffdf_has_issues(diffdf::diffdf(df_user,\n    df_key,\n    keys = keys,\n    strict_numeric = FALSE,\n    strict_factor = FALSE\n  ))) {\n    # if differences are not strict, return score - 1\n    return(score - 1)\n  }\n\n  return(round(min(max(score - length(diff) / 3, 1), 9), 2))\n}\n```\n:::\n\n\nEvery comparison starts with a score of `10`.\nWe then subtract the length of the comparison object divided by a factor of `3`.\nThe length of the comparison object is a simplified way to represent the difference between the two data-frames by one value.\nFinally, the score is bounded by `1` using `max(score, 1)`.\n\nThe score is not a perfect capture of the quality of the script uploaded but: 1.\nhelped participants get an idea of how close their data-frame is to the solution file 2.\nallowed us to raffle prizes based on the merit of submitted r-scripts\n\n## Reactiveness\n\nSome of the app functions can take quite some time to execute, e.g. running the uploaded script. \nOther tasks, e.g. registering a team, do not intrinsically generate user facing outputs. \nThis would make the app using really frustrating, as users would not know whether the app is correctly working or whether it froze. \n\nWe implemented two small features that made the app more responsive. \nOne is simple loading icons that integrate into the user interface and show that output is being computed -- that something is working. \nThe other is a pop up window which communicates whether team registration was successful, and if not, why not. \nWe further aimed to forward errors generated by the uploaded scripts to the user interface, but errors generated by the application itself should be concealed.\n\n## Conclusion\n\nAlthough the application was continuously improved during the hackathon it proved to be a useful resource for participants from day one as it allowed groups to set their own pace. \nIt further allowed `admiral` developers to gain insights on package usage of a relatively large sample of potential end users.\nFrom our perspective, the application provided a great added value to the hackathon and eased the workload of guiding the participants through all the tasks. \n\n\n<!--------------- appendices go here ----------------->\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}