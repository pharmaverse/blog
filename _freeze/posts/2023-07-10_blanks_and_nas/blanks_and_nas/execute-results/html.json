{
  "hash": "6fa92c74bcf6aff7c7d758077edf0058",
  "result": {
    "markdown": "---\ntitle: \"Blanks and NAs\"\nauthor:\n  - name: Ben Straub\ndescription: \"Reading SAS datasets into R\"\ndate: \"2023-07-10\"\n# please do not use any non-default categories.\n# You can find the default categories in the repository README.md\ncategories: [admiral]\n# feel free to change the image\nimage: \"admiral.png\"\n\n---\n\n\n<!--------------- typical setup ----------------->\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\n\nReading in SAS-based datasets (`.sas7bdat` or `xpt`) into R has users \ncalling the R package [haven](https://haven.tidyverse.org/).  A typical call might invoke `read_sas()` or `read_xpt()`\nto bring in your source data to construct your ADaMs or SDTMs.\n\nUnfortunately, while using [haven](https://haven.tidyverse.org/) the character blanks (missing data) found in a typical SAS-based dataset are left as balnks. These blanks will typically prove problematic while using functions like `is.na` in combination with `dplyr::filter()` to subset data.\n\nIn the [admiral](https://pharmaverse.github.io/admiral/cran-release/) package, we have built a simple function called `convert_blanks_to_na()` to help us quickly remedy this problem. You can supply an entire dataframe to this function and it will convert any character blanks to `NA_character_`\n\n## Loading Packages and Making Dummy Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(admiral)\nlibrary(tibble)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\ndf <- tribble(\n  ~USUBJID,   ~RFICDTC,\n  \"01\", \"2000-01-01\",\n  \"02\", \"2001-01-01\",\n  \"03\",           \"\", # Here we have a character blank\n  \"04\", \"2001-01--\",\n  \"05\", \"2001---01\",\n  \"05\",          \"\", # Here we have a character blank\n)\n\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  USUBJID RFICDTC     \n  <chr>   <chr>       \n1 01      \"2000-01-01\"\n2 02      \"2001-01-01\"\n3 03      \"\"          \n4 04      \"2001-01--\" \n5 05      \"2001---01\" \n6 05      \"\"          \n```\n:::\n:::\n\n\n## A simple conversion \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_na <- convert_blanks_to_na(df)\n\ndf_na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  USUBJID RFICDTC   \n  <chr>   <chr>     \n1 01      2000-01-01\n2 02      2001-01-01\n3 03      <NA>      \n4 04      2001-01-- \n5 05      2001---01 \n6 05      <NA>      \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_na %>% filter(is.na(RFICDTC))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  USUBJID RFICDTC\n  <chr>   <chr>  \n1 03      <NA>   \n2 05      <NA>   \n```\n:::\n:::\n\n\n## That's it!\n\nA simple call to this function can make your derivation life so much easier while working in R if working with SAS-based datasets. In admiral, we make use of this function at the start of all ADaM templates for common ADaM datasets. You can use the function `use_ad_template()` to get full R script for the below ADaMs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_all_templates()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nExisting ADaM templates in package 'admiral':\n• ADAE\n• ADCM\n• ADEG\n• ADEX\n• ADLB\n• ADLBHY\n• ADMH\n• ADPC\n• ADPP\n• ADPPK\n• ADSL\n• ADVS\n```\n:::\n:::\n\n\n\n\n<!--------------- appendices go here ----------------->\n\n\n::: {.cell}\n::: {.cell-output-display}\n## Last updated {.appendix}\n \n2023-07-09 19:02:46 UTC\n \n## Details {.appendix}\n \n[source code](https://github.com/pharmaverse/blog/tree/main/posts/2023-07-10_blanks_and_nas/index.qmd), [R environment](https://github.com/pharmaverse/blog/tree/main/posts/2023-07-10_blanks_and_nas/renv.lock)\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}