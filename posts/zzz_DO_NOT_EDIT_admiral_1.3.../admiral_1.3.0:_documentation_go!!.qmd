---
title: "admiral 1.3.0: documentation go!!"
author:
  - name: Ben and Edoiardo
description: "asdf"
# Note that the date below will be auto-updated when the post is merged.
date: "2025-06-20"
# Please do not use any non-default categories.
# You can find the default categories in the repository README.md
categories: [ADaM]
# Feel free to change the image
image: "pharmaverse.png"

---

<!--------------- typical setup ----------------->

```{r setup, include=FALSE}
long_slug <- "zzz_DO_NOT_EDIT_admiral_1.3..."
library(link)
link::auto()
```

<!--------------- post begins here ----------------->

Exciting Updates in the Pharmaverse: Unveiling New Features and Enhancements!
Welcome back to the Pharmaverse Blog, where we bring you the latest and greatest from the world of pharmaceutical programming! We’ve got a fantastic array of updates and enhancements to share with you today, and we can’t wait for you to dive in!

## New Features

Our team has been busy enhancing the documentation to make your life easier and more productive. With default values now displayed in arguments descriptions, grasping complex functions has become a breeze. We’ve introduced titled examples with detailed descriptions, neatly organized in the Table of Contents for easy navigation—check out derive_extreme_records() to see these improvements in action! Plus, RStudio users, rejoice! The outputs of these structured examples will now be displayed seamlessly on your help pages. We’re thrilled to add new lab grading metadata specifically tailored for US (Conventional) units across three grading criteria. Admiral is not just your go-to for SI units anymore; it now includes:
atoxgr_criteria_ctcv4_uscv (NCI-CTCAEv4 criteria)
atoxgr_criteria_ctcv5_uscv (NCI-CTCAEv5 criteria)
atoxgr_criteria_daids_uscv (DAIDs criteria)

## Updates of Existing Functions

Our existing functions are getting a makeover with enhancements that promise to streamline your workflow. derive_vars_joined() now applies filter_add for all join types correctly, fixing previous oversights. The extract_duplicate_records() function has been improved to consider all variables from the input dataset if no by_vars are specified, providing you more flexibility and control. Say goodbye to issues when dealing with empty subsets as slice_derivation() now calls derivation for all subsets, ensuring flawless operation even when the input dataset is empty. Dive deep into all scenarios discussed in the PHUSE White Paper on Treatment-Emergent AEs with the newly enhanced examples section for derive_var_trtemfl(). We’ve upped our game in grading metadata with derive_var_atoxgr_dir() now capable of handling more than one unit, offering you more versatility. Our background checks in derive_summary_records() got an improvement; you no longer need to worry about by_vars being a strict requirement in the dataset, resulting in smoother operations. Functions like derive_vars_joined(), derive_var_joined_exist_flag(), and filter_joined() now deliver accurate results when used with join_type = "before" or join_type = "after", even on differing datasets or when the filter_add argument is employed.

## Breaking Changes

Some things are changing, but don't worry—it's all for the better!

We've renamed SI_UNIT_CHECK to UNIT_CHECK in lab grading metadata variables: atoxgr_criteria_ctcv4(), atoxgr_criteria_ctcv5(), and atoxgr_criteria_daids() to simplify specifications. The way values are populated for tmp_obs_nr_var in various functions is evolving to ensure stability and avoid redundancy when records match by_vars and order.
Heads up on the deprecation process for certain function arguments—get ready to adapt and evolve with us as these changes take effect.

## Documentation

The documentation enhancements keep rolling in! We’ve enriched examples across several functions such as derive_extreme_records(), derive_param_tte(), and more, making it easier for you to navigate and utilize them. Excitingly, an example has been added to derive_vars_transposed() reference page to highlight potential duplicate-related errors, proactive problem-solving right at your fingertips! We've added clarity on default values in derive_vars_aage()—the type now shows interval to match its behavior.
Our "Lab Grading" vignette not only got easier to read with corrected typos but expanded with new metadata for US units. Similarly, updates to templates, like ADAE and the OCCDS vignette, as well as the "Higher Order Functions" and others, showcase combinations and remove unnecessary derivation requirements.

Explore updated derive_var_analysis_ratio() documentation with new references to R2AyHI and R2AyLO, ensuring you have all the insights and tools you need. Finally, derive_basetype_records() documentation is clarified for more effective BASETYPE derivations.
These updates and enhancements make the pharmaverse even more exciting and productive, opening up new avenues for streamlined coding and efficient program management. We hope you're as thrilled as we are to explore and utilize these innovations. 

Stay tuned for more updates, and happy coding!



<!--------------- appendices go here ----------------->

```{r, echo=FALSE}
source("appendix.R")
insert_appendix(
  repo_spec = "pharmaverse/blog",
  name = long_slug,
  # file_name should be the name of your file
  file_name = list.files() %>% stringr::str_subset(".qmd") %>% first()
)
```
