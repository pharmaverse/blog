---
title: "admiral 1.0.0"
author:
  - name: Ben Straub
description: "1.0.0 brings new features, a few bug fixes and a committment to stability!"
date: "2023-12-18"
# please do not use any non-default categories.
# You can find the default categories in the repository README.md
categories: [admiral, ADaMs]
# feel free to change the image
image: "new_features.jpg"

---

<!--------------- typical setup ----------------->

```{r setup, include=FALSE}
long_slug <- "2023-12-18_admiral_1_0"
# renv::use(lockfile = "renv.lock")
```

<!--------------- post begins here ----------------->

`admiral 1.0.0` is out on [CRAN](https://cran.r-project.org/web/packages/admiral/index.html).  This brings several new features to your tool set
for working with ADaMs in R. `1.0.0` also brings needed stability to users wishing
to adopt [admiral](https://pharmaverse.github.io/admiral/index.html), but were a little worried with continued deprecation and experimentation. 

This blog post will walk you through the new features available, discuss some of the bug fixes, our commitment to stability and showcase the resources available to help you on-board to [admiral](https://pharmaverse.github.io/admiral/index.html).

# New Features

We have 3 new functions available in this release: 

* [derive_vars_extreme_event()](https://pharmaverse.github.io/admiral/reference/derive_vars_extreme_event.html)
* [derive_var_merged_ef_msrc()](https://pharmaverse.github.io/admiral/reference/derive_var_merged_ef_msrc.html)
* [derive_vars_computed()](https://pharmaverse.github.io/admiral/reference/derive_vars_computed.html)

and a new option in [derive_var_atoxgr_dir()](https://pharmaverse.github.io/admiral/reference/derive_var_atoxgr_dir.html) and [derive_var_anrind()](https://pharmaverse.github.io/admiral/reference/derive_var_anrind.html) to handle floating point issues.

## `derive_vars_extreme_event()`

This function works similar to [`derive_extreme_event()`](https://pharmaverse.github.io/admiral/reference/derive_extreme_event.html), but instead of adding observations the function will add variable(s). This function takes available records from user-defined events by selecting the extreme observations and appending to your dataset.  

Let's take a peak with a very simple example where we just use ADSL! The documentation for 
[derive_vars_extreme_event()](https://pharmaverse.github.io/admiral/reference/derive_vars_extreme_event.html) has a much richer example with events from other domains that is more align to where you would use this function. 

Let us make some dummy `ADSL` data and load up our packages.

```{r, message = FALSE, warning = FALSE}

library(tibble)
library(admiral)
library(lubridate)

  adsl <- tribble(
    ~STUDYID, ~USUBJID, ~TRTEDT, ~DTHDT,
    "PILOT01", "01-1130", ymd("2014-08-16"), ymd("2014-09-13"),
    "PILOT01", "01-1133", ymd("2013-04-28"), ymd(""),
    "PILOT01", "01-1211", ymd("2013-01-12"), ymd(""),
    "PILOT01", "09-1081", ymd("2014-04-27"), ymd(""),
    "PILOT01", "09-1088", ymd("2014-10-09"), ymd("2014-11-01"),
  )
```

The goal here is to add two new variables `LSTALVDT` and `DTHFL` based on a list of 
objects that are used to specify the following:

 - the dataset to look at
 - a set of conditions
 - what to set the values for the new variables. 
 
In this example, we only use `ADSL` as the source dataset, so it is a bit contrived, but much more compact for us.

```{r}
derive_vars_extreme_event(
    adsl,
    by_vars = exprs(STUDYID, USUBJID),
    events = list(
      event(
        dataset_name = "adsl",
        condition = !is.na(DTHDT),
        set_values_to = exprs(LSTALVDT = DTHDT, DTHFL = "Y")
      ),
      event(
        dataset_name = "adsl",
        condition = !is.na(TRTEDT),
        set_values_to = exprs(LSTALVDT = TRTEDT, DTHFL = "N")
      )
    ),
    source_datasets = list(adsl = adsl),
    order = exprs(LSTALVDT),
    mode = "last",
    new_vars = exprs(LSTALVDT = LSTALVDT, DTHFL = DTHFL)
  )

```

Okay! We used a very small example to showcase how to find extreme observations and
appending this information as new variables to our `ADSL` dataset.  Highly recommend checking
out the more detailed example in the [function documentation](https://pharmaverse.github.io/admiral/reference/derive_vars_extreme_event.html) to see its true power!

## `derive_var_merged_ef_msrc()`

This function has some similarity to [derive_vars_extreme_event()](https://pharmaverse.github.io/admiral/reference/derive_vars_extreme_event.html), but now we are only looking at adding a single flag variable based on checking conditions across multiple datasets.

We develop some _simple_ dummy data for `ADSL`, `CM` and `PR`. Our goal is flag patients who have `CMCAT = "ANIT-CANCER"` in the `CM` dataset or have records in the `PR` dataset. Any of these patients who meet these conidtion will have our new variable `CANCTRFL` set as `Y`.

```{r, message = FALSE, warning = FALSE}
adsl <- tribble(
    ~USUBJID, 
    "1",      
    "2",      
    "3",      
    "4",      
  )

cm <- tribble(
    ~USUBJID, ~CMCAT,        ~CMSEQ,
    "1",      "ANTI-CANCER",      1,
    "1",      "GENERAL",          2,
    "2",      "GENERAL",          1,
    "3",      "ANTI-CANCER",      1
  )

 pr <- tribble(
    ~USUBJID, ~PRSEQ,
    "2",      1,
    "3",      1
  )
```

```{r}
derive_var_merged_ef_msrc(
    adsl,
    flag_events = list(
      flag_event(
        dataset_name = "cm",
        condition = CMCAT == "ANTI-CANCER"
      ),
      flag_event(
        dataset_name = "pr"
      )
    ),
    source_datasets = list(cm = cm, pr = pr),
    by_vars = exprs(USUBJID),
    new_var = CANCTRFL
  )

```
Let's go! We searched over multiple datasets, `CM` and `PR` with multiple conditions and appended a new variable `CANCTRFL` to `ADSL` setting to "Y" if those conditions were met. This is a powerful function that can help simpliy searching over multiple datasets! 

## `derive_vars_computed()`

This function is very similar to [derive_vars_computed()](https://pharmaverse.github.io/admiral/reference/derive_vars_computed.html), but instead of adding observations we are going to add variable(s).  Very handy when wanting to add some additional variables to `ADSL`, e.g. baseline variables.

Let's make some dummy data for an `ADSL` and `ADVS`.  Oru gaol is to `BMIBL` variable pulled from `ADVS` and add appened to `ADSL`.

```{r}
 adsl <- tribble(
    ~STUDYID,   ~USUBJID, ~AGE,   ~AGEU,
    "PILOT01", "01-1302",   61, "YEARS",
    "PILOT01", "17-1344",   64, "YEARS"
  )

  advs <- tribble(
    ~STUDYID, ~USUBJID, ~PARAMCD, ~PARAM, ~VISIT, ~AVAL, ~AVALU, ~ABLFL,
    "PILOT01", "01-1302", "HEIGHT", "Height (cm)", "SCREENING", 177.8, "cm", "Y",
    "PILOT01", "01-1302", "WEIGHT", "Weight (kg)", "SCREENING", 81.19, "kg", "N",
    "PILOT01", "01-1302", "WEIGHT", "Weight (kg)", "BASELINE", 82.1, "kg", "Y",
    "PILOT01", "01-1302", "WEIGHT", "Weight (kg)", "WEEK 2", 81.19, "kg", "N",
    "PILOT01", "01-1302", "WEIGHT", "Weight (kg)", "WEEK 4", 82.56, "kg", "N",
    "PILOT01", "01-1302", "WEIGHT", "Weight (kg)", "WEEK 6", 80.74, "kg", "N",
    "PILOT01", "17-1344", "HEIGHT", "Height (cm)", "SCREENING", 163.5, "cm", "Y",
    "PILOT01", "17-1344", "WEIGHT", "Weight (kg)", "SCREENING", 58.06, "kg", "N",
    "PILOT01", "17-1344", "WEIGHT", "Weight (kg)", "BASELINE", 58.06, "kg", "Y",
    "PILOT01", "17-1344", "WEIGHT", "Weight (kg)", "WEEK 2", 58.97, "kg", "N",
    "PILOT01", "17-1344", "WEIGHT", "Weight (kg)", "WEEK 4", 57.97, "kg", "N",
    "PILOT01", "17-1344", "WEIGHT", "Weight (kg)", "WEEK 6", 58.97, "kg", "N"
  )
```

Take a look at how we use `new_vars` and `filter_add` to help us calculate the `BMIBL` and filter the `ADVS` dataset to get the appropriate records.  

```{r}

derive_vars_computed(
      dataset = adsl,
      dataset_add = advs,
      by_vars = exprs(STUDYID, USUBJID),
      parameters = c("WEIGHT"),
      constant_by_vars = exprs(STUDYID, USUBJID),
      constant_parameters = c("HEIGHT"),
      new_vars = exprs(BMIBL = compute_bmi(height = AVAL.HEIGHT, weight = AVAL.WEIGHT)),
      filter_add = ABLFL == "Y"
    )

```

# Bug Fixes

# Commitment to Stability

admiral was born out of a conversation between Thomas Neitmann and Michael Rimler roughly two years ago. Check out this [history blog post](https://pharmaverse.github.io/blog/posts/2023-10-10_pharmaverse_story/pharmaverse_story.html) for some of the play by play. We have 


# New On-boarding Resources

admiral has a lot of functions for working with ADaMs. This can be overwhelming for new users and we really sympathize.  To help new users onboarding to using admiral we have developed to resources:

## [admiraldiscovery](https://pharmaverse.github.io/admiraldiscovery/index.html)

This is a dedicated website that lists out in a tabular format standard ADaM datsets and their common variables with corresponding admiral functions that could be used to create the variables. Very handy when you just want to get some starter code on deriving `EOSDT` or `TRTSDT`!  


```{r, fig.align = 'center', fig.cap = "Code subsections for the example above.", echo=FALSE}
knitr::include_graphics("admiraldisc.png")
```


2) [admiral Cheat Sheet](https://github.com/pharmaverse/admiral/blob/main/inst/cheatsheet/admiral_cheatsheet.pdf)

Inspired by other R package cheat sheets! We try and surface commonly needed functions for doing ADaM derivations with simple tables to show how the data is transforming.  

```{r, fig.align = 'center', fig.cap = "Code subsections for the example above.", echo=FALSE}
knitr::include_graphics("cheatsheet.png")
```

<!--------------- appendices go here ----------------->

```{r, echo=FALSE}
source("appendix.R")
insert_appendix(
  repo_spec = "pharmaverse/blog",
  name = long_slug
)
```
