<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Pharmaverse Blog</title>
<link>https://pharmaverse.github.io/blog/</link>
<atom:link href="https://pharmaverse.github.io/blog/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.4.553</generator>
<lastBuildDate>Fri, 29 Mar 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>xportr 0.4.0</title>
  <dc:creator>Sadchla Mascary</dc:creator>
  <link>https://pharmaverse.github.io/blog/posts/2024-03-29_xportr_0_4_0/xportr_0_4_0.html</link>
  <description><![CDATA[ 





<!--------------- typical setup ----------------->
<!--------------- post begins here ----------------->
<section id="xpt-meets-xportr" class="level1">
<h1><code>xpt</code> Meets <a href="https://atorus-research.github.io/xportr/"><code>xportr</code></a>!</h1>
<p>In the pharmaceuticals and healthcare industries, it is crucial to maintain a standard structure for data exchange and regulatory submissions, enter <code>xpt</code> datasets! <code>xpt</code> datasets are binary files that are typically created by SAS software, they contain structured data, including variables, labels, and metadata. In order to develop <code>xpt</code> formatted files in R, let’s introducing you to <a href="https://atorus-research.github.io/xportr/"><code>xportr</code></a>.</p>
</section>
<section id="what-is-xportr" class="level1">
<h1>What is <a href="https://atorus-research.github.io/xportr/"><code>xportr</code></a>?</h1>
<p><a href="https://atorus-research.github.io/xportr/"><code>xportr</code></a> is the result of collaboration among developers from various domains within the pharmaceutical industry. <a href="https://atorus-research.github.io/xportr/authors.html">click here for a full list</a>. This collaborative effort ensures that <a href="https://atorus-research.github.io/xportr/"><code>xportr</code></a> meets the diverse needs and requirements of users across various domains. By leveraging insights and expertise from different stakeholders, <a href="https://atorus-research.github.io/xportr/"><code>xportr</code></a> continues to evolve and improve, maintaining its relevance and effectiveness in the ever-changing landscape of data management and analysis. <a href="https://atorus-research.github.io/xportr/"><code>xportr</code></a> is currently on version 0.4.0 (you can keep up with all of its improvements by following the <a href="https://atorus-research.github.io/xportr/news/index.html"><code>Changelog here</code></a>) and with its meticulous design flow, users can expect to develop <code>xpt</code> files that have been vetted by many checks in the backend and which are CDISC compliant. <img src="https://pharmaverse.github.io/blog/posts/2024-03-29_xportr_0_4_0/xportr_design_flow.png" class="img-fluid quarto-figure quarto-figure-center" width="800"></p>
</section>
<section id="why-xportr" class="level1">
<h1>Why <a href="https://atorus-research.github.io/xportr/"><code>xportr</code></a>?</h1>
<p>Did I mention that <a href="https://atorus-research.github.io/xportr/"><code>xportr</code></a> is an indispensable R package for creating <code>xpt</code> datasets? This toolkit offers functions to apply metadata information to your CDISC-compliant datasets created in R, conduct strict checks, and offer valuable feedbacks about formats, format lengths, etc. In this blog post, we’ll explore some high level capabilities of <a href="https://atorus-research.github.io/xportr/"><code>xportr</code></a>, and its development.</p>
</section>
<section id="how-does-it-work" class="level1">
<h1>How does it work?</h1>
<p>You too can experience some of the benefits of <a href="https://atorus-research.github.io/xportr/"><code>xportr</code></a> by taking a <a href="https://atorus-research.github.io/xportr/articles/deepdive.html"><code>deep dive</code></a> at <a href="https://atorus-research.github.io/xportr/"><code>xportr</code></a>!</p>
<p>There are data deliverables and supporting documentation needed for a successful submission to Health Authorities, while you can find a walk through on how you can use <code>xportr</code> <a href="https://atorus-research.github.io/xportr/articles/deepdive.html#what-goes-in-a-submission-to-a-health-authority"><code>here</code></a>, let’s look at a high level example:</p>
<p>Looking at an <code>adsl</code> and the define metadata information</p>
<div class="cell" data-warnings="false">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">adsl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Subj =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">456</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">789</span>),</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Different =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Val =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3"</span>),</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Param =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"param1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"param2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"param3"</span>)</span>
<span id="cb1-6">)</span></code></pre></div>
</div>
<p>and the define metadata information</p>
<div class="cell" data-warnings="false">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">metadata <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb2-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span>,</span>
<span id="cb2-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">variable =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Subj"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Param"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Val"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NotUsed"</span>),</span>
<span id="cb2-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>),</span>
<span id="cb2-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,</span>
<span id="cb2-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">order =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-7">)</span></code></pre></div>
</div>
<p>Users can use the <a href="https://atorus-research.github.io/xportr/reference/metadata.html"><code>xportr_metadata()</code></a> function along with <a href="https://atorus-research.github.io/xportr/reference/xportr_type.html"><code>xportr_type()</code></a> and <a href="https://atorus-research.github.io/xportr/reference/xportr_order.html"><code>xportr_order()</code></a> to not only apply metadata attributes to your data but also receive feedback on your data based on your spec. Additionally, some of those functions performing valuable checks like:</p>
<ul>
<li>Variable names must start with a letter (not an underscore), be comprised of only uppercase letters (A-Z), numerals (0-9) and be free of non-ASCII characters, symbols, and underscores.</li>
<li>Allotted length for each column containing character (text) data should be set to the maximum length of the variable used across all data sets (≤ 200)</li>
<li>Coerces variables to only numeric or character types</li>
<li>Display format support for numeric float and date/time values</li>
<li>Variables names are ≤ 8 characters.</li>
<li>Variable labels are ≤ 40 characters.</li>
<li>Data set labels are ≤ 40 characters.</li>
<li>Presence of non-ASCII characters in Variable Names, Labels or data set labels.</li>
</ul>
<p>For example:</p>
<div class="cell" data-warnings="false">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">adsl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xportr_metadata</span>(metadata, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xportr_type</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xportr_order</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── Variable type mismatches found. ──</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ 2 variables coerced</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── 1 variables not in spec and moved to end ──</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── 2 reordered in dataset ──</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>  Subj  Param Val Different
1  123 param1   1         a
2  123 param2   2         b
3  123 param3   3         c</code></pre>
</div>
</div>
<p>In addition to the functions mentioned above, users have access to other functionalities such as <a href="https://atorus-research.github.io/xportr/reference/xportr_write.html"><code>xportr_write()</code></a>, which facilitates the conversion of a local data frame into an <code>xpt</code> file. For instance, if we utilize the ADSL dataframe defined earlier, we can create a variable <code>var_spec</code> using the following syntax.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">var_spec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb14-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"adsl"</span>,</span>
<span id="cb14-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Subject-Level Analysis Dataset"</span>,</span>
<span id="cb14-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data_label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ADSL"</span></span>
<span id="cb14-5">)</span></code></pre></div>
</div>
<p>Users can then create their ADSL <code>xpt</code> file in the following manner:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xportr_write</span>(adsl,</span>
<span id="cb15-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempdir</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/adsl.xpt"</span>),</span>
<span id="cb15-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">domain =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"adsl"</span>,</span>
<span id="cb15-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">metadata =</span> var_spec,</span>
<span id="cb15-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strict_checks =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb15-6">)</span></code></pre></div>
</div>
<p><a href="https://atorus-research.github.io/xportr/"><code>xportr</code></a> also includes other important functions such as:</p>
<ul>
<li><p><a href="https://atorus-research.github.io/xportr/reference/xportr_length.html"><code>xportr_length()</code></a> to assign the SAS length to a specified data frame.</p></li>
<li><p><a href="https://atorus-research.github.io/xportr/reference/xportr_length.html"><code>xportr_label()</code></a> to enable users to assign variable labels from metadata at the variable level to a specified data frame.</p></li>
<li><p><a href="https://atorus-research.github.io/xportr/reference/xportr_format.html"><code>xportr_format()</code></a>, which allow users to apply a SAS format from a variable level metadata to a given data frame Further details on all <a href="https://atorus-research.github.io/xportr/"><code>xportr</code></a> functions can be found <a href="https://atorus-research.github.io/xportr/reference/index.html"><code>here</code></a>.</p></li>
</ul>
</section>
<section id="key-features-of-xportr" class="level1">
<h1>Key Features of <a href="https://atorus-research.github.io/xportr/"><code>xportr</code></a>:</h1>
<ul>
<li><strong>Efficient Handling</strong>: <a href="https://atorus-research.github.io/xportr/"><code>xportr</code></a> offers efficient avenues to produce <code>xpt</code> files, allowing users to manipulate clinical datasets with ease and export in <code>xpt</code> format in R.</li>
<li><strong>Data Integrity</strong>: <a href="https://atorus-research.github.io/xportr/"><code>xportr</code></a> preserves data integrity by retaining variable labels, formats, and other metadata during data export operations.</li>
<li><strong>User-Friendly Interface</strong>: <a href="https://atorus-research.github.io/xportr/"><code>xportr</code></a> provides a user-friendly interface with intuitive functions for generating <code>xpt</code> datasets and performing data manipulation tasks.</li>
</ul>
</section>
<section id="about-the-other-kid-on-the-blog-json-is-the-future-xpt-or-json" class="level1">
<h1>About the other kid on the blog, (<code>JSON</code>)! Is The Future <code>xpt</code> or JSON?</h1>
<p><code>xpt</code> datasets are standardized, structured files used for storing clinical trial data, making them essential for regulatory submissions and data analysis. They remain indispensable in certain industries and with advancements in data management and analysis tools, the future of <code>xpt</code> datasets lies in improved efficiency, compatibility, and ensuring seamless integration with emerging technologies and data formats.</p>
<p>As data continues to play a central role in decision-making and innovation, the future of JavaScript Object Notation (JSON) datasets is worth exploring. JSON datasets offer flexibility, simplicity, and interoperability, making them increasingly popular for data storage and exchange. In fact, R users can refer to <a href="https://www.atorusresearch.com/datasetjson-0-0-1-release/"><code>this article</code></a> for a summary about JSON and the R package <a href="https://atorus-research.github.io/datasetjson/"><code>datasetjson</code></a> available on <a href="https://cloud.r-project.org/web/packages/datasetjson/index.html"><code>CRAN</code></a>. JSON’s lightweight and human-readable format make it suitable for a wide range of applications, including web development, APIs, IoT, and data storage. While <code>xpt</code> datasets remain prevalent in certain industries, there’s a growing interest in JSON datasets across various domains. Although we will not be exploring JSON datasets, this formatted data type was worth mentioning in this blog.</p>
</section>
<section id="lets-recap" class="level1">
<h1>Let’s Recap!</h1>
<p>This blog post highlighted the benefits of using the <a href="https://atorus-research.github.io/xportr/"><code>xportr</code></a> package, showcased an example of <a href="https://atorus-research.github.io/xportr/"><code>xportr</code></a> function, and discussed the growing interest of JSON datasets in the data landscape. We’ve also discussed <a href="https://atorus-research.github.io/xportr/"><code>xportr</code></a>’s development through collaborations between developers from different parts of the industry, highlighting its versatility and relevance in various domains. Which gives me a nice transition to my call to action!! If you haven’t used <a href="https://atorus-research.github.io/xportr/"><code>xportr</code></a> before, then consider this blog as your official invite to test it! Reap the benefit of collaborative efforts across industries and the pharma world. If are already a user of <a href="https://atorus-research.github.io/xportr/"><code>xportr</code></a> or you are experiencing some issues with a particular functions, then chances are someone else could either be experiencing a similar issue or have an answer so reach out to the team by creating an issue <a href="https://github.com/atorus-research/xportr/issues"><code>here</code></a>.</p>
<p>As we look towards the future, embracing diverse data formats and technologies will be key to unlocking the full potential of data-driven innovation. Championing tools like <a href="https://atorus-research.github.io/xportr/"><code>xportr</code></a> and staying abreast of emerging data formats, researchers, analysts, and regulatory professionals can unlock new opportunities for insights and innovation in their respective fields.</p>
<p><strong>Disclaimer</strong> This blog contains opinions that are of the authors alone and do not necessarily reflect the strategy of their respective organizations. <!--------------- appendices go here -----------------></p>
<div class="cell">
<div class="cell-output-display">


</div>
</div>


</section>

<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2024-04-08 12:11:16.189441</p>
</div></section><section id="details" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/pharmaverse/blog/tree/main/posts/2024-03-29_xportr_0_4_0/code_sections.qmd">source code</a>, <a href="https://github.com/pharmaverse/blog/tree/main/posts/2024-03-29_xportr_0_4_0/renv.lock">R environment</a></p>
</div></section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{mascary2024,
  author = {Mascary, Sadchla},
  title = {Xportr 0.4.0},
  date = {2024-03-29},
  url = {https://pharmaverse.github.io/blog/posts/2024-03-29_xportr_0_4_0/xportr_0_4_0.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-mascary2024" class="csl-entry quarto-appendix-citeas">
Mascary, Sadchla. 2024. <span>“Xportr 0.4.0.”</span> March 29, 2024. <a href="https://pharmaverse.github.io/blog/posts/2024-03-29_xportr_0_4_0/xportr_0_4_0.html">https://pharmaverse.github.io/blog/posts/2024-03-29_xportr_0_4_0/xportr_0_4_0.html</a>.
</div></div></section></div> ]]></description>
  <category>ADaMs</category>
  <category>SDTMs</category>
  <category>xportr</category>
  <guid>https://pharmaverse.github.io/blog/posts/2024-03-29_xportr_0_4_0/xportr_0_4_0.html</guid>
  <pubDate>Fri, 29 Mar 2024 00:00:00 GMT</pubDate>
  <media:content url="https://pharmaverse.github.io/blog/posts/2024-03-29_xportr_0_4_0/xportr.png" medium="image" type="image/png" height="167" width="144"/>
</item>
<item>
  <title>Tips for First Time Contributors</title>
  <dc:creator>Ross Farrugia</dc:creator>
  <link>https://pharmaverse.github.io/blog/posts/2024-03-11_tips_for__first_.../tips_for__first__time__contributors.html</link>
  <description><![CDATA[ 





<!--------------- typical setup ----------------->
<!--------------- post begins here ----------------->
<section id="step-one-overcoming-the-fear" class="level2">
<h2 class="anchored" data-anchor-id="step-one-overcoming-the-fear">Step One: Overcoming the Fear</h2>
<p>Who remembers their first day at school?</p>
<p>What about if you ever had to move to join a new school mid-year?</p>
<p>I had that experience as a child, and there was nothing more intimidating than stepping into a classroom of kids that had already made long-standing bonds and cliques, and here’s me joining as an outsider - the new kid! I had a crippling shyness that meant it took many years until I allowed the same level of friendships to grow as I had in my old school.</p>
<p>Memories like this stay with us, and they can have a habit of holding us back in later life. It never feels comfortable being the “new kid” and it takes a brave step to jump in and be open to the new connections and relationships that might come from this.</p>
<p>Getting involved with open source can feel similarly daunting. You’ll likely get hit with impostor syndrome making you doubt whether your code is worthy of sharing or you may fear being judged publicly by others. Even more fundamentally, you might lack certain skills or experience (such as <a href="https://git-scm.com/book/en/v2/Getting-Started-What-is-Git%3F">git</a>) which could make an initial barrier.</p>
<p>One of the key tenets when we started Pharmaverse was for this to be driven by a passionate community of people, many of whom that actually use the packages, as who better to empathize with the challenge at hand than the users themselves? So firstly, please erase from your mind the thought that package development is only for the elite and you are <em>“not worthy”</em>. Nothing could be further from the truth!</p>
<p>To share a Coretta Scott King quote: <em>“The greatness of a community is most accurately measured by the compassionate actions of its members”</em>. Now, in no way do I mean here to compare our community to her amazing work for the civil rights movement, but the quote is inspiring in many contexts. We are building a pharma global community of people from all walks of life that come together to help build shared solutions to our industry clinical reporting challenges. The best way we can do this is by having compassion with one another, and you often will find exactly that when you first join a package development team - most people are willing to invest in helping you along your learning journey.</p>
</section>
<section id="step-two-where-to-start" class="level2">
<h2 class="anchored" data-anchor-id="step-two-where-to-start">Step Two: Where to Start</h2>
<p>Our Pharmaverse website has an <a href="https://pharmaverse.org/contribute/ic/">Individual Contributor page</a> to help you first get started as a contributor, including many tips and some useful free online training resources for topics such as R package development, Git and GitHub.</p>
<p>Here are some of the recommendations:</p>
<ul>
<li><p>Start small - it doesn’t even need to be a code contribution to begin with! We are equally grateful for anyone raising GitHub issues to report bugs or new feature ideas.</p></li>
<li><p>When it comes to you feeling ready to start to contribute code, then choose a package that covers an area of clinical reporting that you already feel confident with. Reach out to the team via our <a href="https://join.slack.com/t/pharmaverse/shared_invite/zt-yv5atkr4-Np2ytJ6W_QKz_4Olo7Jo9A">Pharmaverse Slack</a> or on GitHub to express interest, and they may even be able to support you onboarding.</p></li>
<li><p>Be kind to yourself and take on one of the easier issues to build confidence - these are often labeled “good first issue” and might include activities like updating a unit test or some documentation.</p></li>
<li><p>Expect to have review findings for your early Pull Requests and that’s absolutely OK as the learning comes from experience. I’ve been there! I share <a href="https://github.com/pharmaverse/admiral/pull/760">here</a> without shame my first ever code contribution to admiral and 4 rounds of review later we finally got it merged! Over time I’m glad to say things improved, although maybe that depends who you ask… :D</p></li>
</ul>
</section>
<section id="step-three-still-having-doubt" class="level2">
<h2 class="anchored" data-anchor-id="step-three-still-having-doubt">Step Three: Still Having Doubt?</h2>
<p>I wanted to include a testimonial from another member of the community who has more recently been through all of the above steps.</p>
<p>Here’s Celine Piraux’s story in her own words:</p>
<p><em>Last year, I began my involvement with the xportr R package, and I’d like to share my journey towards my first pull request (PR). As a statistical programmer mainly using SAS, with some knowledge of R, I initially had no experience with R package development. Nevertheless, I was eager to contribute to an open-source R package.</em></p>
<p><em>The first step in getting involved with an R package is to be aware that volunteers are needed. In my case, I noticed a call for volunteers posted on Slack for the xportr package. Since this package aligns with my expertise in metadata, I eagerly jumped at the opportunity.</em></p>
<p><em>With no prior experience in R package development and apprehensions about potentially breaking the code, I initially adopted an observational approach. I began by installing the package, running its functions, and then exploring the code to understand their implementation. I tested the functions to evaluate if they worked as expected. If I encountered any issues, I documented them in a GitHub issue.</em></p>
<p><em>After creating the GitHub issues with my findings, I began to follow the implementation process by another developer to become more familiar with GitHub. This involved observing how branches are created, commits are made, and comparisons between commits and branches are performed. I also learned about the functioning of comments, pull requests, and the review process.</em></p>
<p><em>Once his PR was completed, it was time for the review phase, during which I ran the new code to understand the changes and experiment with it. This step also involved two technical requirements: firstly, linking my GitHub account with RStudio to access the code in the branch, and secondly, understanding how to execute code within the branch. Since installing packages using <code>install.packages()</code> wouldn’t function for development code, it was essential to know about the function <code>devtools::load_all()</code> to execute the code.</em></p>
<p><em>As I became familiar with both the package and GitHub, I felt more confident to start my first implementation. I read the book ‘R Packages’ to gain a better understanding of R package development. The first chapter, entitled ‘The Whole Game’, provided a good overview of R package development and introduced useful functions such as <code>load_all()</code>, <code>document()</code>, <code>test()</code>, and <code>check()</code>.</em></p>
<p><em>With this first implementation, I dived into the development process of the package, involving tasks such as creating a new branch, committing changes, writing a descriptive commit message (still not sure of the best approach), updating and adding new tests to cover the modifications, resolving merge conflicts, updating documentation, handling failing checks in CI/CD. Having a checklist in the PR template was very helpful to keep all the necessary steps in mind.</em></p>
<p><em>The PR was submitted, and the reviewers provided useful feedback and valuable advice on my code. I implemented the comments, and the PR was approved and merged into the main branch.</em></p>
<p><em>After successfully merging my first PR, I feel more confident in contributing to open-source R packages. It’s now time to select a new issue to tackle.</em></p>
</section>
<section id="step-four-so-what-are-you-waiting-for" class="level2">
<h2 class="anchored" data-anchor-id="step-four-so-what-are-you-waiting-for">Step Four: So, what are YOU waiting for…</h2>
<p>To end, my advice to my 8 year old self from the start of this story would be <em>“Take a risk and dive in - what have you got to lose?!”</em> - and I only hope some part of this message resonates with others reading this blog and considering joining the open source community.</p>
<p>Honestly, you won’t regret it!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pharmaverse.github.io/blog/posts/2024-03-11_tips_for__first_.../contributors.png" class="img-fluid figure-img"></p>
<figcaption>Picture taken from the Pharmaverse website: showing the network graph of the 261 Pharmaverse contributors (at the time of writing this blog)</figcaption>
</figure>
</div>
<!--------------- appendices go here ----------------->
</section>
<div class="cell">
<div class="cell-output-display">


</div>
</div>



<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2024-04-08 12:10:43.657718</p>
</div></section><section id="details" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/pharmaverse/blog/tree/main/posts/2024-03-11_tips_for__first_.../code_sections.qmd">source code</a>, <a href="https://github.com/pharmaverse/blog/tree/main/posts/2024-03-11_tips_for__first_.../renv.lock">R environment</a></p>
</div></section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{farrugia2024,
  author = {Farrugia, Ross},
  title = {Tips for {First} {Time} {Contributors}},
  date = {2024-03-11},
  url = {https://pharmaverse.github.io/blog/posts/2024-03-11_tips_for__first_.../tips_for__first__time__contributors.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-farrugia2024" class="csl-entry quarto-appendix-citeas">
Farrugia, Ross. 2024. <span>“Tips for First Time Contributors.”</span>
March 11, 2024. <a href="https://pharmaverse.github.io/blog/posts/2024-03-11_tips_for__first_.../tips_for__first__time__contributors.html">https://pharmaverse.github.io/blog/posts/2024-03-11_tips_for__first_.../tips_for__first__time__contributors.html</a>.
</div></div></section></div> ]]></description>
  <category>community</category>
  <guid>https://pharmaverse.github.io/blog/posts/2024-03-11_tips_for__first_.../tips_for__first__time__contributors.html</guid>
  <pubDate>Mon, 11 Mar 2024 00:00:00 GMT</pubDate>
  <media:content url="https://pharmaverse.github.io/blog/posts/2024-03-11_tips_for__first_.../contributors.png" medium="image" type="image/png" height="142" width="144"/>
</item>
<item>
  <title>Inside the Pharmaverse</title>
  <dc:creator>Michael Rimler</dc:creator>
  <link>https://pharmaverse.github.io/blog/posts/2024-03-04_inside_the__phar.../inside_the__pharmaverse.html</link>
  <description><![CDATA[ 





<!--------------- typical setup ----------------->
<!--------------- post begins here ----------------->
<p>Greetings, Pharmaverse phriends!</p>
<p>Now that the {pharmaverse} has been around for a few years and seems to be making an impact on clinical reporting (yay!), we wanted to take an opportunity to cast a light on some of the inner workings of Pharmaverse and its Council (us). Fortunately, some of you (you know who you are) innovated and created this fantastic channel for <a href="https://pharmaverse.github.io/blog/">Pharmaverse Blogs</a>. We can’t think of a better way to communicate than by the channel that the Pharmaverse community itself created.</p>
<section id="pharmaverse-inception" class="level2">
<h2 class="anchored" data-anchor-id="pharmaverse-inception">Pharmaverse Inception</h2>
<p>The Pharmaverse Council was formed in 2020 as a coming together of 4 like-minded individuals embedded in the industry-wide efforts to increase the use of the R language for clinical trial analysis and reporting. These individuals included <a href="https://www.linkedin.com/in/ross-farrugia-820839204/">Ross Farrugia</a> (Roche), <a href="https://www.linkedin.com/in/sumesh-kalappurakal-b8283ab/">Sumesh Kalappurakal</a> (Johnson &amp; Johnson), <a href="https://www.linkedin.com/in/michaelrimler/">Michael Rimler</a> (GSK), and <a href="https://www.linkedin.com/in/michael-s-stackhouse/">Mike Stackhouse</a> (Atorus). Each had historical experience with R adoption, through their primary roles within their respective organizations.</p>
<p>Collectively, these 4 individuals saw the value in</p>
<ol type="i">
<li><p>reducing the choice set of R packages for users,</p></li>
<li><p>identifying gaps in available R packages for delivering the clinical data pipeline, and</p></li>
<li><p>encouraging the development of new packages and/or features to close those gaps.</p></li>
</ol>
<p>The result would be a subset of permissively licensed and open-sourced packages that anyone could use (or modify) to suit their specific use cases, thereby reducing the incidence of organizations privately solving typical problems in isolation. For more background, please refer to the <a href="https://pharmaverse.org/charter/">Pharmaverse Charter</a>.</p>
<p>The current Pharmaverse Council companies include GSK, Roche, Johnson &amp; Johnson, Atorus, and Novo Nordisk, represented by the original four founders and <a href="https://www.linkedin.com/in/ari-siggaard-knoph-7b852575/">Ari Siggaard Knoph</a> from Novo Nordisk.</p>
<p>In March 2023, the <a href="https://phuse.global/">PHUSE</a> Board of Directors approached the Pharmaverse Council with a proposal offering support to Pharmaverse developers and leadership to advance the Pharmaverse mission. The PHUSE proposal aligned with its mission to promote “[s]haring ideas, tools and standards around data, statistical and reporting technologies to advance the future of life sciences.” PHUSE is currently a supporter of the Pharmaverse and its objectives, evident through activities such as:</p>
<ul>
<li><p>the provision of access to PHUSE’s communication and file-sharing platforms to package teams,</p></li>
<li><p>the provision of project management support to package teams (if needed),</p></li>
<li><p>enablement and promotion of Pharmaverse innovations and activities, and</p></li>
<li><p>enablement of face-to-face community connections at PHUSE events.</p></li>
</ul>
</section>
<section id="pharmaverse-objective" class="level2">
<h2 class="anchored" data-anchor-id="pharmaverse-objective">Pharmaverse Objective</h2>
<p>Pharmaverse aims to promote the collaborative development of curated open-source R packages for clinical reporting in pharma. Indirectly, we also strive to encourage and increase R adoption within the industry and facilitate communication and collaboration among both R users and R developers.</p>
</section>
<section id="becoming-a-council-member" class="level2">
<h2 class="anchored" data-anchor-id="becoming-a-council-member">Becoming a Council Member</h2>
<p>Membership to the <strong>Pharmaverse Council</strong> is granted to the organization and is open to any type of organization (requirements further described <a href="https://pharmaverse.org/contribute/council/">here</a>). In layperson’s terms, the Council member organization must support a representative on the council and demonstrate a commitment to contributions to the Pharmaverse codebase. Specifically, <em>“Commitment to at least 2 open source packages under Pharmaverse via reviews, hands-on code development, product leads, or other roles which contribute to the design, development, testing, release, and/or maintenance.”</em> If any representative steps away from their council position, the member organization would identify the replacement. Council meeting minutes are published in the Pharmaverse GitHub <a href="https://github.com/pharmaverse/pharmaverse/tree/main/static/council%20meeting%20minutes">here</a>.</p>
</section>
<section id="package-inclusion" class="level2">
<h2 class="anchored" data-anchor-id="package-inclusion">Package Inclusion</h2>
<p>Applications for a package to be included in the Pharmaverse may originate from anybody and anywhere. The Council (through its <a href="https://pharmaverse.org/contribute/wg/">Working Groups</a>) reviews applications and either (i) approves the package into the Pharmaverse or (ii) rejects the package with a rationale. When a rejection has been issued, common reasons have been ‘not now’ with feedback to enhance testing, documentation, or other aspects that enrich the package. Working Groups may also steer the applicant to other packages with similar functionality. In this sense, respective package maintainers (product owners) are encouraged to work collaboratively to reduce duplicated features across packages and improve the overall experience of the user base. The Council and Working Groups are tasked with assessing this aspect of the Pharmaverse code base, but the decision on implementation ultimately resides with the individual package maintainers.</p>
<p>Package reviews are conducted in the open:</p>
<ul>
<li><p><strong>Example 1:</strong> {riskassessment} from R Validation Hub working group – result successful: <a href="https://github.com/pharmaverse/pharmaverse/issues/195" class="uri">https://github.com/pharmaverse/pharmaverse/issues/195</a></p></li>
<li><p><strong>Example 2:</strong> {rhino} from Appsilon – result successful: <a href="https://github.com/pharmaverse/pharmaverse/issues/260" class="uri">https://github.com/pharmaverse/pharmaverse/issues/260</a></p></li>
<li><p><strong>Example 3:</strong> {synthetic.cdisc.data} from Roche – result unsuccessful: <a href="https://github.com/pharmaverse/pharmaverse/issues/235" class="uri">https://github.com/pharmaverse/pharmaverse/issues/235</a></p></li>
</ul>
<p>At the time of publication, there were over 250 contributors to Pharmaverse packages, across a network of organizations much broader than just the 5 Council member organizations. Pharmaverse Council encourages diversity of individual contributors and the organizations they are affiliated with. The decision on product development team rosters is the sole discretion of the packages. Of course, Council member organizations are providing people to support the Pharmaverse ecosystem (e.g., developers and product owners). However, both strategic and operational decisions on the development and maintenance of individual packages reside outside the Pharmaverse Council.</p>
</section>
<section id="user-adoption" class="level2">
<h2 class="anchored" data-anchor-id="user-adoption">User adoption</h2>
<p>Pharma companies are free to choose any selection of R packages for clinical reporting and only they can justify their choices. The <a href="https://pharmaverse.org/">Pharmaverse website</a> states that “[a]nyone is free to choose any selection of Pharmaverse recommended software or those from any other source.” In addition, Pharmaverse does not seek to engage or get endorsement from any health authority. We are merely trying to provide a public service to help individuals and organizations involved in clinical reporting navigate a vast field of available R packages licensed as open source.</p>
<p>The Pharmaverse website provides illustrative <a href="https://pharmaverse.github.io/examples/">examples</a> of how to use Pharmaverse and other packages to build common deliverables.</p>
</section>
<section id="so-what-really-is-pharmaverse" class="level2">
<h2 class="anchored" data-anchor-id="so-what-really-is-pharmaverse">So, what really is Pharmaverse?</h2>
<p>Pharmaverse is essentially two things:</p>
<ol type="1">
<li><p>Pharmaverse is a list of packages curated by the Pharmaverse Council and Working Groups, primarily communicated via the Pharmaverse website. Pharmaverse also maintains an <a href="https://pharmaverse.r-universe.dev/builds">R-universe build</a> for ease of use outside GxP settings.</p></li>
<li><p>Pharmaverse is a community of R users and R developers “working to promote collaborative development of curated open-source R packages for clinical reporting usage in pharma.”</p></li>
</ol>
<p>Pharmaverse Council provides a <a href="https://pharmaverse.slack.com/">Slack workspace</a> to build community amongst all interested parties and serve as a communication platform for individuals and package teams. At present, membership to this workspace exceeds &gt;1200 members.</p>
<p>Pharmaverse Council also provides a <a href="https://github.com/pharmaverse">GitHub organization</a> for developers to work in, but hosting packages in the Pharmaverse GitHub is not required to be part of Pharmaverse.</p>
<p>These elements are supported on an all-volunteer basis, mostly with community versions of various platforms (e.g., we use the free tier on Slack).</p>
</section>
<section id="thank-you" class="level2">
<h2 class="anchored" data-anchor-id="thank-you">Thank you</h2>
<p>Thank you, each of you, for the part that you play. No matter how big or small, you are helping amplify the impact that open collaboration is having on how we deliver new medicines and vaccines to patients around the world. We hope you are finding, and continue to find, Pharmaverse a valuable piece of the clinical reporting puzzle.</p>
<p>And, if not – let us know!</p>
<p><em>Pharmaverse Council – Ari, Michael, Mike, Ross, and Sumesh</em></p>
<p><strong>Disclaimer:</strong> This blog contains opinions that are of the authors alone and do not necessarily reflect the strategy of their respective organizations.</p>
<!--------------- appendices go here ----------------->
</section>
<div class="cell">
<div class="cell-output-display">


</div>
</div>



<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2024-04-08 12:10:49.008194</p>
</div></section><section id="details" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/pharmaverse/blog/tree/main/posts/2024-03-04_inside_the__phar.../code_sections.qmd">source code</a>, <a href="https://github.com/pharmaverse/blog/tree/main/posts/2024-03-04_inside_the__phar.../renv.lock">R environment</a></p>
</div></section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{rimler2024,
  author = {Rimler, Michael},
  title = {Inside the {Pharmaverse}},
  date = {2024-03-04},
  url = {https://pharmaverse.github.io/blog/posts/2024-03-04_inside_the__phar.../inside_the__pharmaverse.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-rimler2024" class="csl-entry quarto-appendix-citeas">
Rimler, Michael. 2024. <span>“Inside the Pharmaverse.”</span> March 4,
2024. <a href="https://pharmaverse.github.io/blog/posts/2024-03-04_inside_the__phar.../inside_the__pharmaverse.html">https://pharmaverse.github.io/blog/posts/2024-03-04_inside_the__phar.../inside_the__pharmaverse.html</a>.
</div></div></section></div> ]]></description>
  <category>community</category>
  <guid>https://pharmaverse.github.io/blog/posts/2024-03-04_inside_the__phar.../inside_the__pharmaverse.html</guid>
  <pubDate>Mon, 04 Mar 2024 00:00:00 GMT</pubDate>
  <media:content url="https://pharmaverse.github.io/blog/posts/2024-03-04_inside_the__phar.../pharmaverse.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Rhino: A Step Forward in Validating Shiny Apps</title>
  <dc:creator>Kamil Żyła</dc:creator>
  <dc:creator>Ege Can Taşlıçukur</dc:creator>
  <dc:creator>APPSILON </dc:creator>
  <link>https://pharmaverse.github.io/blog/posts/2024-03-01_rhino_shiny_app_validation/rhino_shiny_app_validation.html</link>
  <description><![CDATA[ 





<!--------------- typical setup ----------------->
<!--------------- post begins here ----------------->
<p>The importance of reliable and accurate software in the pharmaceutical industry cannot be overstated. As you grapple with the complexities of developing Shiny applications that not only meet requirements but also remain free of defects, the conversation inevitably turns to the topic of <strong>validation</strong>. This is where the <a href="https://appsilon.github.io/rhino/?utm_source=referral&amp;utm_medium=pharmaverse&amp;utm_campaign=blog&amp;utm_term=appsilon-account">Rhino</a> framework comes into play. It provides a validation environment through a set of tools that not only ensure the thorough testing of your Shiny Application but also enforce good software practices for producing quality code.</p>
<section id="what-is-validation" class="level2">
<h2 class="anchored" data-anchor-id="what-is-validation">What is Validation?</h2>
<p>At its core, validation is about generating objective evidence that the software consistently fulfills the users’ needs and requirements. It is closely intertwined with concepts such as verification, testing, quality assurance, and quality control. However, it is not a one-time activity. Validation is an ongoing aspect of the entire development process for assessing whether an application meets requirements and is free of defects. (<a href="https://phuse.s3.eu-central-1.amazonaws.com/Deliverables/Data+Visualisation+%26+Open+Source+Technology/WP059.pdf">phuse, 2021</a>)</p>
<p>The foundational aspect of validation lies in the clarity and precision of the requirements set upfront. Projects often encounter challenges not due to technical constraints but unclear requirements. This clear definition of needs is the first and most critical step in the validation process, setting the stage for effective and meaningful software evaluation.</p>
<p>Testing in some form is indispensable in any software engineering project. However, writing automated tests costs time and effort. Therefore, the approach to testing can vary widely depending on the project’s scope, complexity, and purpose.</p>
<p>For instance, manual testing, which involves checking the software by hand for bugs or other issues, might suffice for a Proof of Concept (PoC) application. On the other hand, in applications performing critical functions, such as those involved in clinical trial data analysis, the cost of failure could be extremely high, necessitating more rigorous and comprehensive automated testing.</p>
<p>The key is to strike a <strong>balance</strong>, ensuring the software is thoroughly validated without exhausting resources.</p>
</section>
<section id="how-rhino-helps-in-validating-r-shiny-apps" class="level2">
<h2 class="anchored" data-anchor-id="how-rhino-helps-in-validating-r-shiny-apps">How Rhino Helps in Validating R Shiny Apps</h2>
<p><a href="https://appsilon.github.io/rhino/?utm_source=referral&amp;utm_medium=pharmaverse&amp;utm_campaign=blog&amp;utm_term=appsilon-account">Rhino</a> automates the steps for creating the validation environment so you can spend your time and effort on writing the actual tests.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pharmaverse.github.io/blog/posts/2024-03-01_rhino_shiny_app_validation/images/rhino-ci.png" class="img-fluid figure-img" width="454"></p>
<figcaption>Validation with Rhino</figcaption>
</figure>
</div>
<p>When you first run <code>rhino::init()</code> inside your project’s root directory, <a href="https://appsilon.github.io/rhino/?utm_source=referral&amp;utm_medium=pharmaverse&amp;utm_campaign=blog&amp;utm_term=appsilon-account">Rhino</a> introduces a suite of tools that will help you validate your Shiny application and a robust file structure to modularize your code into meaningful parts. With Rhino initialized, validating your Shiny application becomes an integral and seamless part of your development workflow.</p>
<section id="testing" class="level3">
<h3 class="anchored" data-anchor-id="testing">Testing</h3>
<p>Rhino comes with <a href="https://testthat.r-lib.org/">testthat</a> installed and introduces the <code>tests/</code> directory in your project. As part of the validation process, you want to test your requirements. With Rhino, all you need to do is create your test-*.R files in tests/testthat directory and run <a href="https://appsilon.github.io/rhino/reference/init.html"><code>rhino::test_r()</code></a>.</p>
<p>Although <a href="https://rstudio.github.io/shinytest2/">shinytest2</a> tests can also be added with minimal effort (<a href="https://appsilon.github.io/rhino/articles/how-to/use-shinytest2.html">How to use shinytest2</a>), one of the distinct features of Rhino is the ability to write end-to-end tests with Cypress out of the box. To learn more about how to write Cypress tests via Rhino, you can read more on <a href="https://appsilon.github.io/rhino/articles/tutorial/write-end-to-end-tests-with-cypress.html">Write end-to-end tests with Cypress tutorial</a> in the documentation.</p>
<section id="continuous-integration-via-github" class="level4">
<h4 class="anchored" data-anchor-id="continuous-integration-via-github">Continuous Integration via GitHub</h4>
<p>As discussed in the “What is validation?” section, validation is a continuous process. To accomplish this, Rhino uses a GitHub Actions workflow. This file enables the automatic running of tests and linting checks every time the code is pushed to the Github repository.</p>
<p>You can further configure your repository to require these checks to pass before a pull request can be merged, ensuring only validated code makes it into your project.</p>
</section>
</section>
<section id="standardization-of-good-practices" class="level3">
<h3 class="anchored" data-anchor-id="standardization-of-good-practices">Standardization of Good Practices</h3>
<p>Rhino also provides tools for good software development practices. These standardization tools don’t directly address requirements or defects, but they raise the overall code quality.</p>
<section id="rhinolint_-functions" class="level4">
<h4 class="anchored" data-anchor-id="rhinolint_-functions">rhino::lint_* Functions</h4>
<p>Rhino provides linters for R (<a href="https://appsilon.github.io/rhino/reference/lint_r.html"><code>rhino::lint_r</code></a>), Javascript (<a href="https://appsilon.github.io/rhino/reference/lint_js.html"><code>rhino::lint_js</code></a>), and Sass (<a href="https://appsilon.github.io/rhino/reference/lint_sass.html"><code>rhino::lint_sass</code></a>) code. These linters ensure that the code style is consistent. This consistency might not be visible to the end-users, but it significantly enhances code readability and maintainability, which are crucial for reducing bugs and errors in the application. The cleaner and more readable the code, the easier it is for you to spot and rectify issues.</p>
</section>
<section id="modularization-with-box" class="level4">
<h4 class="anchored" data-anchor-id="modularization-with-box">Modularization with <code>box</code></h4>
<p>Modularization allows developers to compartmentalize different aspects of the application, making each part easier to understand, develop, and validate individually.</p>
<p>Rhino leverages the <a href="https://klmr.me/box/reference/index.html">box</a> package for effective modularization. This approach to structuring the app makes the codebase more manageable and navigable and significantly enhances the ease of testing and maintenance.</p>
</section>
<section id="reproducibility-with-renv" class="level4">
<h4 class="anchored" data-anchor-id="reproducibility-with-renv">Reproducibility with <code>renv</code></h4>
<p><a href="https://rstudio.github.io/renv/index.html">renv</a> is currently the best tool for ensuring reproducibility and consistency across different development environments. Each Rhino project comes with <code>renv</code> activated. It further automatizes managing dependencies with <a href="https://appsilon.github.io/rhino/reference/dependencies.html"><code>rhino::pkg_install()</code> and <code>rhino::pkg_remove()</code></a> functions to install, update or remove a package with just one call. Check out this <a href="https://appsilon.github.io/rhino/articles/explanation/renv-configuration.html">explanation on Renv configuration</a> to learn more!</p>
</section>
</section>
</section>
<section id="wider-picture" class="level2">
<h2 class="anchored" data-anchor-id="wider-picture">Wider picture</h2>
<section id="bare-bones-approach" class="level3">
<h3 class="anchored" data-anchor-id="bare-bones-approach">Bare Bones Approach</h3>
<p>A minimal Shiny app can be as simple as a single file. This ‘bare bones’ approach is the most straightforward, requiring minimal setup. However, it places the workload on the developer to establish everything from scratch.</p>
<p>This method may be suitable for quick prototypes or small-scale projects but it lacks the robustness needed for complex, large-scale applications, especially in a field as critical as pharmaceuticals.</p>
</section>
<section id="other-shiny-frameworks" class="level3">
<h3 class="anchored" data-anchor-id="other-shiny-frameworks">Other Shiny Frameworks</h3>
<p>Frameworks like <a href="https://thinkr-open.github.io/golem/">Golem</a> and <a href="https://leprechaun.opifex.org/#/">Leprechaun</a> adopt R package structure for Shiny apps. This method allows developers to leverage standard R package testing tools like R CMD check.</p>
<p>While this approach brings the benefits of R’s package development ecosystem, it does not offer extra state-of-the-art tools such as linters, Cypress tests, and GitHub Actions that Rhino provides out of the box. Leaving the burden of manually setting them up on the developers.</p>
<p>Read our <a href="https://appsilon.com/rhino-vs-golem-vs-leprechaun/?utm_source=referral&amp;utm_medium=pharmaverse&amp;utm_campaign=blog&amp;utm_term=appsilon-account">{rhino} vs {golem} vs {leprechaun}: Which R/Shiny Library is Right for You?</a> blog post to learn more about the differences.</p>
</section>
<section id="validation-theater" class="level3">
<h3 class="anchored" data-anchor-id="validation-theater">Validation Theater</h3>
<p>Test coverage is often cited as a key metric for assessing the reliability of an application. While high test coverage is beneficial, it is not a definitive guarantee of software quality. The quality of the tests themselves matters significantly more. A common pitfall is the overreliance on achieving 100% test coverage, which may give a false sense of security about the application’s robustness.</p>
<p>Additionally, R CMD checks provide reassurance with their green check marks. However, many of these automated validations are not directly applicable or relevant to Shiny apps. This is one of the reasons why Rhino does not use these checks. While they are useful, they do not encompass the full spectrum of what needs to be tested in a Shiny application.</p>
<p><strong>The key takeaway is that no automated check can substitute for a thorough and well-thought-out development process.</strong> The quality of a Shiny application hinges not just on the tests it passes but on the entirety of its development lifecycle, from initial design to final deployment.</p>
</section>
</section>
<section id="summing-up-rhino-for-r-shiny-app-validation" class="level2">
<h2 class="anchored" data-anchor-id="summing-up-rhino-for-r-shiny-app-validation">Summing up Rhino for R Shiny App Validation</h2>
<p>Rhino adopts a software engineering perspective, focusing primarily on the technical facets of validation. It provides a comprehensive suite of tools that streamline the process of creating Shiny applications that are not only functionally sound but also robust and maintainable.</p>
<p>However, it’s crucial to recognize that Rhino’s contribution is a piece of a much larger puzzle. Validation, as emphasized throughout this post, is not a standalone activity but a continuous process that intertwines with every phase of software development.</p>
<p>From the initial requirement gathering to the final deployment, each step plays a vital role in shaping the overall quality and effectiveness of the application.</p>
<p>If you’d like to learn more about Rhino, especially within the context of building Shiny apps for regulatory submissions you can check out this blogpost, <a href="https://appsilon.com/reproducible-and-reliable-shiny-apps-for-regulatory-submissions/?utm_source=referral&amp;utm_medium=pharmaverse&amp;utm_campaign=blog&amp;utm_term=appsilon-account"><strong>Reproducible and Reliable Shiny Apps for Regulatory Submissions</strong></a> or visit <a href="Appsilon.com?utm_source=referral&amp;utm_medium=pharmaverse&amp;utm_campaign=blog&amp;utm_term=appsilon-account">Appsilon’s website</a>.</p>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<p>phuse. (2021). R Package Validation Framework. R Package Validation Framework. https://phuse.s3.eu-central-1.amazonaws.com/Deliverables/Data+Visualisation+%26+Open+Source+Technology/WP059.pdf</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{żyła2024,
  author = {Żyła, Kamil and Can Taşlıçukur, Ege and , APPSILON},
  title = {Rhino: {A} {Step} {Forward} in {Validating} {Shiny} {Apps}},
  date = {2024-03-01},
  url = {https://pharmaverse.github.io/blog/posts/2024-03-01_rhino_shiny_app_validation/rhino_shiny_app_validation.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-żyła2024" class="csl-entry quarto-appendix-citeas">
Żyła, Kamil, Ege Can Taşlıçukur, and APPSILON. 2024. <span>“Rhino: A
Step Forward in Validating Shiny Apps.”</span> March 1, 2024. <a href="https://pharmaverse.github.io/blog/posts/2024-03-01_rhino_shiny_app_validation/rhino_shiny_app_validation.html">https://pharmaverse.github.io/blog/posts/2024-03-01_rhino_shiny_app_validation/rhino_shiny_app_validation.html</a>.
</div></div></section></div> ]]></description>
  <category>submission</category>
  <category>community</category>
  <guid>https://pharmaverse.github.io/blog/posts/2024-03-01_rhino_shiny_app_validation/rhino_shiny_app_validation.html</guid>
  <pubDate>Fri, 01 Mar 2024 00:00:00 GMT</pubDate>
  <media:content url="https://pharmaverse.github.io/blog/posts/2024-03-01_rhino_shiny_app_validation/Rhino.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>ISCR 17th Annual Conference 2024</title>
  <dc:creator>Pooja Kumari</dc:creator>
  <link>https://pharmaverse.github.io/blog/posts/2024-02-14_iscr_conference/iscr_conference.html</link>
  <description><![CDATA[ 





<!--------------- typical setup ----------------->
<!--------------- post begins here ----------------->
<section id="iscr-17th-annual-conference-2024" class="level2">
<h2 class="anchored" data-anchor-id="iscr-17th-annual-conference-2024">ISCR 17th Annual Conference 2024</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pharmaverse.github.io/blog/posts/2024-02-14_iscr_conference/ISCR.PNG" class="img-fluid figure-img"></p>
<figcaption>Pic 1: ISCR 17th Annual Conference 2024</figcaption>
</figure>
</div>
<p>Indian Society for Clinical Research (ISCR), launched in June 2005, is a not-for-profit professional association of all stakeholders in clinical research.</p>
<p>ISCR hosted its <a href="https://conference.iscr.org/Default.aspx">17th Annual Conference 2024</a> at Hotel Novotel HICC, Hyderabad, INDIA on the theme <strong>Transformations in Clinical Research For Better Patient Outcomes</strong>, with Pre-Conference Workshops held on February 1, 2024 (Thursday) and two-day main Conference held on February 02 &amp; 03, 2024 (Friday-Saturday), which were attended by over 800 delegates from academic institutions, ethics committees, bio-pharmaceutical industry, government, patient organizations and clinical research organizations.</p>
</section>
<section id="session-recap" class="level2">
<h2 class="anchored" data-anchor-id="session-recap">Session Recap</h2>
<p>I had the privilege to present in front of 100+ delegates across the industry ranging from freshers to seasoned clinical professionals during ISCR 17th Annual Conference 2024 on the topic <em>Travese the PHARMAVERSE: ouR Insights</em> in the <a href="https://conference.iscr.org/Agenda.aspx">Biostatistics and Statistical Programming|02-Feb-2024</a> track including many more interesting presentations highlighting their experience with R submissions using various open source technologies.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.linkedin.com/feed/update/urn:li:activity:7158082065261858816/"><img src="https://pharmaverse.github.io/blog/posts/2024-02-14_iscr_conference/ISCR_session_intro.jpg" class="img-fluid figure-img" alt="Pic 2: Source - LinkedIn"></a></p>
<figcaption>Pic 2: Source - LinkedIn</figcaption>
</figure>
</div>
<p>The session consisted of three presentations, namely:</p>
<ul>
<li><p>A real world insight and navigation on bridging FDA submission using R by <a href="https://www.linkedin.com/in/soumitra-kar-007/">Soumitra Kar</a> &amp; <a href="https://www.linkedin.com/in/mahendran-venkatachalam-3aa7293b/">Mahendran Venkatachalam</a></p></li>
<li><p>Traverse the ‘PHARMAVERSE’ : ouR insights by <a href="https://www.linkedin.com/in/pooja-kumari-581940b0/">Pooja Kumari</a></p></li>
<li><p>Package in CRAN : {admiralvaccine} by <a href="https://www.linkedin.com/in/dhivya-kanagaraj-149b68141/">Divya Kanagaraj</a> and <a href="https://www.linkedin.com/in/arjun-r-2488b2208/">Arjun R</a></p></li>
</ul>
<p>It was inaugurated with great enthusiast and sharing insights on <em>Opportunities/Challenges of using different technologies like R in regulatory Submissions</em> by the session chair <a href="https://www.linkedin.com/in/soumitra-kar-007/">Soumitra Kar</a>. He along with his co-presenter <a href="https://www.linkedin.com/in/mahendran-venkatachalam-3aa7293b/">Mahendran Venkatachalam</a> shared their experience of submitting first R-based Submission to FDA. The presentation was a perfect combination of inspiring storytelling, climax and thrill to address FDA review comments and releasing the blockbuster R submission by Novo-Nordisk creating history.</p>
<p>This was followed by my presentation on <em>Travese the PHARMAVERSE: ouR Insights</em>, wherein I gave a brief introduction to PHARMAVERSE universe and how we operate. Many R enthusiasts are well versed with the evolution of <a href="https://pharmaverse.github.io/admiral/index.html">{admiral}</a> and its propensity to develop ADaMs. However, very few know about other packages such as <a href="https://atorus-research.github.io/metacore/">{metacore}</a>, <a href="https://pharmaverse.github.io/metatools/">{metatools}</a>, <a href="https://atorus-research.github.io/xportr/">{xportr}</a> which are developed considering the regulatory agency guidelines and can aid the process of creating ADaM datasets proficiently. I took the opportunity to supercharge the process knowledge of creating submission ready ADaMs covering end-to-end process using these PHARMAVERSE packages along with some to R submission success stories.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><embed src="Pooja_Kumari_ISCR_2024_MainConf_Biostatistics.pdf" style="width:8in;height:5in"></p>
<figcaption>Presentation: Travese the PHARMAVERSE: ouR Insights</figcaption>
</figure>
</div>
<p>Next presentation was on <a href="https://pharmaverse.github.io/admiralvaccine/">{admiralvaccine}</a>, an extension package of <a href="https://pharmaverse.github.io/admiral/index.html">{admiral}</a> specific to vaccine studies under the PHARMAVERSE universe by <a href="https://www.linkedin.com/in/dhivya-kanagaraj-149b68141/">Divya Kanagaraj</a> and <a href="https://www.linkedin.com/in/arjun-r-2488b2208/">Arjun R</a>. They shared their exciting journey of developing the package since inception to final CRAN release from a developer’s perspective. They also talked about the collaborative effort that went into its successful release.</p>
<p>Overall session was concluded with an interactive Q&amp;A wherein all the presenters and presentations were applauded by the audience as well as the Scientific Committee members. It was an enriching session to witness the growth of R programming leading to R submissions in Clinical Research &amp; Pharmaceutical Industry.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pharmaverse.github.io/blog/posts/2024-02-14_iscr_conference/ISCR_Biostats_S&amp;P_D2_S4.jpg" class="img-fluid figure-img"></p>
<figcaption>Pic 3: Biostatistics and Statistical Programming | 02-Feb-2024, Session 4, Audience Q&amp;A round, Left to right: Pooja Kumari, GSK; Dhivya Kanagaraj, Pfizer; Arjun Rubalingam, Pfizer; Soumitra Kar, Novo Nordisk; Mahendran Venkatachalam, Novo Nordisk</figcaption>
</figure>
</div>
</section>
<section id="key-takeaways" class="level2">
<h2 class="anchored" data-anchor-id="key-takeaways">Key Takeaways</h2>
<p>The two-day conference was full of great learning and meeting esteemed Clinical Pharmaceutical Industry veterans/newbies discussing on trending topics such as <em>Optimizing Clinical Research through effective collaboration between Statisticians and Statistical Programmers</em>, <em>Can new technologies (AI/ML/IOT) a threat or blessing for Biostatisticians and Statistical Programmers?</em> through Panel discussions.</p>
<p>The power of technology coupled with domain expertise can make us deliver quality results faster and serve the world with disease-free healthy life.</p>
<section id="why-should-we-attend-conferences" class="level4">
<h4 class="anchored" data-anchor-id="why-should-we-attend-conferences">Why should we attend Conferences?</h4>
<ul>
<li><p>Conferences are the best place to Connect, Collaborate and Communicate your thoughts with like-minded tribe.</p></li>
<li><p>Biostatistics and Clinical Statistical Programming industry is growing and adopting open source technologies with great acceptance. As an individual we can contribute to communities like PHARMAVERSE to enhance our end-to-end process knowledge, develop programming skills and contribute to a revolutionary concept.</p></li>
<li><p>It gives you a platform to strengthen your presentation as well as self-branding skills.</p></li>
</ul>
</section>
</section>
<section id="gallery" class="level2">
<h2 class="anchored" data-anchor-id="gallery">Gallery</h2>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pharmaverse.github.io/blog/posts/2024-02-14_iscr_conference/Pic1.jpg" style="width:4in;height:2in" class="figure-img"></p>
<figcaption>Pic 4: GCC GSK Biostatistics-India reps. at ISCR, Left to Right: Pooja Kumari; Abhishek Mishra</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pharmaverse.github.io/blog/posts/2024-02-14_iscr_conference/KeepCalm.PNG" style="width:4in;height:2in" class="figure-img"></p>
<figcaption>Pic 5: Keep Calm and Explore PHARMAVERSE</figcaption>
</figure>
</div>
</div>
</div>
</div>
<!--------------- appendices go here ----------------->
</section>
<div class="cell">
<div class="cell-output-display">


</div>
</div>



<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2024-04-08 12:10:56.883296</p>
</div></section><section id="details" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/pharmaverse/blog/tree/main/posts/2024-02-14_iscr_conference/code_sections.qmd">source code</a>, <a href="https://github.com/pharmaverse/blog/tree/main/posts/2024-02-14_iscr_conference/renv.lock">R environment</a></p>
</div></section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{kumari2024,
  author = {Kumari, Pooja},
  title = {ISCR 17th {Annual} {Conference} 2024},
  date = {2024-02-26},
  url = {https://pharmaverse.github.io/blog/posts/2024-02-14_iscr_conference/iscr_conference.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-kumari2024" class="csl-entry quarto-appendix-citeas">
Kumari, Pooja. 2024. <span>“ISCR 17th Annual Conference 2024.”</span>
February 26, 2024. <a href="https://pharmaverse.github.io/blog/posts/2024-02-14_iscr_conference/iscr_conference.html">https://pharmaverse.github.io/blog/posts/2024-02-14_iscr_conference/iscr_conference.html</a>.
</div></div></section></div> ]]></description>
  <category>submission</category>
  <category>ADaMs</category>
  <category>conferences</category>
  <category>admiral</category>
  <category>xportr</category>
  <category>metatools</category>
  <category>metacore</category>
  <guid>https://pharmaverse.github.io/blog/posts/2024-02-14_iscr_conference/iscr_conference.html</guid>
  <pubDate>Mon, 26 Feb 2024 00:00:00 GMT</pubDate>
  <media:content url="https://pharmaverse.github.io/blog/posts/2024-02-14_iscr_conference/ISCR_logo.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Filter out the noise!</title>
  <dc:creator>Edoardo Mancini</dc:creator>
  <link>https://pharmaverse.github.io/blog/posts/2024-03-01_admiral_filter_functions/admiral_filter_functions.html</link>
  <description><![CDATA[ 





<!--------------- typical setup ----------------->
<!--------------- post begins here ----------------->
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Filtering and merging datasets is the bread and butter of statistical programming. Whether it’s on the way to an ADaM variable derivation, or in an effort to pull out a list of patients matching a specific condition for a TLG, or another task entirely, most steps in the statistical programming workflow feature some combination of these two tasks.</p>
<p>The <code>{tidyverse}</code> functions <code>filter()</code>, <code>group_by()</code>, and<code>*_join()</code> are a fantastic toolset for filtering and merging, and can often suffice to carry out these sorts of operations. Often, however, this will be a multi-step process, requiring more than one set of pipe (<code>%&gt;%</code>) chains if multiple datasets are involved. As such, the <a href="https://pharmaverse.github.io/admiral/index.html">{admiral}</a> package builds on this concept by offering a very practical toolset of utility functions, henceforth referred to altogether as <code>filter_*()</code>. These are wrappers of common combinations of <code>{tidyverse}</code> function calls that enable the ADaM programmer to carry out such operations “in stride” within their ADaM workflow - in typical <code>{admiral}</code> style!</p>
<p>Many of the <code>filter_*()</code> functions feature heavily within the <code>{admiral}</code> codebase, but they can be very handy in their own right. You can learn more about them from:</p>
<ul>
<li>The relevant section in the <a href="https://pharmaverse.github.io/admiral/reference/#utilities-for-filtering-observations">Reference page of the admiral documentation website</a>;</li>
<li>The short visual explanations in the second page of the <a href="https://github.com/pharmaverse/admiral/blob/main/inst/cheatsheet/admiral_cheatsheet.pdf">{admiral Cheat Sheet}</a>;</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pharmaverse.github.io/blog/posts/2024-03-01_admiral_filter_functions/filter_functions_cheatsheet.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="500"></p>
</figure>
</div>
<ul>
<li>…and the rest of this blog post!</li>
</ul>
<section id="required-packages" class="level2">
<h2 class="anchored" data-anchor-id="required-packages">Required Packages</h2>
<p>The examples in this blog post require the following packages.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(admiral)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(pharmaversesdtm)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">warn.conflicts =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span></code></pre></div>
</div>
<p>We also create minimally viable ADSL, ADAE and EX datasets to be used where needed in the following examples.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">adsl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb2-2">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>USUBJID,      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>AGE, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>SEX,</span>
<span id="cb2-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1015"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">63</span>,   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span>,</span>
<span id="cb2-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1034"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">77</span>,   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span>,</span>
<span id="cb2-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1115"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">84</span>,   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M"</span>,</span>
<span id="cb2-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1146"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>,   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span>,</span>
<span id="cb2-7">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1444"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">63</span>,   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M"</span></span>
<span id="cb2-8">)</span>
<span id="cb2-9"></span>
<span id="cb2-10">adae1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb2-11">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>USUBJID,      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>AEDECOD,                    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>AESEV,     <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>AESTDTC,</span>
<span id="cb2-12">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1015"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DIARRHOEA"</span>,                 <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MODERATE"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-01-09"</span>,</span>
<span id="cb2-13">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1034"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FATIGUE"</span>,                   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SEVERE"</span>,   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-11-02"</span>,</span>
<span id="cb2-14">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1034"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HEADACHE"</span>,                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MILD"</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-12-01"</span>,</span>
<span id="cb2-15">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1034"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"APPLICATION SITE PRURITUS"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MODERATE"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-08-27"</span>,</span>
<span id="cb2-16">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1115"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FATIGUE"</span>,                   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MILD"</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2013-01-14"</span>,</span>
<span id="cb2-17">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1146"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FATIGUE"</span>,                   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MODERATE"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2013-06-03"</span>,</span>
<span id="cb2-18">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1146"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ANOSMIA"</span>,                   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MODERATE"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2013-08-11"</span></span>
<span id="cb2-19">)</span>
<span id="cb2-20"></span>
<span id="cb2-21">adae2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb2-22">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>USUBJID,      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>ADY, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>ACOVFL,     <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>ADURN,</span>
<span id="cb2-23">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1015"</span>,   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N"</span>,          <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb2-24">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1015"</span>,   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N"</span>,         <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>,</span>
<span id="cb2-25">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1015"</span>,   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span>,         <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,</span>
<span id="cb2-26">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1015"</span>,   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N"</span>,         <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">31</span>,</span>
<span id="cb2-27">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1015"</span>,   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N"</span>,         <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,</span>
<span id="cb2-28">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1034"</span>,   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span>,         <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,</span>
<span id="cb2-29">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1034"</span>,   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N"</span>,          <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb2-30">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1146"</span>,   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span>,         <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,</span>
<span id="cb2-31">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1444"</span>,   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N"</span>,         <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,</span>
<span id="cb2-32">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1444"</span>,   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N"</span>,         <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">41</span></span>
<span id="cb2-33">)</span>
<span id="cb2-34"></span>
<span id="cb2-35"></span>
<span id="cb2-36">ex <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb2-37">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>USUBJID, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>EXSEQ, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>EXDOSE, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>EXTRT,</span>
<span id="cb2-38">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1015"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">54</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"XANO"</span>,</span>
<span id="cb2-39">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1015"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">54</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"XANO"</span>,</span>
<span id="cb2-40">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1015"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">54</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"XANO"</span>,</span>
<span id="cb2-41">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1034"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">54</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"XANO"</span>,</span>
<span id="cb2-42">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1034"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">54</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"XANO"</span>,</span>
<span id="cb2-43">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1115"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PLACEBO"</span>,</span>
<span id="cb2-44">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1115"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PLACEBO"</span>,</span>
<span id="cb2-45">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1115"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PLACEBO"</span>,</span>
<span id="cb2-46">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1146"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PLACEBO"</span>,</span>
<span id="cb2-47">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1146"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PLACEBO"</span>,</span>
<span id="cb2-48">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1146"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PLACEBO"</span>,</span>
<span id="cb2-49">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1444"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">54</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"XANO"</span>,</span>
<span id="cb2-50">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-701-1444"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">54</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"XANO"</span></span>
<span id="cb2-51">)</span></code></pre></div>
</div>
</section>
</section>
<section id="filter_exist-and-filter_not_exist" class="level1">
<h1><code>filter_exist()</code> and <code>filter_not_exist()</code></h1>
<p>Commonly we may wish to identify a set of patients from ADSL who satisfy (or do not satisfy) some condition. This condition can be relative to data found in ADSL or another ADaM dataset. For formal workflows, we would likely consider creating some sort of flag to encode this information, but for a more “quick and dirty” approach we can use <a href="https://pharmaverse.github.io/admiral/reference/filter_exist.html">filter_exist()</a> or <a href="https://pharmaverse.github.io/admiral/reference/filter_not_exist.html">filter_not_exist()</a>.</p>
<p>For instance, suppose we want to obtain demographic information for the patients who have suffered moderate or severe fatigue using the datasets created above. A simple application of <code>filter_exist()</code> suffices: firstly, we feed in <code>adsl</code> as the input dataset and <code>adae1</code> as the secondary dataset (inside which the filtering condition is applied). We make sure to specify <code>by_vars = USUBJID</code> to view the datasets patient-by-patient, and apply the condition on <code>dataset_add</code> (i.e.&nbsp;<code>adae1</code>) using the <code>filter_add</code> parameter.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter_exist</span>(</span>
<span id="cb3-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset =</span> adsl,</span>
<span id="cb3-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset_add =</span> adae1,</span>
<span id="cb3-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(USUBJID),</span>
<span id="cb3-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter_add =</span> AEDECOD <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FATIGUE"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> AESEV <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MODERATE"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SEVERE"</span>)</span>
<span id="cb3-6">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 3
  USUBJID       AGE SEX  
  &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;
1 01-701-1034    77 F    
2 01-701-1146    75 F    </code></pre>
</div>
</div>
<p>For the negation of this task, we can instead use <code>filter_not_exist()</code> with the same arguments:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter_not_exist</span>(</span>
<span id="cb5-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset =</span> adsl,</span>
<span id="cb5-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset_add =</span> adae1,</span>
<span id="cb5-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(USUBJID),</span>
<span id="cb5-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter_add =</span> AEDECOD <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FATIGUE"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> AESEV <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MODERATE"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SEVERE"</span>)</span>
<span id="cb5-6">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 3
  USUBJID       AGE SEX  
  &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;
1 01-701-1015    63 F    
2 01-701-1115    84 M    
3 01-701-1444    63 M    </code></pre>
</div>
</div>
<p>That’s it! <code>filter_exist()</code> and <code>filter_not_exist()</code> are as simple as they are useful.</p>
</section>
<section id="filter_extreme" class="level1">
<h1><code>filter_extreme()</code></h1>
<p>Another frequent task is to select the first or last observation within a by-group. Two possible examples where this may feature are a) selecting the most recent adverse event for a patient, or b) selecting the last dose for a patient.</p>
<p>We showcase below using <a href="https://pharmaverse.github.io/admiral/reference/filter_extreme.html">filter_extreme()</a> for the latter example. Using <code>ex</code> as defined above, we simply feed this into the function, specifying again to group the dataset by patient using <code>by_vars = exprs(USUBJID)</code> and order observations using the selection <code>order = exprs(EXSEQ)</code>. Finally, we indicate that we are interested in the last dose for each patient through the <code>mode = last</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter_extreme</span>(</span>
<span id="cb7-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset =</span> ex,</span>
<span id="cb7-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(USUBJID),</span>
<span id="cb7-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">order =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(EXSEQ),</span>
<span id="cb7-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"last"</span></span>
<span id="cb7-6">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 4
  USUBJID     EXSEQ EXDOSE EXTRT  
  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  
1 01-701-1015     3     54 XANO   
2 01-701-1034     2     54 XANO   
3 01-701-1115     3      0 PLACEBO
4 01-701-1146     3      0 PLACEBO
5 01-701-1444     2     54 XANO   </code></pre>
</div>
</div>
<p>To select the first dose instead, an equivalent call with <code>mode = first</code> would do the trick.</p>
<p>One final argument which can be useful as a fail-safe, but isn’t showcased in the example above, is <code>check_type</code>. This can be set to <code>"none"</code>, <code>"warning"</code> or <code>"error"</code> and will cause <code>filter_extreme()</code> to, respectively, do nothing, throw a warning, or throw an error if the observations of the input dataset are not unique with respect to the by variables and the order.</p>
<blockquote class="blockquote">
<p><em>Note</em> it is of course possible to achieve the same result using <code>{tidyverse}</code> tools:</p>
</blockquote>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">ex <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(USUBJID, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(EXSEQ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(USUBJID) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 4
  USUBJID     EXSEQ EXDOSE EXTRT  
  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  
1 01-701-1015     3     54 XANO   
2 01-701-1034     2     54 XANO   
3 01-701-1115     3      0 PLACEBO
4 01-701-1146     3      0 PLACEBO
5 01-701-1444     2     54 XANO   </code></pre>
</div>
</div>
<blockquote class="blockquote">
<p>but it requires a few more functions and the code is slightly less readable.</p>
</blockquote>
</section>
<section id="filter_relative" class="level1">
<h1><code>filter_relative()</code></h1>
<p>Other times we might find ourselves wanting to filter observations directly before or after the observation where a specified condition is fulfilled. Using <code>{tidyverse}</code> tools, this can quickly get quite involved. Enter <a href="https://pharmaverse.github.io/admiral/reference/filter_relative.html">filter_relative()</a>!</p>
<p>In the example below we showcase how <code>filter_relative()</code> extracts the AEs directly after the first occurrence of <code>AEDECOD == FATIGUE</code> in the above-generated <code>adae1</code>. As before, we pass the <code>dataset</code> and <code>by_vars</code> arguments, after which we specify to order the observations by <code>AESTDTC</code> using <code>order = exprs(AESTDTC)</code> and the condition using <code>condition = AEDECOD == "FATIGUE"</code>. Then, we specify we want records directly <em>after</em> the condition is satisfied using <code>selection = after</code> and that we do not want the reference observations (i.e.&nbsp;those that satisfy the <code>condition</code>) using <code>inclusive = FALSE</code>. Moreover, with <code>mode = "first"</code> we indicate that we want to use as reference the record where the condition is satisfied for the <em>first</em> time. Finally, we indicate that we do not want to keep the groups with no observations satisfying the <code>condition</code> with <code>keep_no_ref_groups = FALSE</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter_relative</span>(</span>
<span id="cb11-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset =</span> adae1,</span>
<span id="cb11-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(USUBJID),</span>
<span id="cb11-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">order =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(AESTDTC),</span>
<span id="cb11-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">condition =</span> AEDECOD <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FATIGUE"</span>,</span>
<span id="cb11-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">selection =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"after"</span>,</span>
<span id="cb11-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inclusive =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb11-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first"</span>,</span>
<span id="cb11-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">keep_no_ref_groups =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb11-10">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 4
  USUBJID     AEDECOD  AESEV    AESTDTC   
  &lt;chr&gt;       &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;     
1 01-701-1034 HEADACHE MILD     2014-12-01
2 01-701-1146 ANOSMIA  MODERATE 2013-08-11</code></pre>
</div>
</div>
<p>The arguments showcased above are flexible enough that we could modify our code accordingly for different scenarios. For instance, we could use <code>selection = before</code> to pick out any AEs directly before an occurrence of <code>AEDECOD = "FATIGUE"</code>, or we could use <code>mode = "last"</code> to use as reference the record where the condition is satisfied for the <em>last</em> time.</p>
</section>
<section id="filter_joined" class="level1">
<h1><code>filter_joined()</code></h1>
<p>The functions we have seen so far in this post have had relatively well-defined remits, and so a relatively contained set of arguments. <a href="https://pharmaverse.github.io/admiral/reference/filter_joined">filter_joined()</a>, however, breaks that mold: this function enables one to filter observations using a condition while taking other observations (possibly from a different dataset) into account. We present a simple example below.</p>
<p>Let’s try using <code>adae2</code> to extract the observations with a duration longer than 30 days (<code>ADURN &gt;= 30</code>) and on or after 7 days before a COVID AE <code>(ACOVFL == "Y")</code>. It is easier in this case to present the <code>filter_joined()</code> call and subsequently explain it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter_joined</span>(</span>
<span id="cb13-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset =</span> adae2,</span>
<span id="cb13-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset_add =</span> adae2,</span>
<span id="cb13-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(USUBJID),</span>
<span id="cb13-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">join_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(ACOVFL, ADY),</span>
<span id="cb13-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">join_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"all"</span>,</span>
<span id="cb13-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">order =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(ADY),</span>
<span id="cb13-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter_join =</span> ADURN <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> ACOVFL.join <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> ADY <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> ADY.join <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span>
<span id="cb13-9">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 4
  USUBJID       ADY ACOVFL ADURN
  &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt;
1 01-701-1015    21 N         50
2 01-701-1015    32 N         31</code></pre>
</div>
</div>
<p>Firstly, we note that <code>filter_join()</code> has been used because our condition is two-faceted. That is, to decide whether a certain record is of interest, we want (1) a duration of 30 days or more (this is information found within the record itself) <em>and</em> (2) proximity to a COVID AE (this is information gleaned from surrounding records - not the record itself). Because both conditions are relative to the <code>adae2</code> dataset, we have set <code>dataset = adae2</code> and <code>dataset_add = adae2</code>, i.e.&nbsp;we are joining <code>adae2</code> onto itself. Then, we view the dataset patient-by-patient with <code>by_vars = exprs(USUBJID)</code> and order observations by analysis day using <code>order = exprs(ADY)</code>.</p>
<p>All that is left is to specify our condition and how to select records relative to it. We start by noting that portion (1) of our condition uses the variable <code>ADURN</code> from the dataset specified in the <code>dataset</code> argument, and portion (2) requires <code>ACOVFL</code> and <code>ADY</code> from the secondary dataset specified in <code>dataset_add</code>. Consequently we need to specify <code>join_vars = exprs(ACOVFL, ADY)</code> to ensure we can use the latter variables in the <code>filter_join</code> argument. Then, for <code>filter_join</code>, we specify <code>filter_join = ADURN &gt; 30 &amp; ACOVFL.join == "Y" &amp; ADY &gt;= ADY.join - 7</code>, which translates to:</p>
<ul>
<li>Select records from <code>dataset</code> where <code>ADURN &gt; 30</code> (these satisfy (1));</li>
<li>Only keep those records if, after combining with <code>dataset_add</code>, we can find a record in <code>dataset_add</code> where <code>ACOVFL == "Y"</code> and <code>ADY</code> is within seven days of <code>ADY</code> from <code>dataset</code> (this will satisfy (2).</li>
</ul>
<p>In the <code>filter_join</code> argument, notice that <code>.join</code> syntax is used to refer to the variables come from <code>dataset_add</code>, and enables us to compare the same variable across observations (<code>ADY &gt;= ADY.join - 7</code>). Note finally that <code>join_type = "all"</code> allows the user to consider all observations in <code>dataset_add</code> when joining.</p>
<p>For a much more detailed exposition of <code>filter_join()</code>, with more examples, consider visiting its <a href="https://pharmaverse.github.io/admiral/reference/filter_joined.html">reference page</a> on the <code>{admiral}</code> website.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>While it is true that the <code>{tidyverse}</code> functions can, if applied correctly, achieve lots of the objectives outlined in this post, with <code>filter_*()</code> we can often do everything in one fell swoop, and feel all the more sleek! Hopefully this post has highlighted the plethora of possibilities at your fingertips gifted by <code>filter_*()</code>.</p>
<p>However, remember Uncle Ben’s maxim: <em>“with great power comes great responsibility”</em>. Although this was originally directed at a young Peter Parker, it is just as applicable to us ADaM programmers: always make sure to acquaint yourself with the documentation for the tool you are using - especially a behemoth like <code>filter_joined()</code> - to make sure your code does what you think it should do!</p>
<!--------------- appendices go here ----------------->
<div class="cell">
<div class="cell-output-display">


</div>
</div>


</section>

<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2024-04-08 12:11:08.052477</p>
</div></section><section id="details" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/pharmaverse/blog/tree/main/posts/2024-03-01_admiral_filter_functions/code_sections.qmd">source code</a>, <a href="https://github.com/pharmaverse/blog/tree/main/posts/2024-03-01_admiral_filter_functions/renv.lock">R environment</a></p>
</div></section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{mancini2024,
  author = {Mancini, Edoardo},
  title = {Filter Out the Noise!},
  date = {2024-02-26},
  url = {https://pharmaverse.github.io/blog/posts/2024-03-01_admiral_filter_functions/admiral_filter_functions.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-mancini2024" class="csl-entry quarto-appendix-citeas">
Mancini, Edoardo. 2024. <span>“Filter Out the Noise!”</span> February
26, 2024. <a href="https://pharmaverse.github.io/blog/posts/2024-03-01_admiral_filter_functions/admiral_filter_functions.html">https://pharmaverse.github.io/blog/posts/2024-03-01_admiral_filter_functions/admiral_filter_functions.html</a>.
</div></div></section></div> ]]></description>
  <category>admiral</category>
  <guid>https://pharmaverse.github.io/blog/posts/2024-03-01_admiral_filter_functions/admiral_filter_functions.html</guid>
  <pubDate>Mon, 26 Feb 2024 00:00:00 GMT</pubDate>
  <media:content url="https://pharmaverse.github.io/blog/posts/2024-03-01_admiral_filter_functions/filter_shirt.png" medium="image" type="image/png" height="164" width="144"/>
</item>
<item>
  <title>teal is now available on CRAN 🎉</title>
  <dc:creator>Dony Unardi</dc:creator>
  <link>https://pharmaverse.github.io/blog/posts/2024-02-13_teal_on_cran/teal_on_cran.html</link>
  <description><![CDATA[ 





<!--------------- typical setup ----------------->
<!--------------- post begins here ----------------->
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pharmaverse.github.io/blog/posts/2024-02-13_teal_on_cran/teal.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="220"></p>
</figure>
</div>
<p>We’re thrilled to announce that <code>teal</code> v0.15.0 has been released on CRAN!</p>
<p>This marks a significant milestone in our journey, and we’re incredibly excited about the possibilities <code>teal</code> brings to the R community, particularly within clinical trial settings.</p>
<p>One of the most notable changes in this release is the introduction of <code>teal_data</code> class. This addition enhances how data is handled within the <code>teal</code> framework, paving the way for custom data modules tailored to the needs of our R users, both inside and outside the clinical trial space. With <code>teal_data</code>, users can expect improved efficiency and flexibility in managing their data, opening doors to innovative approaches in data analysis and visualization.</p>
<p>While we’re enthusiastic about the advancements <code>teal</code> v0.15.0 brings, we have to introduce breaking changes to this version.</p>
<p>But worry not, we’ve got you covered!</p>
<p>To ease the transition, we’ve provided comprehensive guidance on migrating your applications from version 0.14.0 to 0.15.0. Check out our migration guide <a href="https://github.com/insightsengineering/teal/discussions/945">here</a>, and feel free to ask any questions you may have in the discussion thread.</p>
<p>As we roll out <code>teal</code> v0.15.0, we’re also working diligently on releasing <em>teal modules</em> packages to CRAN to fully support this version. While we’re still in the process, we encourage you to dive into the latest <code>teal</code> release and start exploring its capabilities. To get started, make sure to install the development versions of <code>teal.transform</code>, <code>teal.reporter</code>, and any other modules you’re using.</p>
<p>To simplify the process, you can execute the following code to verify that you have the correct <code>teal</code> and <em>teal modules</em> versions:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># installing latest stable release from CRAN</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"teal.logger"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"teal.code"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"teal.widgets"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"teal.data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"teal.slice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"teal"</span>))</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># installing dev version from pharmaverse</span></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"teal.reporter"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"teal.transform"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"teal.modules.general"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"teal.modules.clinical"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://pharmaverse.r-universe.dev"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getOption</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"repos"</span>)))</span></code></pre></div>
<p>Rest assured, we’re committed to completing the release of the <em>teal modules</em> as swiftly as possible to provide users with an uninterrupted experience.</p>
<p>As always, thank you for your continued support and enthusiasm for <code>teal</code>. We can’t wait to see the incredible ways in which <code>teal</code> empowers you to revolutionize your data exploration in R.</p>
<p>For further details about the release, please refer to <a href="https://github.com/insightsengineering/teal/releases/tag/v0.15.0">this link</a>.</p>
<p>Feel free to explore the <code>teal</code> website <a href="https://insightsengineering.github.io/teal/latest-tag/">here</a> to learn more about the latest features.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pharmaverse.github.io/blog/posts/2024-02-13_teal_on_cran/teal_screenshot.jpg" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<!--------------- appendices go here ----------------->
<div class="cell">
<div class="cell-output-display">


</div>
</div>



<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2024-04-08 12:11:19.209334</p>
</div></section><section id="details" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/pharmaverse/blog/tree/main/posts/2024-02-13_teal_on_cran/code_sections.qmd">source code</a>, <a href="https://github.com/pharmaverse/blog/tree/main/posts/2024-02-13_teal_on_cran/renv.lock">R environment</a></p>
</div></section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{unardi2024,
  author = {Unardi, Dony},
  title = {Teal Is Now Available on {CRAN} 🎉},
  date = {2024-02-14},
  url = {https://pharmaverse.github.io/blog/posts/2024-02-13_teal_on_cran/teal_on_cran.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-unardi2024" class="csl-entry quarto-appendix-citeas">
Unardi, Dony. 2024. <span>“Teal Is Now Available on CRAN 🎉.”</span>
February 14, 2024. <a href="https://pharmaverse.github.io/blog/posts/2024-02-13_teal_on_cran/teal_on_cran.html">https://pharmaverse.github.io/blog/posts/2024-02-13_teal_on_cran/teal_on_cran.html</a>.
</div></div></section></div> ]]></description>
  <category>community</category>
  <guid>https://pharmaverse.github.io/blog/posts/2024-02-13_teal_on_cran/teal_on_cran.html</guid>
  <pubDate>Wed, 14 Feb 2024 00:00:00 GMT</pubDate>
  <media:content url="https://pharmaverse.github.io/blog/posts/2024-02-13_teal_on_cran/teal.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Testing Containers and WebAssembly in Submissions to the FDA</title>
  <dc:creator>André Veríssimo</dc:creator>
  <dc:creator>Tymoteusz Makowski</dc:creator>
  <dc:creator>Pedro Silva</dc:creator>
  <dc:creator>Vedha Viyash</dc:creator>
  <dc:creator>APPSILON </dc:creator>
  <link>https://pharmaverse.github.io/blog/posts/2024-02-01_containers_webassembly_submission/containers_and_webassembly_submissions.html</link>
  <description><![CDATA[ 





<!--------------- typical setup ----------------->
<!--------------- post begins here ----------------->
<p><a href="https://www.r-consortium.org/">The R Consortium Submission Working Group</a> has now successfully made two pilot submissions to the FDA. All the submissions done by the group are focused on improving practices for R-based clinical trial regulatory submissions. Now, the R submission Working Groups, in collaboration with <a href="https://appsilon.com/">Appsilon</a> and Posit, are exploring new technologies such as Containers and WebAssembly. In this article, we dive into the details of this exploration.</p>
<section id="how-everything-started" class="level2">
<h2 class="anchored" data-anchor-id="how-everything-started">How Everything Started</h2>
<section id="pilot-1" class="level3">
<h3 class="anchored" data-anchor-id="pilot-1">Pilot 1</h3>
<p>This pilot was initially submitted on November 22, 2021. <strong>This submission was the first publicly available R-based submission to the FDA.</strong> This was a test <a href="https://github.com/RConsortium/submissions-pilot1-to-fda">submission</a> that aimed to explore the submission of an R package to the FDA following the eCTD specifications. The submission included an R package, R scripts for analysis, R-based analysis data reviewed guide (ADRG), and other important components. The final <a href="https://github.com/RConsortium/submissions-wg/blob/main/_Documents/Summary_R_Pilot_Submission2.pdf">response letter from the FDA</a> was received on March 14, 2022.</p>
</section>
</section>
<section id="pilot-2" class="level2">
<h2 class="anchored" data-anchor-id="pilot-2">Pilot 2</h2>
<p><strong>This was one of the first submission packages containing a Shiny application</strong>. The main goal of this pilot was to test the submission of an R-based Shiny application bundled into a submission package and transfer it successfully to FDA reviewers. The <a href="https://github.com/RConsortium/submissions-pilot2-to-fda">submitted application</a> was built using the datasets and analyses that were used for the R Submission Pilot 1. The deployed version of this application is available on <a href="https://rconsortium.shinyapps.io/submissions-pilot2/">this site</a>. Alternatively, a Rhino-based version of the application can be found <a href="https://connect.appsilon.com/rhino-fda-pilot/">here</a>.</p>
<p>The final response letter from the FDA was reviewed on September 27, 2023.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pharmaverse.github.io/blog/posts/2024-02-01_containers_webassembly_submission/images/teal.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="159"></p>
</figure>
</div>
<p>In this submission, there were many open-source R packages that were used to create and execute the Shiny application. A very well-known shiny-based interactive exploration framework <strong>{teal}</strong> was used mainly for analyzing the clinical trial data; this package is included in the pharmaverse package repository. The full list of open-source and proprietary R analysis packages is available on this <a href="https://rsubmission-draft.website-us-east-1.linodeobjects.com/">Analysis Data Reviewer’s Guide</a> prepared by the R Consortium R Submissions Working Group for the Pilot 2.</p>
</section>
<section id="whats-next" class="level1">
<h1>What’s next?</h1>
<section id="pilot-3" class="level2">
<h2 class="anchored" data-anchor-id="pilot-3">Pilot 3</h2>
<p>This pilot was successfully submitted to the FDA on Aug 28, 2023. <strong>This was the first publicly available R <a href="https://github.com/RConsortium/submissions-pilot3-adam-to-fda">submission</a> that included R scripts to produce ADaM datasets and TLFs</strong>. Both the ADaMs (SDTM .xpt sources from the CDISC Pilot study) and the TLFs (ADaMs .xpt sourced from the ADaMs generated in R by the Pilot 3 team) were created using R.&nbsp; The next step for this pilot is to await FDA’s review and approval, which may take several months to complete.</p>
</section>
<section id="pilot-4" class="level2">
<h2 class="anchored" data-anchor-id="pilot-4">Pilot 4</h2>
<p>This pilot aims to <strong>explore using technologies such as containers and WebAssembly</strong> software to package a Shiny application into a self-contained unit, streamlining the transfer and execution process for enhanced efficiency.</p>
<p>This pilot is expected to be divided into two parallel submissions:</p>
<p>(a) <a href="https://github.com/RConsortium/submissions-pilot4-webR">will investigate WebAssembly</a> and</p>
<p>(b) <a href="http://github.com/Appsilon/experimental-fda-submission-4-podman/">will investigate containers</a>.</p>
<section id="the-journey-with-webassembly-and-containers" class="level3">
<h3 class="anchored" data-anchor-id="the-journey-with-webassembly-and-containers">The Journey with WebAssembly and Containers</h3>
<p>Our team at Appsilon teamed up with the dynamic Pilot 4 crew to explore WebAssembly technology and containers. George Stagg and Winston Chang also joined the working group to discuss the web-assembly portion of Pilot 4. This partnership brought together our engineering prowess to contribute to these tools, injecting fresh perspectives into the ongoing pilot project.</p>
<p>Some of the outcomes of the collaboration:</p>
<ol type="1">
<li><p>We were able to set up a robust container environment for this pilot project.&nbsp;</p></li>
<li><p>We aided the progress made on the use of both experimental technologies: containers and WebAssembly.</p></li>
<li><p>We developed a working prototype submission using <a href="https://podman.io/">Podman</a> container technology.</p></li>
<li><p>We developed a working early-stage prototype for wrapping a small Shiny application using WebAssembly.</p></li>
</ol>
<section id="webassembly" class="level4">
<h4 class="anchored" data-anchor-id="webassembly">WebAssembly</h4>
<p><img src="https://pharmaverse.github.io/blog/posts/2024-02-01_containers_webassembly_submission/images/webr.png" class="img-fluid" width="231"></p>
<p>WebAssembly allows languages like R to be executed at near-native speed directly within web browsers, providing users with the ability to run R code without having R installed locally. <a href="https://docs.r-wasm.org/webr/v0.2.0/"><strong>WebR</strong></a> is essentially the R programming language adapted to run in a web browser environment using WebAssembly. This project is under active development.&nbsp;</p>
</section>
</section>
<section id="the-pilot-4-shiny-app-up-and-running-on-webr" class="level3">
<h3 class="anchored" data-anchor-id="the-pilot-4-shiny-app-up-and-running-on-webr">The Pilot 4 Shiny App Up and Running on webR!</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pharmaverse.github.io/blog/posts/2024-02-01_containers_webassembly_submission/images/rconsortiumxappsilon.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>The deployed example of the Shiny app running on webR <a href="https://brilliant-elf-2da930.netlify.app/">is available here</a>. Check out the video of the application running below.</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/wfk_IJ82e9E" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>During this pilot, engineers at Appsilon developed a prototype of a Shiny application running on webR. The application reuses most of the code from the previous pilot apps with some tweaks and a couple of hacks/changes to get around non CRAN dependencies, specially for data loading, WebR compatibilities, and shimming some of the functionality from {teal} and other packages that are (for now) not available on CRAN.</p>
<section id="webr-shiny-app" class="level4">
<h4 class="anchored" data-anchor-id="webr-shiny-app">webR Shiny App</h4>
<p>During the <strong>second iteration</strong>, which was recently held, Pedro Silva shared the process of developing this Shiny app running on webR.</p>
</section>
<section id="the-process" class="level4">
<h4 class="anchored" data-anchor-id="the-process">The Process</h4>
<ol type="1">
<li><p><strong>Leverage the last 2 iterations of the application</strong></p>
<ul>
<li><p>Reuse as much code as possible</p></li>
<li><p>Avoid touching the logic part</p></li>
</ul></li>
<li><p><strong>Restrict the number of dependencies to packages on CRAN</strong></p>
<ul>
<li>Replace/shim functionality that was lost from removing dependencies</li>
</ul></li>
</ol>
<p>Here is the list of dependencies to packages on CRAN; those that worked are colored green, and those that were removed are marked in orange. We ended up with just 3 problematic dependencies (bold).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pharmaverse.github.io/blog/posts/2024-02-01_containers_webassembly_submission/images/dependencies.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>Issues with library(cowplot):</p>
<ul>
<li>Some issues with low-level dependencies when deployed</li>
</ul>
<p>Solution:</p>
<ul>
<li>Replace functionality with HTML</li>
</ul>
<p>Issues with library(teal):</p>
<ul>
<li>Uses {shiny.widgets} (not working for webR)</li>
</ul>
<p>Solution:</p>
<ul>
<li><p>Redo the UI</p></li>
<li><p>Load modules directly</p></li>
<li><p>Recreate filter functionality</p></li>
</ul>
<p>Issues with library(teal.data):</p>
<ul>
<li>Use rds exports</li>
</ul>
<p>Solution:</p>
<ul>
<li>Shim functionality, load data directly</li>
</ul>
<ol start="3" type="1">
<li><p><strong>Leverage shinylive and httpuv to export and serve the application</strong></p>
<ol type="a">
<li><p>Shinylive can help streamline the export process</p>
<ol type="i">
<li><p>Problems</p>
<ol type="1">
<li><p>shiny.live won’t let us have non-R files in the application directory - this is an outstanding bug that George asked us to raise an issue for.</p></li>
<li><p>We wouldn’t be able to run the application as a traditional shiny app.</p></li>
</ol></li>
<li><p>Solution:</p>
<ol type="1">
<li>Custom build script</li>
</ol></li>
</ol></li>
<li><p>{httpuv} can help serve the application</p>
<ol type="i">
<li>{httpuv} would run natively on a machine to serve the Shiny app</li>
</ol></li>
</ol></li>
</ol>
</section>
<section id="application-structure" class="level4">
<h4 class="anchored" data-anchor-id="application-structure">Application Structure</h4>
<p>The figure below shows an overview of what we ended with:</p>
<p><img src="https://pharmaverse.github.io/blog/posts/2024-02-01_containers_webassembly_submission/images/application-structure.png" class="img-fluid"></p>
<p>Some of the issues and solutions found at the very beginning:</p>
<ol type="1">
<li>The previous applications were built using golem and another one in Rhino; the support for these frameworks is not great in webR up to now.
<ol type="a">
<li>Solution
<ol type="i">
<li>{box} works out of the box (reuse the rhino version modules)</li>
<li>Simplify the structure and use a simple shiny modular structure</li>
</ol></li>
</ol></li>
<li>Shinylive does not like non-R files when generating the bundle
<ol type="a">
<li>Solution
<ol type="i">
<li>Keep the app folder as clean as possible for now (www folder only)</li>
</ol></li>
</ol></li>
<li>{teal} and {teal.data} are not on CRAN
<ol type="a">
<li>Solution
<ol type="i">
<li>Shim and used functionality</li>
<li>Use a simple tab system for the UI structure</li>
</ol></li>
</ol></li>
</ol>
<p>The FDA was previously told that the shiny application being prepared for the Pilot 4 submission would not be a 1 to 1 mapping from the previous one submitted for the Pilot 2 due to certain constraints such as {teal} not being on CRAN; however, this didn’t represent a problem for them since they would mainly like to test the technology.</p>
<p>Pedro Silva, one of the engineers working on the development of this app, mentioned <strong>“While WebR is still in development, it shows tremendous promise! The loading is definitely still a pain point (over 100mb to set up the environment!) but it will only get better moving forward.”</strong></p>
</section>
<section id="containers" class="level4">
<h4 class="anchored" data-anchor-id="containers">Containers</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pharmaverse.github.io/blog/posts/2024-02-01_containers_webassembly_submission/images/podman-docker-singularity.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>Containerization, particularly through technologies like <a href="https://appsilon.com/docker-vs-podman-vs-singularity/amp/">Docker, Podman or Singularity</a>, offers several advantages for deploying Shiny apps.</p>
<section id="choosing-the-right-container" class="level5">
<h5 class="anchored" data-anchor-id="choosing-the-right-container">Choosing the Right Container</h5>
<p>Choosing the right container was a question that arose in this project. Although <strong>Docker</strong> is the most popular, we decided to move forward with <strong>Podman</strong>.&nbsp;</p>
<p>In our exploration of containerization tools for deploying Shiny applications, we’ve identified key distinctions between Docker and Podman that influenced our choice.&nbsp;</p>
<p><strong>Podman</strong> stands out for its daemonless architecture, enhancing security by eliminating the need for a central daemon process. Unlike Docker, Podman supports running containers as non-root users, a critical feature for meeting FDA reviewer requirements. Developed by Red Hat and maintained as an open-source project, Podman prioritizes security with its rootless container support, offering a robust solution for security-conscious users.&nbsp;</p>
</section>
<section id="goals" class="level5">
<h5 class="anchored" data-anchor-id="goals">Goals</h5>
<p>A Container-based method to deploy Pilot 2 Shiny App.</p>
</section>
<section id="what-we-did" class="level5">
<h5 class="anchored" data-anchor-id="what-we-did">What we did</h5>
<ol type="1">
<li><p>Configurable Podman Dockerfile / docker-compose.yml</p>
<ol type="a">
<li>R version</li>
<li>Registry / organization name / image name (differences between docker.io and ghcr.io)</li>
</ol></li>
<li><p>Documentation on creating the container</p></li>
<li><p>CI: Automated build on amd64 and arm64 platforms</p></li>
</ol>
</section>
<section id="podman-short-demo" class="level5">
<h5 class="anchored" data-anchor-id="podman-short-demo">Podman short-demo</h5>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/H2WnpvVgmyE" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>Below is the dockerfile (recipe) for the container:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pharmaverse.github.io/blog/posts/2024-02-01_containers_webassembly_submission/images/file-recipe.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
</section>
</section>
</section>
</section>
<section id="next-steps" class="level1">
<h1>Next Steps</h1>
<p>The next steps are waiting for the review of Pilot 3 by the FDA and to submit the two sections that explore the new technologies to regulatory authorities. Thanks to the collaboration between the R Submission Working Group and other institutions, there is already a working prototype of a {teal}-like Shiny application running on webR and further exploration with Podman is underway.&nbsp;</p>
<ol type="1">
<li>Submission to FDA</li>
<li>Rhino Compatibility</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pharmaverse.github.io/blog/posts/2024-02-01_containers_webassembly_submission/images/rhino.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="161"></p>
</figure>
</div>
<p>Appsilon is working on the side with Rhino compatibility; eventually, we might be able to just add this framework into the Pilot 4 application.</p>
<ol start="3" type="1">
<li><p>{teal}</p>
<p>This and other packages might be on CRAN soon. We could incorporate them after that, replacing the shims created for this version.</p></li>
<li><p>Boot Time</p>
<p>We need to improve boot time (remove dependencies and keep working on webR).</p></li>
</ol>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{veríssimo2024,
  author = {Veríssimo, André and Makowski, Tymoteusz and Silva, Pedro
    and Viyash, Vedha and , APPSILON},
  title = {Testing {Containers} and {WebAssembly} in {Submissions} to
    the {FDA}},
  date = {2024-02-01},
  url = {https://pharmaverse.github.io/blog/posts/2024-02-01_containers_webassembly_submission/containers_and_webassembly_submissions.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-veríssimo2024" class="csl-entry quarto-appendix-citeas">
Veríssimo, André, Tymoteusz Makowski, Pedro Silva, Vedha Viyash, and
APPSILON. 2024. <span>“Testing Containers and WebAssembly in Submissions
to the FDA.”</span> February 1, 2024. <a href="https://pharmaverse.github.io/blog/posts/2024-02-01_containers_webassembly_submission/containers_and_webassembly_submissions.html">https://pharmaverse.github.io/blog/posts/2024-02-01_containers_webassembly_submission/containers_and_webassembly_submissions.html</a>.
</div></div></section></div> ]]></description>
  <category>submission</category>
  <category>community</category>
  <guid>https://pharmaverse.github.io/blog/posts/2024-02-01_containers_webassembly_submission/containers_and_webassembly_submissions.html</guid>
  <pubDate>Thu, 01 Feb 2024 00:00:00 GMT</pubDate>
  <media:content url="https://pharmaverse.github.io/blog/posts/2024-02-01_containers_webassembly_submission/FDA_WebR_Rhino.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>PK Examples</title>
  <dc:creator>Jeff Dickinson</dc:creator>
  <link>https://pharmaverse.github.io/blog/posts/2023-12-20_p_k__examples/p_k__examples.html</link>
  <description><![CDATA[ 





<!--------------- typical setup ----------------->
<!--------------- post begins here ----------------->
<section id="pharmaverse-pk-examples" class="level1">
<h1>Pharmaverse PK Examples</h1>
<p>A new <a href="https://pharmaverse.github.io/examples" target="_blank">pharmaverse examples website</a> has some exciting new features to explore.</p>
<p>One of these is the ability to launch Posit Cloud to explore the example code and make your own modifications. This interactive Posit Cloud environment is preconfigured with all required package installations. Click here: <a href="https://posit.cloud/content/7279124" target="_blank">Launch Posit Cloud</a> to explore the examples code.</p>
<p>This sample code here is based on the Population PK Analysis Data (ADPPK) model which follows the recently released <a href="https://www.cdisc.org/standards/foundational/adam/basic-data-structure-adam-poppk-implementation-guide-v1-0" target="_blank">CDISC Implementation Guide</a>.</p>
<p>Population PK models generally make use of nonlinear mixed effects models that require numeric variables. The data used in the models will include both dosing and concentration records, relative time variables, and numeric covariate variables. For more details see the <code>{admiral}</code> <a href="https://pharmaverse.github.io/admiral/articles/pk_adnca.html" target="_blank">vignette</a>.</p>
<section id="first-load-packages" class="level2">
<h2 class="anchored" data-anchor-id="first-load-packages">First Load Packages</h2>
<p>First we will load the packages required for our project. We will use <code>{admiral}</code> for the creation of analysis data. <code>{admiral}</code> requires <code>{dplyr}</code>, <code>{lubridate}</code> and <code>{stringr}</code>. We will use <code>{metacore}</code> and <code>{metatools}</code> to store and manipulate metadata from our specifications. We will use <code>{xportr}</code> to perform checks on the final data and export to a transport file.</p>
<p>The source SDTM data will come from the CDISC pilot study data stored in <code>{pharmaversesdtm}</code> and the ADaM ADSL data will come from <code>{pharmaverseadam}</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load Packages</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(admiral)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(metacore)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(metatools)</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(xportr)</span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readr)</span>
<span id="cb1-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(pharmaversesdtm)</span>
<span id="cb1-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(pharmaverseadam)</span></code></pre></div>
</div>
</section>
<section id="next-load-specifications-for-metacore" class="level2">
<h2 class="anchored" data-anchor-id="next-load-specifications-for-metacore">Next Load Specifications for Metacore</h2>
<p>We have saved our specifications in an Excel file and will load them into <code>{metacore}</code> with the <code>metacore::spec_to_metacore()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ---- Load Specs for Metacore ----</span></span>
<span id="cb2-2">metacore <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spec_to_metacore</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk_spec.xlsx"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select_dataset</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ADPPK"</span>)</span></code></pre></div>
</div>
</section>
<section id="load-source-datasets" class="level2">
<h2 class="anchored" data-anchor-id="load-source-datasets">Load Source Datasets</h2>
<p>We will load our SDTM data from <code>{pharmaversesdtm}</code>. The main components of the Population PK will be exposure data from <code>EX</code> and pharmacokinetic concentration data from <code>PC</code>. Here we will use <code>ADSL</code> from <code>{pharmaverseadam}</code> for baseline characteristics and we will derive additional baselines from vital signs <code>VS</code> and laboratory data <code>LB</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ---- Load source datasets ----</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load PC, EX, VS, LB and ADSL</span></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pc"</span>)</span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ex"</span>)</span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vs"</span>)</span>
<span id="cb3-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lb"</span>)</span>
<span id="cb3-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"adsl"</span>)</span>
<span id="cb3-8"></span>
<span id="cb3-9">ex <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">convert_blanks_to_na</span>(ex)</span>
<span id="cb3-10">pc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">convert_blanks_to_na</span>(pc)</span>
<span id="cb3-11">vs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">convert_blanks_to_na</span>(vs)</span>
<span id="cb3-12">lb <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">convert_blanks_to_na</span>(lb)</span></code></pre></div>
</div>
</section>
<section id="derive-covariates-using-metatools" class="level2">
<h2 class="anchored" data-anchor-id="derive-covariates-using-metatools">Derive Covariates Using <code>{metatools}</code></h2>
<p>In this step we will create our numeric covariates using the <code>metatools::create_var_from_codelist()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#---- Derive Covariates ----</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Include numeric values for STUDYIDN, USUBJIDN, SEXN, RACEN etc.</span></span>
<span id="cb4-3"></span>
<span id="cb4-4">covar <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> adsl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_var_from_codelist</span>(metacore, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input_var =</span> STUDYID, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">out_var =</span> STUDYIDN) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_var_from_codelist</span>(metacore, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input_var =</span> SEX, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">out_var =</span> SEXN) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_var_from_codelist</span>(metacore, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input_var =</span> RACE, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">out_var =</span> RACEN) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_var_from_codelist</span>(metacore, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input_var =</span> ETHNIC, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">out_var =</span> AETHNIC) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_var_from_codelist</span>(metacore, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input_var =</span> AETHNIC, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">out_var =</span> AETHNICN) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_var_from_codelist</span>(metacore, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input_var =</span> ARMCD, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">out_var =</span> COHORT) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_var_from_codelist</span>(metacore, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input_var =</span> ARMCD, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">out_var =</span> COHORTC) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_var_from_codelist</span>(metacore, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input_var =</span> COUNTRY, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">out_var =</span> COUNTRYN) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_var_from_codelist</span>(metacore, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input_var =</span> COUNTRY, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">out_var =</span> COUNTRYL) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb4-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">STUDYIDN =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">word</span>(USUBJID, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fixed</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>))),</span>
<span id="cb4-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">SITEIDN =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">word</span>(USUBJID, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fixed</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>))),</span>
<span id="cb4-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">USUBJIDN =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">word</span>(USUBJID, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fixed</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>))),</span>
<span id="cb4-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">SUBJIDN =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(SUBJID),</span>
<span id="cb4-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ROUTE =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(ex<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>EXROUTE),</span>
<span id="cb4-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FORM =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(ex<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>EXDOSFRM),</span>
<span id="cb4-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">REGION1 =</span> COUNTRY,</span>
<span id="cb4-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">REGION1N =</span> COUNTRYN,</span>
<span id="cb4-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">SUBJTYPC =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Volunteer"</span>,</span>
<span id="cb4-24">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_var_from_codelist</span>(metacore, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input_var =</span> FORM, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">out_var =</span> FORMN) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-26">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_var_from_codelist</span>(metacore, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input_var =</span> ROUTE, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">out_var =</span> ROUTEN) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_var_from_codelist</span>(metacore, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input_var =</span> SUBJTYPC, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">out_var =</span> SUBJTYP)</span></code></pre></div>
</div>
<section id="derive-additional-baselines" class="level3">
<h3 class="anchored" data-anchor-id="derive-additional-baselines">Derive Additional Baselines</h3>
<p>Next we add additional baselines from vital signs and laboratory data. Several common variables are computed using some of the built in functions in <code>{admiral}</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">labsbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> lb <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(LBBLFL <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> LBTESTCD <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CREAT"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ALT"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AST"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BILI"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">LBTESTCDB =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(LBTESTCD, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BL"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(STUDYID, USUBJID, LBTESTCDB, LBSTRESN)</span>
<span id="cb5-5"></span>
<span id="cb5-6">covar_vslb <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> covar <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">derive_vars_merged</span>(</span>
<span id="cb5-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset_add =</span> vs,</span>
<span id="cb5-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter_add =</span> VSTESTCD <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HEIGHT"</span>,</span>
<span id="cb5-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(STUDYID, USUBJID),</span>
<span id="cb5-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">HTBL =</span> VSSTRESN)</span>
<span id="cb5-12">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">derive_vars_merged</span>(</span>
<span id="cb5-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset_add =</span> vs,</span>
<span id="cb5-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter_add =</span> VSTESTCD <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WEIGHT"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> VSBLFL <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span>,</span>
<span id="cb5-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(STUDYID, USUBJID),</span>
<span id="cb5-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">WTBL =</span> VSSTRESN)</span>
<span id="cb5-18">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">derive_vars_transposed</span>(</span>
<span id="cb5-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset_merge =</span> labsbl,</span>
<span id="cb5-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(STUDYID, USUBJID),</span>
<span id="cb5-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">key_var =</span> LBTESTCDB,</span>
<span id="cb5-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value_var =</span> LBSTRESN</span>
<span id="cb5-24">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb5-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">BMIBL =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compute_bmi</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> HTBL, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weight =</span> WTBL),</span>
<span id="cb5-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">BSABL =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compute_bsa</span>(</span>
<span id="cb5-28">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> HTBL,</span>
<span id="cb5-29">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weight =</span> HTBL,</span>
<span id="cb5-30">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mosteller"</span></span>
<span id="cb5-31">    ),</span>
<span id="cb5-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">CRCLBL =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compute_egfr</span>(</span>
<span id="cb5-33">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">creat =</span> CREATBL, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">creatu =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SI"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> AGE, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weight =</span> WTBL, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sex =</span> SEX,</span>
<span id="cb5-34">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CRCL"</span></span>
<span id="cb5-35">    ),</span>
<span id="cb5-36">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">EGFRBL =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compute_egfr</span>(</span>
<span id="cb5-37">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">creat =</span> CREATBL, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">creatu =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SI"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> AGE, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weight =</span> WTBL, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sex =</span> SEX,</span>
<span id="cb5-38">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CKD-EPI"</span></span>
<span id="cb5-39">    )</span>
<span id="cb5-40">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-41">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">TBILBL =</span> BILIBL)</span></code></pre></div>
</div>
<p>This covariate section of the code will be combined with the dosing and observation records from <code>EX</code> and <code>PC</code>.</p>
<p>The rest of the code can be seen on the <a href="https://pharmaverse.github.io/examples" target="_blank">pharmaverse examples website</a> or in the <a href="https://posit.cloud/content/7279124" target="_blank">Posit Cloud environment</a>.</p>
<p>Happy exploring!</p>
<!--------------- appendices go here ----------------->
</section>
</section>
<div class="cell">
<div class="cell-output-display">


</div>
</div>


</section>

<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2024-04-08 12:11:01.046122</p>
</div></section><section id="details" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-12-20_p_k__examples/code_sections.qmd">source code</a>, <a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-12-20_p_k__examples/renv.lock">R environment</a></p>
</div></section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{dickinson2024,
  author = {Dickinson, Jeff},
  title = {PK {Examples}},
  date = {2024-01-26},
  url = {https://pharmaverse.github.io/blog/posts/2023-12-20_p_k__examples/p_k__examples.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-dickinson2024" class="csl-entry quarto-appendix-citeas">
Dickinson, Jeff. 2024. <span>“PK Examples.”</span> January 26, 2024. <a href="https://pharmaverse.github.io/blog/posts/2023-12-20_p_k__examples/p_k__examples.html">https://pharmaverse.github.io/blog/posts/2023-12-20_p_k__examples/p_k__examples.html</a>.
</div></div></section></div> ]]></description>
  <category>community</category>
  <category>admiral</category>
  <category>metacore</category>
  <category>metatools</category>
  <category>xportr</category>
  <guid>https://pharmaverse.github.io/blog/posts/2023-12-20_p_k__examples/p_k__examples.html</guid>
  <pubDate>Fri, 26 Jan 2024 00:00:00 GMT</pubDate>
  <media:content url="https://pharmaverse.github.io/blog/posts/2023-12-20_p_k__examples/pharmaverse.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>End of Year Update from the Pharmaverse Council</title>
  <dc:creator>Mike Stackhouse</dc:creator>
  <link>https://pharmaverse.github.io/blog/posts/2024-01-04_end_of__year__up.../end_of__year__update_from_the__pharmaverse__council.html</link>
  <description><![CDATA[ 





<!--------------- typical setup ----------------->
<!--------------- post begins here ----------------->
<section id="was-a-big-year" class="level2">
<h2 class="anchored" data-anchor-id="was-a-big-year">2023 Was a Big Year</h2>
<p>This was a big year for open-source work in clinical submissions in general. We saw Roche speak about shifting to an <a href="https://www.youtube.com/watch?v=nqJsLSLd39A">open-source backbone for clinical trials</a>. Novo Nordisk spoke publicly of an <a href="https://www.youtube.com/watch?v=t33dS17QHuA">R based submission to the FDA</a>. These are true marks of progress being made in R becoming a first class language for clinical reporting.</p>
<p>Back in August, Nicholas Eugenio released a <a href="https://pharmaverse.github.io/blog/posts/2023-10-10_pharmaverse_story/pharmaverse_story.html">blog post</a> on the history of pharmaverse. It’s funny to think about the fact that only 3 years ago, the idea of cross organization collaboration on R packages and building a community around this in the clinical world was just a conversation between friends. Since then, we have a community of more than 1200 people on Slack, 350 on LinkedIn, interest from over 150 organizations, and over 30 packages. If 2020 through 2022 was the birth of Pharmaverse, 2023 was finding our identity as a community. For the council, 2024 will be about continuing to mature and find more ways that we can continue to support the community.</p>
</section>
<section id="what-we-accomplished" class="level2">
<h2 class="anchored" data-anchor-id="what-we-accomplished">What We Accomplished</h2>
<p>One of our biggest moves in 2023 was to form our partnership with <a href="https://phuse.global/PHUSE_Open_Source_Technology">PHUSE</a>. This latched us into an existing community with shared values and a platform that helps us continue to build the pharmaverse community. At the <a href="https://www.phuse-events.org/attend/frontend/reg/thome.csp?pageID=11403&amp;eventID=19&amp;traceRedir=2">PHUSE EU Connect</a> we had our first opportunity to host a pharmaverse meetup and bring together pharmaverse contributors in person. Additionally, there was an excellent panel session highlighting our use and adoption of open-source across industry, including the pharmaceutical, commercial, and software perspectives. As we move forward, we’ll continue to use this platform to find ways we can host events and encourage collaboration within the pharmaverse community.</p>
<p>This year our community was also able to launch new platforms to share updates and knowledge throughout the industry. The <a href="https://pharmaverse.github.io/examples/">pharmaverse examples</a> webpage was launched to show pharmaverse packages in action, and the <a href="https://pharmaverse.github.io/blog/">pharmaverse blog</a> (which I’m using right here!) provides a platform to share updates and community news.</p>
</section>
<section id="where-next" class="level2">
<h2 class="anchored" data-anchor-id="where-next">Where Next?</h2>
<p>Back in October, I had the opportunity to do an interview with Michael Rimler for the <a href="https://youtu.be/F3vehIoJgdA?si=80p0pKobZqjlXChj">PHUSE video series</a> Open Source Technologies in Clinical Data Analytics. The last question he asked me was what I expect the state of data analytics in life science to be in 2 to 3 years. My response was that when that time comes, I hope I couldn’t have predicted where we would be - because back in 2020 I could never have predicted where we are now. The progress we’ve made is unbelievable, and the pharmaverse community has played a huge role in getting us where we are today. For the pharmaverse community, I hope to see that progress continue as we move into next year. As a council, our goal is to continue to mature this community. How can we support and foster collaboration between our organizations? How can we leverage this platform to drive the industry forward?</p>
<p>For you as an individual, there’s always an opportunity to get involved - and you don’t have to be a package developer to contribute. You can <a href="https://pharmaverse.org/contribute/wg/">join a working group</a>, write <a href="https://github.com/pharmaverse/examples">examples</a>, or author a <a href="https://github.com/pharmaverse/blog">blog post</a>. Furthermore, you can get started with the pharmaverse packages, provide feedback via issues, and advocate for their use within your own organization. The pharmaverse community doesn’t exist without you, and we’re happy to have you all here to help us build this together.</p>
</section>
<section id="p.s." class="level2">
<h2 class="anchored" data-anchor-id="p.s.">P.S.</h2>
<p>At PHUSE US Connect 2024 this coming February, be on the lookout for one of the keynote presentations from Michael Rimler and Ross Farrugia! We hope to see you there!</p>
<p>Here’s to a 2024 full of progress and collaboration!</p>
<!--------------- appendices go here ----------------->
</section>
<div class="cell">
<div class="cell-output-display">


</div>
</div>



<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2024-04-08 12:11:17.833357</p>
</div></section><section id="details" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/pharmaverse/blog/tree/main/posts/2024-01-04_end_of__year__up.../code_sections.qmd">source code</a>, <a href="https://github.com/pharmaverse/blog/tree/main/posts/2024-01-04_end_of__year__up.../renv.lock">R environment</a></p>
</div></section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{stackhouse2024,
  author = {Stackhouse, Mike},
  title = {End of {Year} {Update} from the {Pharmaverse} {Council}},
  date = {2024-01-04},
  url = {https://pharmaverse.github.io/blog/posts/2024-01-04_end_of__year__up.../end_of__year__update_from_the__pharmaverse__council.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-stackhouse2024" class="csl-entry quarto-appendix-citeas">
Stackhouse, Mike. 2024. <span>“End of Year Update from the Pharmaverse
Council.”</span> January 4, 2024. <a href="https://pharmaverse.github.io/blog/posts/2024-01-04_end_of__year__up.../end_of__year__update_from_the__pharmaverse__council.html">https://pharmaverse.github.io/blog/posts/2024-01-04_end_of__year__up.../end_of__year__update_from_the__pharmaverse__council.html</a>.
</div></div></section></div> ]]></description>
  <category>community</category>
  <guid>https://pharmaverse.github.io/blog/posts/2024-01-04_end_of__year__up.../end_of__year__update_from_the__pharmaverse__council.html</guid>
  <pubDate>Thu, 04 Jan 2024 00:00:00 GMT</pubDate>
  <media:content url="https://pharmaverse.github.io/blog/posts/2024-01-04_end_of__year__up.../pharmaverse.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>admiral 1.0.0</title>
  <dc:creator>Ben Straub</dc:creator>
  <link>https://pharmaverse.github.io/blog/posts/2023-12-18_admiral_1_0/admiral_1_0.html</link>
  <description><![CDATA[ 





<!--------------- typical setup ----------------->
<!--------------- post begins here ----------------->
<p><a href="https://pharmaverse.github.io/admiral/index.html"><code>admiral 1.0.0</code></a> is out on <a href="https://cran.r-project.org/web/packages/admiral/index.html">CRAN</a>. This release brings several new features to your tool set for working with ADaMs in R. <a href="https://pharmaverse.github.io/admiral/index.html"><code>admiral 1.0.0</code></a> also brings needed stability to users who were wishing to adopt <a href="https://pharmaverse.github.io/admiral/index.html">admiral</a>, but were a little worried by the fast deprecation and experimentation for <code>pre-v1.0.0</code> releases.</p>
<p>This blog post will discuss our commitment to stability, walk you through the new features available, discuss some of the bug fixes, a push for common APIs across our functions, and showcase the resources available to help you on-board to <a href="https://pharmaverse.github.io/admiral/index.html">admiral</a>.</p>
<section id="commitment-to-stability" class="level1">
<h1>Commitment to Stability</h1>
<p><code>{admiral}</code> was born out of a conversation between Thomas Neitmann and Michael Rimler almost three years ago. Check out this <a href="https://pharmaverse.github.io/blog/posts/2023-10-10_pharmaverse_story/pharmaverse_story.html">history blog post</a> for some of additional context on its development. Over the last three years, we have worked at a furious pace to produce functions that can do almost all derivations needed for common ADaMs. However, we have noticed that some functions are very similar to others and with some minor tweaks could be made redundant in favor of other functions. This has lead to some deprecation of either whole functions or arguments as we have sought to consolidate. Unfortunately, this creates a lot of frustration for users.</p>
<p>Enter Superseded!!</p>
<p>Now with the release of <code>1.0.0</code> we are going to <em>supersede</em> functions going forward. This is the process where when we introduce new functions to replace other functions, we will no longer fast-deprecate the replaced functions. Now we will supersede them, i.e.&nbsp;we will keep the function in the codebase for a long time, but recommend the use of the new function. If the function were to be removed from the codebase this will be done many years from the time it is superseded. Please note that although superseded functions are not in scope for active development, any bugs identified within them will nevertheless be fixed.</p>
</section>
<section id="new-features" class="level1">
<h1>New Features</h1>
<p>We have 3 new functions available in this release:</p>
<ul>
<li><a href="https://pharmaverse.github.io/admiral/reference/derive_vars_extreme_event.html">derive_vars_extreme_event()</a></li>
<li><a href="https://pharmaverse.github.io/admiral/reference/derive_var_merged_ef_msrc.html">derive_var_merged_ef_msrc()</a></li>
<li><a href="https://pharmaverse.github.io/admiral/reference/derive_vars_computed.html">derive_vars_computed()</a></li>
</ul>
<p>and a new option in <a href="https://pharmaverse.github.io/admiral/reference/derive_var_atoxgr_dir.html">derive_var_atoxgr_dir()</a> and <a href="https://pharmaverse.github.io/admiral/reference/derive_var_anrind.html">derive_var_anrind()</a> to handle floating point issues.</p>
<section id="derive_vars_extreme_event" class="level2">
<h2 class="anchored" data-anchor-id="derive_vars_extreme_event"><code>derive_vars_extreme_event()</code></h2>
<p>This function takes available records from user-defined events by selecting the extreme observations and appending them as a variable(s) to your dataset. <a href="https://pharmaverse.github.io/admiral/reference/derive_vars_extreme_event.html">derive_vars_extreme_event()</a> works similar to <a href="https://pharmaverse.github.io/admiral/reference/derive_extreme_event.html"><code>derive_extreme_event()</code></a>, but instead of adding observations the function will add variable(s).</p>
<p>Let’s take a peek with a very simple example where we just use ADSL! The documentation for <a href="https://pharmaverse.github.io/admiral/reference/derive_vars_extreme_event.html">derive_vars_extreme_event()</a> has a much richer example with events from other domains that is more aligned to where you would use this function.</p>
<p>Let us make some dummy <code>ADSL</code> data and load up our packages. The goal here is to add two new variables <code>LSTALVDT</code> and <code>DTHFL</code> based on a list of objects that are used to specify the following:</p>
<ul>
<li>the dataset to look at</li>
<li>a set of conditions</li>
<li>what to set the values for the new variables</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(admiral)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span>
<span id="cb1-4"></span>
<span id="cb1-5">adsl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb1-6">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>STUDYID, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>USUBJID, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>TRTEDT, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>DTHDT,</span>
<span id="cb1-7">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PILOT01"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-1130"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-08-16"</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-09-13"</span>),</span>
<span id="cb1-8">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PILOT01"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-1133"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2013-04-28"</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>),</span>
<span id="cb1-9">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PILOT01"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-1211"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2013-01-12"</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>),</span>
<span id="cb1-10">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PILOT01"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"09-1081"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-04-27"</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>),</span>
<span id="cb1-11">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PILOT01"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"09-1088"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-10-09"</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-11-01"</span>),</span>
<span id="cb1-12">)</span></code></pre></div>
</div>
<p>In this example, we only use <code>ADSL</code> as the source dataset, so it is a bit contrived, but much more compact for us. Note the use of the <code>events</code> that is taking in our list of event objects and the different conditions and values we set to create our <code>LSTALVDT</code> and <code>DTHFL</code> variables.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">derive_vars_extreme_event</span>(</span>
<span id="cb2-2">  adsl,</span>
<span id="cb2-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(STUDYID, USUBJID),</span>
<span id="cb2-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">events =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb2-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">event</span>(</span>
<span id="cb2-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset_name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"adsl"</span>,</span>
<span id="cb2-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">condition =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(DTHDT),</span>
<span id="cb2-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">set_values_to =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">LSTALVDT =</span> DTHDT, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">DTHFL =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span>)</span>
<span id="cb2-9">    ),</span>
<span id="cb2-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">event</span>(</span>
<span id="cb2-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset_name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"adsl"</span>,</span>
<span id="cb2-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">condition =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(TRTEDT),</span>
<span id="cb2-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">set_values_to =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">LSTALVDT =</span> TRTEDT, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">DTHFL =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N"</span>)</span>
<span id="cb2-14">    )</span>
<span id="cb2-15">  ),</span>
<span id="cb2-16">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">source_datasets =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">adsl =</span> adsl),</span>
<span id="cb2-17">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">order =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(LSTALVDT),</span>
<span id="cb2-18">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"last"</span>,</span>
<span id="cb2-19">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">LSTALVDT =</span> LSTALVDT, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">DTHFL =</span> DTHFL)</span>
<span id="cb2-20">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 6
  STUDYID USUBJID TRTEDT     DTHDT      LSTALVDT   DTHFL
  &lt;chr&gt;   &lt;chr&gt;   &lt;date&gt;     &lt;date&gt;     &lt;date&gt;     &lt;chr&gt;
1 PILOT01 01-1130 2014-08-16 2014-09-13 2014-09-13 Y    
2 PILOT01 01-1133 2013-04-28 NA         2013-04-28 N    
3 PILOT01 01-1211 2013-01-12 NA         2013-01-12 N    
4 PILOT01 09-1081 2014-04-27 NA         2014-04-27 N    
5 PILOT01 09-1088 2014-10-09 2014-11-01 2014-11-01 Y    </code></pre>
</div>
</div>
<p>Okay! We used a very small example to showcase how to find extreme observations and appending this information as new variables to our <code>ADSL</code> dataset. Highly recommend checking out the more detailed example in the <a href="https://pharmaverse.github.io/admiral/reference/derive_vars_extreme_event.html">function documentation</a> to see its true power!</p>
</section>
<section id="derive_var_merged_ef_msrc" class="level2">
<h2 class="anchored" data-anchor-id="derive_var_merged_ef_msrc"><code>derive_var_merged_ef_msrc()</code></h2>
<p>This function has some similarity to <a href="https://pharmaverse.github.io/admiral/reference/derive_vars_extreme_event.html">derive_vars_extreme_event()</a>, but now we are only looking at adding a single flag variable based on checking conditions across multiple datasets.</p>
<p>We develop some <em>simple</em> dummy data for <code>ADSL</code>, <code>CM</code> and <code>PR</code>. Our goal is to flag patients who have <code>CMCAT = "ANTI-CANCER"</code> in the <code>CM</code> dataset or have records in the <code>PR</code> dataset. Any participants who meet these conditions will have our new variable <code>CANCTRFL</code> set as <code>"Y"</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">adsl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb4-2">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>USUBJID,</span>
<span id="cb4-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>,</span>
<span id="cb4-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2"</span>,</span>
<span id="cb4-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3"</span>,</span>
<span id="cb4-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"4"</span>,</span>
<span id="cb4-7">)</span>
<span id="cb4-8"></span>
<span id="cb4-9">cm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb4-10">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>USUBJID, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>CMCAT,        <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>CMSEQ,</span>
<span id="cb4-11">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>,      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ANTI-CANCER"</span>,      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb4-12">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>,      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GENERAL"</span>,          <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb4-13">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2"</span>,      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GENERAL"</span>,          <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb4-14">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3"</span>,      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ANTI-CANCER"</span>,      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-15">)</span>
<span id="cb4-16"></span>
<span id="cb4-17">pr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb4-18">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>USUBJID, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>PRSEQ,</span>
<span id="cb4-19">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2"</span>,      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb4-20">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3"</span>,      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-21">)</span></code></pre></div>
</div>
<p>Now we have the argument <code>flag_events</code> that takes a list of objects where we define the conditions and datasets to check in.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">derive_var_merged_ef_msrc</span>(</span>
<span id="cb5-2">  adsl,</span>
<span id="cb5-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">flag_events =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb5-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flag_event</span>(</span>
<span id="cb5-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset_name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cm"</span>,</span>
<span id="cb5-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">condition =</span> CMCAT <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ANTI-CANCER"</span></span>
<span id="cb5-7">    ),</span>
<span id="cb5-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flag_event</span>(</span>
<span id="cb5-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset_name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pr"</span></span>
<span id="cb5-10">    )</span>
<span id="cb5-11">  ),</span>
<span id="cb5-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">source_datasets =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cm =</span> cm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pr =</span> pr),</span>
<span id="cb5-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(USUBJID),</span>
<span id="cb5-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_var =</span> CANCTRFL</span>
<span id="cb5-15">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 2
  USUBJID CANCTRFL
  &lt;chr&gt;   &lt;chr&gt;   
1 1       Y       
2 2       Y       
3 3       Y       
4 4       &lt;NA&gt;    </code></pre>
</div>
</div>
<p>Let’s go! We searched over multiple datasets, <code>CM</code> and <code>PR</code>, with multiple conditions and appended a new variable <code>CANCTRFL</code> to <code>ADSL</code> setting to <code>"Y"</code> if those conditions were met.</p>
</section>
<section id="derive_vars_computed" class="level2">
<h2 class="anchored" data-anchor-id="derive_vars_computed"><code>derive_vars_computed()</code></h2>
<p>This function is very similar to <a href="https://pharmaverse.github.io/admiral/reference/derive_param_computed.html">derive_param_computed()</a>, but instead of adding observations we are going to add variable(s). Very handy when wanting to add some additional variables to <code>ADSL</code>, e.g.&nbsp;baseline variables.</p>
<p>Let’s make some dummy data for an <code>ADSL</code> and <code>ADVS</code>. Our goal is to derive a <code>BMIBL</code> variable pulled from <code>ADVS</code> and append to <code>ADSL</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">adsl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb7-2">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>STUDYID,   <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>USUBJID, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>AGE,   <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>AGEU,</span>
<span id="cb7-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PILOT01"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-1302"</span>,   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">61</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"YEARS"</span>,</span>
<span id="cb7-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PILOT01"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"17-1344"</span>,   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"YEARS"</span></span>
<span id="cb7-5">)</span>
<span id="cb7-6"></span>
<span id="cb7-7">advs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb7-8">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>STUDYID, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>USUBJID, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>PARAMCD, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>PARAM, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>VISIT, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>AVAL, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>AVALU, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>ABLFL,</span>
<span id="cb7-9">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PILOT01"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-1302"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HEIGHT"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Height (cm)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SCREENING"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">177.8</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cm"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span>,</span>
<span id="cb7-10">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PILOT01"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-1302"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WEIGHT"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weight (kg)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SCREENING"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">81.19</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kg"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N"</span>,</span>
<span id="cb7-11">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PILOT01"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-1302"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WEIGHT"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weight (kg)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BASELINE"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">82.1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kg"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span>,</span>
<span id="cb7-12">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PILOT01"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-1302"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WEIGHT"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weight (kg)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WEEK 2"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">81.19</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kg"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N"</span>,</span>
<span id="cb7-13">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PILOT01"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-1302"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WEIGHT"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weight (kg)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WEEK 4"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">82.56</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kg"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N"</span>,</span>
<span id="cb7-14">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PILOT01"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-1302"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WEIGHT"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weight (kg)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WEEK 6"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">80.74</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kg"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N"</span>,</span>
<span id="cb7-15">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PILOT01"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"17-1344"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HEIGHT"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Height (cm)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SCREENING"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">163.5</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cm"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span>,</span>
<span id="cb7-16">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PILOT01"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"17-1344"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WEIGHT"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weight (kg)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SCREENING"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">58.06</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kg"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N"</span>,</span>
<span id="cb7-17">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PILOT01"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"17-1344"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WEIGHT"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weight (kg)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BASELINE"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">58.06</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kg"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span>,</span>
<span id="cb7-18">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PILOT01"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"17-1344"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WEIGHT"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weight (kg)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WEEK 2"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">58.97</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kg"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N"</span>,</span>
<span id="cb7-19">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PILOT01"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"17-1344"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WEIGHT"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weight (kg)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WEEK 4"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">57.97</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kg"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N"</span>,</span>
<span id="cb7-20">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PILOT01"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"17-1344"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WEIGHT"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weight (kg)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WEEK 6"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">58.97</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kg"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N"</span></span>
<span id="cb7-21">)</span></code></pre></div>
</div>
<p>Take a look at how we use <code>new_vars</code> and <code>filter_add</code>. We use a function inside of <code>new_vars</code> to help us calculate the <code>BMI</code> while using the <code>filter_add</code> argument to only look at baseline records for the calculation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">derive_vars_computed</span>(</span>
<span id="cb8-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset =</span> adsl,</span>
<span id="cb8-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataset_add =</span> advs,</span>
<span id="cb8-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(STUDYID, USUBJID),</span>
<span id="cb8-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parameters =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WEIGHT"</span>),</span>
<span id="cb8-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">constant_by_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(STUDYID, USUBJID),</span>
<span id="cb8-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">constant_parameters =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HEIGHT"</span>),</span>
<span id="cb8-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">BMIBL =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compute_bmi</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> AVAL.HEIGHT, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weight =</span> AVAL.WEIGHT)),</span>
<span id="cb8-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter_add =</span> ABLFL <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span></span>
<span id="cb8-10">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 5
  STUDYID USUBJID   AGE AGEU  BMIBL
  &lt;chr&gt;   &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;
1 PILOT01 01-1302    61 YEARS  26.0
2 PILOT01 17-1344    64 YEARS  21.7</code></pre>
</div>
</div>
<p>Alright! Simple enough. We just took records from <code>ADVS</code>to help us calculate the <code>BMI</code> at baseline using this function and appended our new variable to <code>ADSL</code>.</p>
</section>
</section>
<section id="argument-alignment-and-bug-fixes" class="level1">
<h1>Argument Alignment and Bug Fixes</h1>
<section id="argument-alignment" class="level2">
<h2 class="anchored" data-anchor-id="argument-alignment">Argument Alignment</h2>
<p>A huge push was made for <code>1.0.0</code> to help align our arguments across all of <code>{admiral}</code> functions. What does this mean? We identified arguments in functions where the argument did the same things but was slightly named differently. For <code>1.0.0</code>, we really want users to have a solid API for <code>{admiral}</code> functions.</p>
<p>Let’s take a peak at the function <a href="https://pharmaverse.github.io/admiral/reference/consolidate_metadata.html"><code>consolidate_metadata()</code></a> to even better understand our goal here.</p>
<pre><code>consolidate_metadata(
  datasets,
  key_vars,
  source_var = SOURCE,
  check_vars = "warning",
  check_keys,
  check_type = "error"
)</code></pre>
<p>In previous versions of <code>{admiral}</code> the <code>consolidate_metadata()</code> function had the argument <code>check_keys</code>, which helps to check uniqueness. Other functions had a similar argument, but were called <code>check_unique</code>. Therefore, to better align our common API for <code>{admiral}</code> functions we decided to rename the <code>check_keys</code> argument to <code>check_unique</code>. You can follow the discussion around this renaming effort in this <a href="https://github.com/pharmaverse/admiral/issues/2184">GitHub Issue</a>.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pharmaverse.github.io/blog/posts/2023-12-18_admiral_1_0/check.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="450"></p>
</figure>
</div>
</div>
</div>
<p>The argument has a deprecated tag in the function documentation and will issue a warning to users. There was quite a bit of renaming of arguments for <code>1.0.0</code> so there are quite a few of these tags in our documentation. In subsequent releases, these arguments will be removed. Please see the <a href="https://pharmaverse.github.io/admiral/news/index.html#admiral-100">changelog</a> if you would like to explore other functions that had arguments renamed. The issues are linked to each rename so you can follow along with the discussions!</p>
</section>
<section id="bug-fixes" class="level2">
<h2 class="anchored" data-anchor-id="bug-fixes">Bug Fixes</h2>
<p>We love fixing bugs and take them incredibly seriously - especially when identified by members from the community.</p>
<p>If you find a pesky bug, please fill out a <a href="https://github.com/pharmaverse/admiral/issues/new/choose">Bug Report</a> on our Issues Tab.</p>
<p>Each bug fixed by our development team is documented in our <a href="https://pharmaverse.github.io/admiral/news/index.html#updates-of-existing-functions-1-0-0">changelog</a> with the Issue linked.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pharmaverse.github.io/blog/posts/2023-12-18_admiral_1_0/issue_tag.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="469"></p>
</figure>
</div>
</div>
</div>
<p>For example, if you click through the issue for <a href="https://github.com/pharmaverse/admiral/issues/2291"><code>derive_extreme_event()</code></a> that identified a problem where the <code>condition</code> was ignored if the <code>mode</code> argument was used, you can see the Bug Report along with a reproducible example. You can also see the Pull Request for the exact code changes that are addressing this bug linked in the Issue! Way cool!</p>
</section>
</section>
<section id="new-on-boarding-resources" class="level1">
<h1>New On-boarding Resources</h1>
<p><code>{admiral}</code> has a lot of functions for working with ADaMs. This can be overwhelming for new users and we really sympathize. To help new users onboarding to <code>{admiral}</code> we have developed the following resources:</p>
<section id="admiraldiscovery" class="level2">
<h2 class="anchored" data-anchor-id="admiraldiscovery"><a href="https://pharmaverse.github.io/admiraldiscovery/index.html">admiraldiscovery</a></h2>
<p>This is a dedicated website that lists out in a tabular format standard ADaM datasets and their common variables with corresponding <code>{admiral}</code> functions that could be used to create the variables. Very handy when you just want to get some starter code on deriving <code>EOSDT</code> or <code>TRTSDT</code>!</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pharmaverse.github.io/blog/posts/2023-12-18_admiral_1_0/admiraldisc.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="652"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="admiral-cheat-sheet" class="level2">
<h2 class="anchored" data-anchor-id="admiral-cheat-sheet"><a href="https://github.com/pharmaverse/admiral/blob/main/inst/cheatsheet/admiral_cheatsheet.pdf">admiral Cheat Sheet</a></h2>
<p>Inspired by other R package cheat sheets! We try and surface commonly needed functions for doing ADaM derivations with simple tables to show how the data is transforming.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pharmaverse.github.io/blog/posts/2023-12-18_admiral_1_0/cheatsheet.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="781"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="way-back-machine" class="level2">
<h2 class="anchored" data-anchor-id="way-back-machine">Way Back Machine</h2>
<p>Studies can last a long time. Adopting R as your primary analysis language for your study can introduce certain risks around package dependencies. Fixing those dependencies to certain package versions can help mitigate those risks. Unfortunately, as package websites are updated those helpful documents, examples and vignettes can be lost as the version changes. Do not lose heart <code>{admiral}</code> users. If you decided to fix to a certain version of <code>{admiral}</code>, we have you covered with our <strong>Way Back Machine</strong> that allows you to change the website documentation back to the version you are using.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pharmaverse.github.io/blog/posts/2023-12-18_admiral_1_0/wayback.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="770"></p>
</figure>
</div>
</div>
</div>
<!--------------- appendices go here ----------------->
</section>
<div class="cell">
<div class="cell-output-display">


</div>
</div>


</section>

<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2024-04-08 12:11:24.251812</p>
</div></section><section id="details" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-12-18_admiral_1_0/code_sections.qmd">source code</a>, <a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-12-18_admiral_1_0/renv.lock">R environment</a></p>
</div></section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{straub2024,
  author = {Straub, Ben},
  title = {Admiral 1.0.0},
  date = {2024-01-04},
  url = {https://pharmaverse.github.io/blog/posts/2023-12-18_admiral_1_0/admiral_1_0.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-straub2024" class="csl-entry quarto-appendix-citeas">
Straub, Ben. 2024. <span>“Admiral 1.0.0.”</span> January 4, 2024. <a href="https://pharmaverse.github.io/blog/posts/2023-12-18_admiral_1_0/admiral_1_0.html">https://pharmaverse.github.io/blog/posts/2023-12-18_admiral_1_0/admiral_1_0.html</a>.
</div></div></section></div> ]]></description>
  <category>admiral</category>
  <category>ADaMs</category>
  <guid>https://pharmaverse.github.io/blog/posts/2023-12-18_admiral_1_0/admiral_1_0.html</guid>
  <pubDate>Thu, 04 Jan 2024 00:00:00 GMT</pubDate>
  <media:content url="https://pharmaverse.github.io/blog/posts/2023-12-18_admiral_1_0/new_features.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Believe in a higher order!</title>
  <dc:creator>Edoardo Mancini</dc:creator>
  <link>https://pharmaverse.github.io/blog/posts/2023-11-27_higher_order/higher_order.html</link>
  <description><![CDATA[ 





<!--------------- typical setup ----------------->
<!--------------- post begins here ----------------->
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Picture the following scenario:</p>
<p><em>You, a budding <a href="https://pharmaverse.github.io/admiral/">{admiral}</a> programmer, are finding your groove chaining together modular code blocks to derive variables and parameters in a drive to construct your favorite ADaM dataset, <code>ADAE</code>. Suddenly you notice that one of the flags you are deriving should only use records on or after study day 1. In a moment of mild annoyance, you get to work modifying what was originally a simple call to <code>derive_var_extreme_flag()</code> by first subsetting <code>ADAE</code> to records where <code>AESTDY &gt; 1</code>, then deriving the flag only for the subsetted <code>ADAE</code>, and finally binding the two portions of <code>ADAE</code> back together before continuing on with your program. Miffed by this interruption, you think to yourself: “I wish there was a neater, faster way to do this in stride, that didn’t break my code modularity…”</em></p>
<p>If the above could never be you, then you’ll probably be alright never reading this blog post. However, if you want to learn more about the tools that <a href="https://pharmaverse.github.io/admiral/">{admiral}</a> provides to make your life easier in cases like this one, then you are in the right place, since this blog post will highlight how higher order functions can solve such issues.</p>
<p>A higher order function is a function that takes another function as input. By introducing these higher order functions, <a href="https://pharmaverse.github.io/admiral/">{admiral}</a> intends to give the user greater power over derivations, whilst trying to negate the need for both adding additional <a href="https://pharmaverse.github.io/admiral/">{admiral}</a> functions/arguments, and the user needing many separate steps.</p>
<p>The functions covered in this post are:</p>
<ul>
<li><code>restrict_derivation()</code>: Allows the user to execute a single derivation on a subset of the input dataset.</li>
<li><code>call_derivation()</code>: Allows the user to call a single derivation multiple times with some arguments being fixed across iterations and others varying.</li>
<li><code>slice_derivation()</code>: Allows the user to split the input dataset into slices (subsets) and for each slice a single derivation is called separately. Some or all arguments of the derivation may vary depending on the slice.</li>
</ul>
<section id="required-packages" class="level2">
<h2 class="anchored" data-anchor-id="required-packages">Required Packages</h2>
<p>The examples in this blog post require the following packages.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(admiral)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(pharmaversesdtm)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">warn.conflicts =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
</div>
<p>For example purpose, the ADSL dataset - which is included in <a href="https://pharmaverse.github.io/admiral/">{admiral}</a> - and the SDTM datasets from <a href="https://pharmaverse.github.io/pharmaversesdtm">{pharmaversesdtm}</a> are used.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"admiral_adsl"</span>)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ae"</span>)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vs"</span>)</span>
<span id="cb2-4">adsl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> admiral_adsl</span>
<span id="cb2-5">ae <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">convert_blanks_to_na</span>(ae)</span>
<span id="cb2-6">vs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">convert_blanks_to_na</span>(vs)</span></code></pre></div>
</div>
<p>The following code creates a minimally viable ADAE dataset to be used where needed in the following examples.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">adae <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ae <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(adsl, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"STUDYID"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"USUBJID"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">derive_vars_dt</span>(</span>
<span id="cb3-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_vars_prefix =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AST"</span>,</span>
<span id="cb3-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dtc =</span> AESTDTC,</span>
<span id="cb3-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">highest_imputation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M"</span></span>
<span id="cb3-7">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb3-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">TRTEMFL =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(ASTDT <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> TRTSDT, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span>),</span>
<span id="cb3-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">TEMP_AESEVN =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(AESEV, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SEVERE"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MODERATE"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MILD"</span>)))</span>
<span id="cb3-11">  )</span></code></pre></div>
</div>
</section>
</section>
<section id="restrict-derivation" class="level1">
<h1>Restrict Derivation</h1>
<p>The idea behind <code>restrict_derivation()</code> is largely to solve the problem outlined in the introduction: sometimes one may want to easily apply a derivation only for certain records from the input dataset. <code>restrict_derivation()</code> gives the users the ability to achieve this across any <a href="https://pharmaverse.github.io/admiral/">{admiral}</a> function, without each function needing to have such an argument to allow for this.</p>
<p>Putting this into practice with an example: suppose the user has some code flagging the first occurring AE with the highest severity for each patient:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">adae_ahsevfl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> adae <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">derive_var_extreme_flag</span>(</span>
<span id="cb4-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_var =</span> AHSEVFL,</span>
<span id="cb4-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(USUBJID),</span>
<span id="cb4-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">order =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(TEMP_AESEVN, AESTDY, AESEQ),</span>
<span id="cb4-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first"</span></span>
<span id="cb4-7">  )</span></code></pre></div>
</div>
<p>To derive <code>AHSEVFL</code> for records occurring on or after study day 1, the user could try to split the dataset before applying <code>derive_var_extreme_flag()</code>, and then re-join everything at the end…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">adae_pre_stdy1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> adae <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(AESTDY <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-2">adae_post_stdy1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> adae <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>(AESTDY <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb5-3"></span>
<span id="cb5-4">adae_pre_stdy1_flag <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> adae_pre_stdy1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">derive_var_extreme_flag</span>(</span>
<span id="cb5-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_var =</span> AHSEVFL,</span>
<span id="cb5-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(USUBJID),</span>
<span id="cb5-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">order =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(TEMP_AESEVN, AESTDY, AESEQ),</span>
<span id="cb5-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first"</span></span>
<span id="cb5-10">  )</span>
<span id="cb5-11"></span>
<span id="cb5-12">adae_ahsevfl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> adae_post_stdy1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">AHSEVFL =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># need to make AHSEVFL in this dataset too, to enable binding below</span></span>
<span id="cb5-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(adae_pre_stdy1_flag)</span></code></pre></div>
</div>
<p>..or, <code>restrict_derivation()</code> could be wrapped around <code>derive_var_extreme_flag()</code>, using the following structure:</p>
<ul>
<li>The function to restrict, <code>derive_var_extreme_flag()</code> is passed to <code>restrict_derivation()</code> through the <code>derivation</code> argument;</li>
<li>The arguments to <code>derive_var_extreme_flag()</code> are passed using a call to <code>params()</code>;</li>
<li>The restriction criterion is provided using the <code>filter</code> argument.</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">adae_ahsevfl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> adae <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">restrict_derivation</span>(</span>
<span id="cb6-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">derivation =</span> derive_var_extreme_flag,</span>
<span id="cb6-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">params</span>(</span>
<span id="cb6-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_var =</span> AHSEVFL,</span>
<span id="cb6-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(USUBJID),</span>
<span id="cb6-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">order =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(TEMP_AESEVN, AESTDY, AESEQ),</span>
<span id="cb6-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first"</span></span>
<span id="cb6-9">    ),</span>
<span id="cb6-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> AESTDY <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb6-11">  )</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: left;">USUBJID</th>
<th style="text-align: left;">AEDECOD</th>
<th style="text-align: right;">AESTDY</th>
<th style="text-align: right;">AESEQ</th>
<th style="text-align: left;">AESEV</th>
<th style="text-align: left;">AHSEVFL</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">01-701-1111</td>
<td style="text-align: left;">LOCALISED INFECTION</td>
<td style="text-align: right;">-61</td>
<td style="text-align: right;">3</td>
<td style="text-align: left;">MODERATE</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="even">
<td style="text-align: left;">01-701-1111</td>
<td style="text-align: left;">ERYTHEMA</td>
<td style="text-align: right;">-5</td>
<td style="text-align: right;">1</td>
<td style="text-align: left;">MILD</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="odd">
<td style="text-align: left;">01-701-1111</td>
<td style="text-align: left;">PRURITUS</td>
<td style="text-align: right;">-5</td>
<td style="text-align: right;">2</td>
<td style="text-align: left;">MILD</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="even">
<td style="text-align: left;">01-701-1111</td>
<td style="text-align: left;">ERYTHEMA</td>
<td style="text-align: right;">-5</td>
<td style="text-align: right;">4</td>
<td style="text-align: left;">MILD</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="odd">
<td style="text-align: left;">01-701-1111</td>
<td style="text-align: left;">PRURITUS</td>
<td style="text-align: right;">-5</td>
<td style="text-align: right;">5</td>
<td style="text-align: left;">MILD</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="even">
<td style="text-align: left;">01-701-1111</td>
<td style="text-align: left;">MICTURITION URGENCY</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">6</td>
<td style="text-align: left;">MILD</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="odd">
<td style="text-align: left;">01-701-1111</td>
<td style="text-align: left;">ARTHRALGIA</td>
<td style="text-align: right;">7</td>
<td style="text-align: right;">7</td>
<td style="text-align: left;">MODERATE</td>
<td style="text-align: left;">Y</td>
</tr>
<tr class="even">
<td style="text-align: left;">01-701-1111</td>
<td style="text-align: left;">CELLULITIS</td>
<td style="text-align: right;">7</td>
<td style="text-align: right;">8</td>
<td style="text-align: left;">MODERATE</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="odd">
<td style="text-align: left;">01-705-1393</td>
<td style="text-align: left;">PRURITUS</td>
<td style="text-align: right;">-277</td>
<td style="text-align: right;">2</td>
<td style="text-align: left;">MILD</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="even">
<td style="text-align: left;">01-705-1393</td>
<td style="text-align: left;">PRURITUS</td>
<td style="text-align: right;">-277</td>
<td style="text-align: right;">4</td>
<td style="text-align: left;">MILD</td>
<td style="text-align: left;">NA</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Though the ultimate result is the same, the second approach is often preferable as it allows everything to be achieved within one code block, meaning one doesn’t necessarily need to break the rhythm achieved when chaining multiple blocks together due to the requirement to “preprocess” the ADaM dataset by only keeping records relevant for the derivation.</p>
</section>
<section id="call-derivation" class="level1">
<h1>Call Derivation</h1>
<p><code>call_derivation()</code> is a function that exists purely for convenience: it saves the user repeating numerous similar derivation function calls. It is best used when multiple derived variables have very similar specifications with only slight variations.</p>
<p>As an example, imagine the case where all the parameters in a BDS ADaM require both a highest value flag and a lowest value flag.</p>
<p>Here is an example of how to achieve this without using <code>call_derivation()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">vs_ahilofl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> vs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">derive_var_extreme_flag</span>(</span>
<span id="cb7-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(USUBJID, VSTESTCD),</span>
<span id="cb7-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">order =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(VSORRES, VSSEQ),</span>
<span id="cb7-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_var =</span> AHIFL,</span>
<span id="cb7-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"last"</span></span>
<span id="cb7-7">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">derive_var_extreme_flag</span>(</span>
<span id="cb7-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(USUBJID, VSTESTCD),</span>
<span id="cb7-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">order =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(VSORRES, VSSEQ),</span>
<span id="cb7-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_var =</span> ALOFL,</span>
<span id="cb7-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first"</span></span>
<span id="cb7-13">  )</span></code></pre></div>
</div>
<p>Conversely, here is how to achieve the same objective by using <code>call_derivation()</code>. Any arguments differing across runs (such as the name of the new variable) are passed using <code>params()</code>, and again the function that needs to be repeatedly called is passed through the <code>derivation</code> argument.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">vs_ahilofl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> vs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">call_derivation</span>(</span>
<span id="cb8-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">derivation =</span> derive_var_extreme_flag,</span>
<span id="cb8-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">variable_params =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb8-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">params</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_var =</span> AHIFL, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"last"</span>),</span>
<span id="cb8-6">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">params</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_var =</span> ALOFL, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first"</span>)</span>
<span id="cb8-7">    ),</span>
<span id="cb8-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(USUBJID, VSTESTCD),</span>
<span id="cb8-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">order =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(VSORRES, VSSEQ)</span>
<span id="cb8-10">  )</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: left;">USUBJID</th>
<th style="text-align: left;">VSTESTCD</th>
<th style="text-align: left;">VSORRES</th>
<th style="text-align: left;">ALOFL</th>
<th style="text-align: left;">AHIFL</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">01-701-1015</td>
<td style="text-align: left;">TEMP</td>
<td style="text-align: left;">96.9</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="even">
<td style="text-align: left;">01-701-1015</td>
<td style="text-align: left;">TEMP</td>
<td style="text-align: left;">97.0</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="odd">
<td style="text-align: left;">01-701-1015</td>
<td style="text-align: left;">TEMP</td>
<td style="text-align: left;">97.2</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="even">
<td style="text-align: left;">01-701-1015</td>
<td style="text-align: left;">TEMP</td>
<td style="text-align: left;">96.6</td>
<td style="text-align: left;">Y</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="odd">
<td style="text-align: left;">01-701-1015</td>
<td style="text-align: left;">TEMP</td>
<td style="text-align: left;">97.7</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="even">
<td style="text-align: left;">01-701-1015</td>
<td style="text-align: left;">TEMP</td>
<td style="text-align: left;">97.0</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="odd">
<td style="text-align: left;">01-701-1015</td>
<td style="text-align: left;">TEMP</td>
<td style="text-align: left;">97.5</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="even">
<td style="text-align: left;">01-701-1015</td>
<td style="text-align: left;">TEMP</td>
<td style="text-align: left;">97.4</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="odd">
<td style="text-align: left;">01-701-1015</td>
<td style="text-align: left;">TEMP</td>
<td style="text-align: left;">98.0</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">Y</td>
</tr>
<tr class="even">
<td style="text-align: left;">01-701-1015</td>
<td style="text-align: left;">TEMP</td>
<td style="text-align: left;">97.4</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Notice that any arguments that <em>stay the same</em> across iterations (here, <code>by_vars</code> and <code>order</code>) are instead passed outside of <code>variable_params</code>. However, it is important to observe that although the arguments outside <code>variable_params</code> are invariant across derivation calls, if any such argument is also specified inside <code>variable_params</code> then this selection overrides the outside selection. This can be useful in cases where for most derivation calls, the set of invariant arguments is constant, but for one or two calls a small modification is required.</p>
<p>Clearly, the advantage of using <code>call_derivation()</code> instead of duplicating code blocks only <em>grows</em> as the number of variable derivations with similar needs also grows.</p>
</section>
<section id="slice-derivation" class="level1">
<h1>Slice Derivation</h1>
<p>This function is essentially a combination of <code>call_derivation()</code> and <code>restrict_derivation()</code>, since it allows a single derivation to be applied with different arguments for different slices (subsets) of records from the input dataset. One could do this with separate <code>restrict_derivation()</code> calls for each different set of records, but <code>slice_derivation()</code> allows to achieve this in one call.</p>
<p>For instance, consider the case where one wanted to achieve a similar derivation to that in the <code>restrict_derivation()</code> example (flagging AE with the highest severity for each patient) but while for records occurring on or after study day 1 the intent remains to flag the <em>first</em> occurring AE, for pre-treatment AEs one instead targets the <em>last</em> occurring AE.</p>
<p><code>slice_derivation()</code> comes to the rescue!</p>
<ul>
<li>Once again, the function to restrict is passed through the <code>derivation</code> argument;</li>
<li>The arguments that remain constant across slices are passed in the <code>args</code> selection using a call to <code>params()</code>;</li>
<li>The user passes <code>derivation_slice</code>’s to the function detailing the filter condition for the slice in the <code>filter</code> argument and what differs across runs in the <code>args</code> call.</li>
</ul>
<p>Note: observations that match with more than one slice are only considered for the first matching slice. Moreover, observations with no match to any of the slices are included in the output dataset but the derivation is not called for them.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">adae_ahsev2fl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> adae <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_derivation</span>(</span>
<span id="cb9-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">derivation =</span> derive_var_extreme_flag,</span>
<span id="cb9-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">params</span>(</span>
<span id="cb9-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_var =</span> AHSEV2FL,</span>
<span id="cb9-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(USUBJID)</span>
<span id="cb9-7">    ),</span>
<span id="cb9-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">derivation_slice</span>(</span>
<span id="cb9-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> AESTDY <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb9-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">params</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">order =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(TEMP_AESEVN, AESTDY, AESEQ), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first"</span>)</span>
<span id="cb9-11">    ),</span>
<span id="cb9-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">derivation_slice</span>(</span>
<span id="cb9-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb9-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">params</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">order =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(AESTDY, AESEQ), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"last"</span>)</span>
<span id="cb9-15">    )</span>
<span id="cb9-16">  )</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: left;">USUBJID</th>
<th style="text-align: left;">AEDECOD</th>
<th style="text-align: right;">AESTDY</th>
<th style="text-align: right;">AESEQ</th>
<th style="text-align: left;">AESEV</th>
<th style="text-align: left;">AHSEV2FL</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">01-701-1111</td>
<td style="text-align: left;">LOCALISED INFECTION</td>
<td style="text-align: right;">-61</td>
<td style="text-align: right;">3</td>
<td style="text-align: left;">MODERATE</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="even">
<td style="text-align: left;">01-701-1111</td>
<td style="text-align: left;">ERYTHEMA</td>
<td style="text-align: right;">-5</td>
<td style="text-align: right;">1</td>
<td style="text-align: left;">MILD</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="odd">
<td style="text-align: left;">01-701-1111</td>
<td style="text-align: left;">PRURITUS</td>
<td style="text-align: right;">-5</td>
<td style="text-align: right;">2</td>
<td style="text-align: left;">MILD</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="even">
<td style="text-align: left;">01-701-1111</td>
<td style="text-align: left;">ERYTHEMA</td>
<td style="text-align: right;">-5</td>
<td style="text-align: right;">4</td>
<td style="text-align: left;">MILD</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="odd">
<td style="text-align: left;">01-701-1111</td>
<td style="text-align: left;">PRURITUS</td>
<td style="text-align: right;">-5</td>
<td style="text-align: right;">5</td>
<td style="text-align: left;">MILD</td>
<td style="text-align: left;">Y</td>
</tr>
<tr class="even">
<td style="text-align: left;">01-701-1111</td>
<td style="text-align: left;">MICTURITION URGENCY</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">6</td>
<td style="text-align: left;">MILD</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="odd">
<td style="text-align: left;">01-701-1111</td>
<td style="text-align: left;">ARTHRALGIA</td>
<td style="text-align: right;">7</td>
<td style="text-align: right;">7</td>
<td style="text-align: left;">MODERATE</td>
<td style="text-align: left;">Y</td>
</tr>
<tr class="even">
<td style="text-align: left;">01-701-1111</td>
<td style="text-align: left;">CELLULITIS</td>
<td style="text-align: right;">7</td>
<td style="text-align: right;">8</td>
<td style="text-align: left;">MODERATE</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="odd">
<td style="text-align: left;">01-705-1393</td>
<td style="text-align: left;">PRURITUS</td>
<td style="text-align: right;">-277</td>
<td style="text-align: right;">2</td>
<td style="text-align: left;">MILD</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="even">
<td style="text-align: left;">01-705-1393</td>
<td style="text-align: left;">PRURITUS</td>
<td style="text-align: right;">-277</td>
<td style="text-align: right;">4</td>
<td style="text-align: left;">MILD</td>
<td style="text-align: left;">Y</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Notice that the <code>derivation_slice</code> ordering is important. in the above examples, all the AEs on or after study day 1 were addressed first, and then the <code>filter = TRUE</code> option was employed to catch all remaining records (in this case pre-treatment AEs).</p>
<p>The ordering is perhaps shown even more when in the below example where three slices are taken. Remember that observations that match with more than one slice are only considered for the first matching slice. Thus, in this case the objective is to create a flag for each patient for the record with the first severe AE, and then the first moderate AE, and finally the last occurring AE which is neither severe or moderate.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">adae_ahsev3fl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> adae <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_derivation</span>(</span>
<span id="cb10-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">derivation =</span> derive_var_extreme_flag,</span>
<span id="cb10-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">params</span>(</span>
<span id="cb10-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_var =</span> AHSEV3FL,</span>
<span id="cb10-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(USUBJID)</span>
<span id="cb10-7">    ),</span>
<span id="cb10-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">derivation_slice</span>(</span>
<span id="cb10-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> AESEV <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SEVERE"</span>,</span>
<span id="cb10-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">params</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">order =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(AESTDY, AESEQ), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first"</span>)</span>
<span id="cb10-11">    ),</span>
<span id="cb10-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">derivation_slice</span>(</span>
<span id="cb10-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> AESEV <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MODERATE"</span>,</span>
<span id="cb10-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">params</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">order =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(AESTDY, AESEQ), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first"</span>)</span>
<span id="cb10-15">    ),</span>
<span id="cb10-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">derivation_slice</span>(</span>
<span id="cb10-17">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb10-18">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">params</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">order =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(AESTDY, AESEQ), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"last"</span>)</span>
<span id="cb10-19">    )</span>
<span id="cb10-20">  )</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: left;">USUBJID</th>
<th style="text-align: left;">AEDECOD</th>
<th style="text-align: right;">AESTDY</th>
<th style="text-align: right;">AESEQ</th>
<th style="text-align: left;">AESEV</th>
<th style="text-align: left;">AHSEV3FL</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">01-701-1111</td>
<td style="text-align: left;">LOCALISED INFECTION</td>
<td style="text-align: right;">-61</td>
<td style="text-align: right;">3</td>
<td style="text-align: left;">MODERATE</td>
<td style="text-align: left;">Y</td>
</tr>
<tr class="even">
<td style="text-align: left;">01-701-1111</td>
<td style="text-align: left;">ERYTHEMA</td>
<td style="text-align: right;">-5</td>
<td style="text-align: right;">1</td>
<td style="text-align: left;">MILD</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="odd">
<td style="text-align: left;">01-701-1111</td>
<td style="text-align: left;">PRURITUS</td>
<td style="text-align: right;">-5</td>
<td style="text-align: right;">2</td>
<td style="text-align: left;">MILD</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="even">
<td style="text-align: left;">01-701-1111</td>
<td style="text-align: left;">ERYTHEMA</td>
<td style="text-align: right;">-5</td>
<td style="text-align: right;">4</td>
<td style="text-align: left;">MILD</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="odd">
<td style="text-align: left;">01-701-1111</td>
<td style="text-align: left;">PRURITUS</td>
<td style="text-align: right;">-5</td>
<td style="text-align: right;">5</td>
<td style="text-align: left;">MILD</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="even">
<td style="text-align: left;">01-701-1111</td>
<td style="text-align: left;">MICTURITION URGENCY</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">6</td>
<td style="text-align: left;">MILD</td>
<td style="text-align: left;">Y</td>
</tr>
<tr class="odd">
<td style="text-align: left;">01-701-1111</td>
<td style="text-align: left;">ARTHRALGIA</td>
<td style="text-align: right;">7</td>
<td style="text-align: right;">7</td>
<td style="text-align: left;">MODERATE</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="even">
<td style="text-align: left;">01-701-1111</td>
<td style="text-align: left;">CELLULITIS</td>
<td style="text-align: right;">7</td>
<td style="text-align: right;">8</td>
<td style="text-align: left;">MODERATE</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="odd">
<td style="text-align: left;">01-705-1393</td>
<td style="text-align: left;">PRURITUS</td>
<td style="text-align: right;">-277</td>
<td style="text-align: right;">2</td>
<td style="text-align: left;">MILD</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="even">
<td style="text-align: left;">01-705-1393</td>
<td style="text-align: left;">PRURITUS</td>
<td style="text-align: right;">-277</td>
<td style="text-align: right;">4</td>
<td style="text-align: left;">MILD</td>
<td style="text-align: left;">NA</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>The order is only important when the slices are not mutually exclusive, so in the above case the moderate AE slice could have been above the severe AE slice, for example, and there would have been no difference to the result. However the third slice had to come last to check all remaining (i.e.&nbsp;not severe or moderate) records only.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>The three higher order functions available in <a href="https://pharmaverse.github.io/admiral/">{admiral}</a> <code>restrict_derivation()</code>, <code>call_derivation()</code> and <code>slice_derivation()</code>, are a flexible toolset provided by <a href="https://pharmaverse.github.io/admiral/">{admiral}</a> to streamline ADaM code. They are never the <em>only</em> way to achieve a derivation, but they are often the <em>most efficient</em> way to do so. When code becomes long or convoluted, it is often worth pausing to examine whether one of these could come to the rescue to make life simpler.</p>
<!--------------- appendices go here ----------------->
<div class="cell">
<div class="cell-output-display">


</div>
</div>


</section>

<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2024-04-08 12:11:30.772957</p>
</div></section><section id="details" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-11-03_higher_order/code_sections.qmd">source code</a>, <a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-11-03_higher_order/renv.lock">R environment</a></p>
</div></section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{mancini2023,
  author = {Mancini, Edoardo},
  title = {Believe in a Higher Order!},
  date = {2023-11-27},
  url = {https://pharmaverse.github.io/blog/posts/2023-11-27_higher_order/higher_order.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-mancini2023" class="csl-entry quarto-appendix-citeas">
Mancini, Edoardo. 2023. <span>“Believe in a Higher Order!”</span>
November 27, 2023. <a href="https://pharmaverse.github.io/blog/posts/2023-11-27_higher_order/higher_order.html">https://pharmaverse.github.io/blog/posts/2023-11-27_higher_order/higher_order.html</a>.
</div></div></section></div> ]]></description>
  <category>admiral</category>
  <guid>https://pharmaverse.github.io/blog/posts/2023-11-27_higher_order/higher_order.html</guid>
  <pubDate>Mon, 27 Nov 2023 00:00:00 GMT</pubDate>
  <media:content url="https://pharmaverse.github.io/blog/posts/2023-11-27_higher_order/admiral.png" medium="image" type="image/png" height="108" width="144"/>
</item>
<item>
  <title>Floating point</title>
  <dc:creator>Stefan Thoma</dc:creator>
  <link>https://pharmaverse.github.io/blog/posts/2023-10-30_floating_point/floating_point.html</link>
  <description><![CDATA[ 





<!--------------- typical setup ----------------->
<!--------------- post begins here ----------------->
<p><a href="https://github.com/pharmaverse/admiral">{admiral}</a> recently ran into some trouble when dealing with floating point values, captured <a href="https://github.com/pharmaverse/admiral/pull/2060">by this thread on GitHub</a>. This post gives a brief overview on floating point values, recaps the discussion on GitHub, and explains how <a href="https://github.com/pharmaverse/admiral">{admiral}</a> deals with floating point values.</p>
<section id="floating-point-values" class="level2">
<h2 class="anchored" data-anchor-id="floating-point-values">Floating point values</h2>
<p>Floating point values are numeric objects representing numbers between integers, e.g.&nbsp;0.5, 2.3, 3.1415, etc. However, floating point numbers are not stored like integers, and most floating point numbers are approximations to the number they represent. To see what value a floating point number is actually stored as, we can use the <code>format()</code> function where we can increase the number of digits shown:</p>
<div class="cell" data-warnings="false">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1.399999999999999911182"</code></pre>
</div>
</div>
<p>These very small numerical differences impact the result of mathematical operations:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
</div>
<p>If we look at the actually stored values, this makes sense:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "0.1000000000000000055511"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "0.2000000000000000111022"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "0.3000000000000000444089"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "0.2999999999999999888978"</code></pre>
</div>
</div>
<p>The bottom line is: Avoid using exact comparators such as <code>==</code> and <code>&gt;=</code> when comparing floating point values.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exact floating point values
</div>
</div>
<div class="callout-body-container callout-body">
<p>Floating point values are stored in binary format. While most floating point values are approximations, there are some exceptions which can be exactly represented, namely if they can be written down as <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bx%7D%7B2%5Ey%7D">, where x and y are integers. For example, 0.5 is stored as <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B2%7D">, 0.25 is stored as <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B4%7D">, 0.125 is stored as <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B8%7D">, etc.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># simple examples</span></span>
<span id="cb13-2"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "0.5"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "0.25"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.125</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "0.125"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0625</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "0.0625"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># some weird values for x and y</span></span>
<span id="cb21-2">(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1121</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2.189453125"</code></pre>
</div>
</div>
<p>All floating point values are stored as <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bx%7D%7B2%5Ey%7D">, where the outcome may be a very close approximation to the value they represent*.</p>
<p>https://en.wikipedia.org/wiki/Floating-point_arithmetic#Representable_numbers,_conversion_and_rounding If you would like to learn more about representable floating point values please read the wikipedia article on floating point values, especially section <a href="https://en.wikipedia.org/wiki/Floating-point_arithmetic#Representable_numbers,_conversion_and_rounding">Representable numbers, conversion and rounding</a>.</p>
<p>* Based on a recollection of the course associated with <a href="https://github.com/mmaechler/ProgRRR">this GitHub Repository</a> by Martin Mächler.</p>
</div>
</div>
</section>
<section id="issues-arising" class="level2">
<h2 class="anchored" data-anchor-id="issues-arising">Issues arising</h2>
<p>Gordon Miller came across this issue when he was creating <a href="https://rsc.niaid.nih.gov/clinical-research-sites/daids-adverse-event-grading-tables">DAIDS criteria</a> for adverse events in cancer therapy when using <code>case_when</code> statements to implement the grade.</p>
<p>We can have a glimpse here:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">atoxgr_criteria_daids <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(TERM <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Amylase, High"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lipase, High"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb23-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(TERM, GRADE_CRITERIA_CODE) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb23-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactable</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">defaultPageSize =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">highlight =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bordered =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">striped =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">resizable =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="reactable html-widget html-fill-item" id="htmlwidget-8873417373a40c55d1fb" style="width:auto;height:auto;"></div>
<script type="application/json" data-for="htmlwidget-8873417373a40c55d1fb">{"x":{"tag":{"name":"Reactable","attribs":{"data":{"TERM":["Amylase, High","Lipase, High"],"GRADE_CRITERIA_CODE":["case_when(  is.na(AVAL) | is.na(ANRHI) ~ NA_character_,  signif(AVAL, signif_dig) >=  signif(5*ANRHI, signif_dig) ~ \"4\",  signif(AVAL, signif_dig) >=  signif(3*ANRHI, signif_dig) ~ \"3\",  signif(AVAL, signif_dig) >= signif(1.5*ANRHI, signif_dig) ~ \"2\",  signif(AVAL, signif_dig) >= signif(1.1*ANRHI, signif_dig) ~ \"1\",  signif(AVAL, signif_dig) < signif(1.1*ANRHI, signif_dig) ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(ANRHI) ~ NA_character_,  signif(AVAL, signif_dig) >=  signif(5*ANRHI, signif_dig) ~ \"4\",  signif(AVAL, signif_dig) >=  signif(3*ANRHI, signif_dig) ~ \"3\",  signif(AVAL, signif_dig) >= signif(1.5*ANRHI, signif_dig) ~ \"2\",  signif(AVAL, signif_dig) >= signif(1.1*ANRHI, signif_dig) ~ \"1\",  signif(AVAL, signif_dig) < signif(1.1*ANRHI, signif_dig) ~ \"0\"  )"]},"columns":[{"id":"TERM","name":"TERM","type":"character"},{"id":"GRADE_CRITERIA_CODE","name":"GRADE_CRITERIA_CODE","type":"character"}],"resizable":true,"defaultPageSize":4,"highlight":true,"bordered":true,"striped":true,"dataKey":"ccaa297eedbe0b2b624ea3477967a787"},"children":[]},"class":"reactR_markup"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>As you can see, the data-frame contains the column <code>GRADE_CRITERIA_CODE</code> which contains comparisons of floating point values. And there was a discrepancy of what Gordon expected to see, and how R actually computed the comparison initially:</p>
<blockquote class="blockquote">
<p>The test is AVAL &gt;= 1.1*ANRHI should give a value of “1” where AVAL = 110 and ANRHI = 100.</p>
<p>I tried it separately and I also got 1.1*ANRHI not equal to 110 where ANRHI = 100.</p>
</blockquote>
<p>Where ANRHI is the <em>analysis range upper limit</em> and AVAL is an <em>analysis value</em>.</p>
<p>What happened here? Gordon Miller wanted to compute the <em>analysis range upper limit</em> plus 10% and compare it to the <em>analysis value</em>. He expected the comparison to yield <code>TRUE</code> (or <code>1</code> if converted to <code>numeric</code>) as AVAL (110) should be exactly 1.1 * 100. However, he multiplied an integer (100) with a floating point value (1.1). And the result was not exactly 110, as 1.1 is not exactly represented as a floating point value.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "110.0000000000000142109"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">110</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
</div>
<p>On my machine, the result <em>is</em> actually larger than 110, while on Gordon Miller’s machine the result was smaller than 110. In <a href="https://github.com/pharmaverse/admiral">{admiral}</a>, we strive towards removing platform specific and unexpected behavior, so we had to find a way to solve the floating point issue.</p>
</section>
<section id="potential-solutions" class="level2">
<h2 class="anchored" data-anchor-id="potential-solutions">Potential solutions</h2>
<p>A very crude option would be to round the result of the multiplication to the nearest integer.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "110"</code></pre>
</div>
</div>
<p>However, this does not work when the result is not an integer, i.e.&nbsp;the upper limit was 101 instead. We should then compare the analysis value to 101 * 1.1, which should be exactly 111.1. We could try to round to the nearest decimal place, but that value would again be stored as a floating point value:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb30-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb30-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "111.0999999999999943157"</code></pre>
</div>
</div>
<p>A workaround would be to multiply both sides of the equation with 10, and then round to the next integer:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb32-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb32-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1111"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">111.1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb34-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb34-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1111"</code></pre>
</div>
</div>
<p>This is very awkward, as you don’t know by how much you need to multiply each time, a very clunky solution.</p>
<p>Alternatively, we can compare the absolute value of the difference between the analysis value and the upper limit plus 10% to a very small number, e.g.&nbsp;0.0000001:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">AVAL <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">111.1</span></span>
<span id="cb36-2">ANRHI <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span></span>
<span id="cb36-3"></span>
<span id="cb36-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(AVAL <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ANRHI <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0000001</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>Comparing to a very small value is also how the <code>all.equal()</code> function works, which compares two numeric values and returns <code>TRUE</code> if they are equal within a tolerance. By default the tolerance is around <img src="https://latex.codecogs.com/png.latex?1.5%20*%2010%5E%7B-8%7D"> but you can set it yourself to a lower value, e.g.&nbsp;machine tolerance <code>.Machine$double.eps</code> - (one of**) the smallest positive floating-point number x such that 1 + x != 1.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> .Machine<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>double.eps <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># but:</span></span>
<span id="cb40-2"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> .Machine<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>double.eps <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># so we can use:</span></span>
<span id="cb42-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all.equal</span>(AVAL, ANRHI <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tolerance =</span> .Machine<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>double.eps)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Mean absolute difference: 10.1"</code></pre>
</div>
</div>
<p>This would still be a little clunky for <em>greater than or equal to</em> comparisons:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all.equal</span>(AVAL, ANRHI <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> AVAL <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> ANRHI <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># unfortunately, the all.equal() function does not return a FALSE if they are not the same:</span></span>
<span id="cb46-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all.equal</span>(AVAL, ANRHI <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Mean relative difference: 0.0090009"</code></pre>
</div>
</div>
<p>For some reason, the value it returns is also not correct.</p>
<p>There is also a dplyr function called <code>near()</code> which does essentially the same thing as <code>all.equal()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">ANRHI <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb48-2">AVAL <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">110</span></span>
<span id="cb48-3">(ANRHI <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "110.0000000000000142109"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">AVAL <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> ANRHI <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">near</span>(AVAL, ANRHI <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>Gordon Miller suggested to replace the standard comparators with the following functions across <a href="https://github.com/pharmaverse/admiral">{admiral}</a></p>
<table class="table">
<thead>
<tr class="header">
<th>{base}</th>
<th>improved</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>A &gt;= B</td>
<td>A &gt; B | near(A, B)</td>
</tr>
<tr class="even">
<td>A &lt;= B</td>
<td>A &lt; B | near(A, B)</td>
</tr>
<tr class="odd">
<td>A == B</td>
<td>near(A, B)</td>
</tr>
<tr class="even">
<td>A != B</td>
<td>!near(A, B)</td>
</tr>
<tr class="odd">
<td>A &gt; B</td>
<td>A &gt; B &amp; !near(A, B)</td>
</tr>
<tr class="even">
<td>A &lt; B</td>
<td>A &lt; B &amp; !near(A, B)</td>
</tr>
</tbody>
</table>
<p>This would work perfectly fine, but especially for <code>case_when()</code> statements, it would add a lot of code-bloat.</p>
<p>Although a minor issue, it looks like the <code>near()</code> function tests for absolute differences, while the <code>all.equal()</code> function tests for relative differences, as discussed in <a href="https://github.com/tidyverse/dplyr/issues/6921">this thread</a>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Very large values:</span></span>
<span id="cb52-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># When checking for absolute differences</span></span>
<span id="cb52-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">near</span>(</span>
<span id="cb52-4">  ANRHI <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb52-5">  AVAL <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb52-6">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># When checking for relative differences</span></span>
<span id="cb54-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all.equal</span>(</span>
<span id="cb54-3">  ANRHI <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb54-4">  AVAL <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb54-5">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># As:</span></span>
<span id="cb56-2">(ANRHI <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "110000000.0000000149012"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1">(AVAL <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1.1e+08"</code></pre>
</div>
</div>
<table class="table">
<thead>
<tr class="header">
<th>{base}</th>
<th><a href="https://github.com/PredictiveEcology/fpCompare">{fpCompare}</a></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>A &gt;= B</td>
<td>A %&gt;=% B</td>
</tr>
<tr class="even">
<td>A &lt;= B</td>
<td>A %&lt;=% B</td>
</tr>
<tr class="odd">
<td>A == B</td>
<td>A %==% B</td>
</tr>
<tr class="even">
<td>A != B</td>
<td>A %!=% B</td>
</tr>
<tr class="odd">
<td>A &gt; B</td>
<td>A %&gt;&gt;% B</td>
</tr>
<tr class="even">
<td>A &lt; B</td>
<td>A %&lt;&lt;% B</td>
</tr>
</tbody>
</table>
<p>As an example to how this is implemented, we can have a look at the <a href="https://github.com/PredictiveEcology/fpCompare">{fpCompare}</a> source code for one of the operators:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">%&lt;=%</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, y) {</span>
<span id="cb60-2">  (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getOption</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fpCompare.tolerance"</span>))</span>
<span id="cb60-3">}</span></code></pre></div>
</div>
<p>Even if <code>y</code> is ever so slightly smaller than <code>x</code>, adding the tolerance to <code>y</code> will make the result larger than <code>x</code>, and the comparison will return <code>TRUE</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we need to set the fpCompare.tolerance first, because we did not load the package:</span></span>
<span id="cb61-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fpCompare.tolerance =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-8</span>)</span>
<span id="cb61-3"></span>
<span id="cb61-4">(ANRHI <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&lt;=%</span> AVAL</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>As long as <a href="https://github.com/pharmaverse/admiral">{admiral}</a> remains open source and free to use, using this package, or even reusing the code itself would be fine. Although this was <em>my</em> preferred option, we did not end up implementing it. Instead, we made use of the <code>signif()</code> function, which rounds a number to a specified number of significant digits. This way, we could use the regular infix operators and simply provide the number of significant digits we want to compare to:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1">signif_dig <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span>
<span id="cb63-2"></span>
<span id="cb63-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">signif</span>(AVAL, signif_dig) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">signif</span>(ANRHI <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>, signif_dig)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># as:</span></span>
<span id="cb65-2">(ANRHI <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb65-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">signif</span>(signif_dig) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb65-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "110"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and although when printed, the number still looks off:</span></span>
<span id="cb67-2">ANRHI <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span></span>
<span id="cb67-3">((ANRHI <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">signif</span>(signif_dig)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "111.0999999999999943157"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the comparison works now:</span></span>
<span id="cb69-2">((ANRHI <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">signif</span>(signif_dig)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">111.1</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>This is now implemented throughout <code>atoxgr_criteria_daids</code>, <code>atoxgr_criteria_ctcv4</code>, and <code>atoxgr_criteria_ctcv5</code>, and we are <a href="https://github.com/pharmaverse/admiral/issues/2134">working on an issue</a> for the 1.0.0 release of <a href="https://github.com/pharmaverse/admiral">{admiral}</a> to implement this for <code>derive_var_anrind</code> as well.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1">atoxgr_criteria_daids <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb71-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(TERM, GRADE_CRITERIA_CODE) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb71-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactable</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">defaultPageSize =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">highlight =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bordered =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">striped =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">resizable =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="reactable html-widget html-fill-item" id="htmlwidget-35d1c744f545addfa9d8" style="width:auto;height:auto;"></div>
<script type="application/json" data-for="htmlwidget-35d1c744f545addfa9d8">{"x":{"tag":{"name":"Reactable","attribs":{"data":{"TERM":["Acidosis","Albumin, Low","Alkaline Phosphatase, High","Alkalosis","ALT, High","Amylase, High","AST, High","Bicarbonate, Low","Direct Bilirubin, High","Direct Bilirubin, High","Total Bilirubin, High","Total Bilirubin, High","Calcium, High","Calcium, High","Calcium (Ionized), High","Calcium, Low","Calcium, Low","Calcium (Ionized), Low","Creatine Kinase, High","Creatinine, High","Glucose Fasting, High","Glucose Nonfasting, High","Glucose, Low","Glucose, Low","Lactate, High","Lipase, High","Cholesterol, Fasting, High","Cholesterol, Fasting, High","LDL, Fasting, High","LDL, Fasting, High","LDL, Fasting, High","Triglycerides, Fasting, High","Magnesium, Low","Phosphate, Low","Phosphate, Low","Phosphate, Low","Potassium, High","Potassium, Low","Sodium, High","Sodium, Low","Uric Acid, High","Absolute CD4+ Count, Low","Absolute CD4+ Count, Low","Absolute Lymphocyte Count, Low","Absolute Lymphocyte Count, Low","Absolute Neutrophil Count (ANC), Low","Absolute Neutrophil Count (ANC), Low","Absolute Neutrophil Count (ANC), Low","Fibrinogen Decreased","Hemoglobin, Low","Hemoglobin, Low","Hemoglobin, Low","Hemoglobin, Low","Hemoglobin, Low","Hemoglobin, Low","Hemoglobin, Low","INR, High","Methemoglobin","PTT, High","Platelets, Decreased","PT, High","WBC, Decreased","WBC, Decreased"],"GRADE_CRITERIA_CODE":["case_when(  is.na(AVAL) ~ NA_character_,  signif(AVAL, signif_dig) < 7.3  ~ \"4\",  is.na(ANRLO) ~ NA_character_,  signif(AVAL, signif_dig) < signif(ANRLO, signif_dig) ~ \"2\",  signif(AVAL, signif_dig) >= signif(ANRLO, signif_dig) ~ \"0\"  )","case_when(  is.na(AVAL) ~ NA_character_,  signif(AVAL, signif_dig) <  20 ~ \"3\",  signif(AVAL, signif_dig) < 30 ~ \"2\",  is.na(ANRLO) ~ NA_character_,  signif(AVAL, signif_dig) < signif(ANRLO, signif_dig) ~ \"1\",  signif(AVAL, signif_dig) >= signif(ANRLO, signif_dig) ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(ANRHI) ~ NA_character_,  signif(AVAL, signif_dig) >=  signif(10*ANRHI, signif_dig) ~ \"4\",  signif(AVAL, signif_dig) >=  signif(5*ANRHI, signif_dig) ~ \"3\",  signif(AVAL, signif_dig) >= signif(2.5*ANRHI, signif_dig) ~ \"2\",  signif(AVAL, signif_dig) >= signif(1.25*ANRHI, signif_dig) ~ \"1\",  signif(AVAL, signif_dig) < signif(1.25*ANRHI, signif_dig) ~ \"0\"  )","case_when(  is.na(AVAL) ~ NA_character_,  signif(AVAL, signif_dig) > 7.5 ~ \"4\",  is.na(ANRHI) ~ NA_character_,  signif(AVAL, signif_dig) > signif(ANRHI, signif_dig) ~ \"2\",  signif(AVAL, signif_dig) <= signif(ANRHI, signif_dig) ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(ANRHI) ~ NA_character_,  signif(AVAL, signif_dig) >= signif(10*ANRHI, signif_dig) ~ \"4\",  signif(AVAL, signif_dig) >= signif(5*ANRHI, signif_dig) ~ \"3\",  signif(AVAL, signif_dig) >= signif(2.5*ANRHI, signif_dig) ~ \"2\",  signif(AVAL, signif_dig) >= signif(1.25*ANRHI, signif_dig) ~ \"1\",  signif(AVAL, signif_dig) < signif(1.25*ANRHI, signif_dig) ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(ANRHI) ~ NA_character_,  signif(AVAL, signif_dig) >=  signif(5*ANRHI, signif_dig) ~ \"4\",  signif(AVAL, signif_dig) >=  signif(3*ANRHI, signif_dig) ~ \"3\",  signif(AVAL, signif_dig) >= signif(1.5*ANRHI, signif_dig) ~ \"2\",  signif(AVAL, signif_dig) >= signif(1.1*ANRHI, signif_dig) ~ \"1\",  signif(AVAL, signif_dig) < signif(1.1*ANRHI, signif_dig) ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(ANRHI) ~ NA_character_,  signif(AVAL, signif_dig) >= signif(10*ANRHI, signif_dig) ~ \"4\",  signif(AVAL, signif_dig) >= signif(5*ANRHI, signif_dig) ~ \"3\",  signif(AVAL, signif_dig) >= signif(2.5*ANRHI, signif_dig) ~ \"2\",  signif(AVAL, signif_dig) >= signif(1.25*ANRHI, signif_dig) ~ \"1\",  signif(AVAL, signif_dig) < signif(1.25*ANRHI, signif_dig) ~ \"0\"  )","case_when(  is.na(AVAL) ~ NA_character_,  signif(AVAL, signif_dig) < 8 ~ \"4\",  signif(AVAL, signif_dig) < 11 ~ \"3\",  signif(AVAL, signif_dig) < 16 ~ \"2\",  is.na(ANRLO) ~ NA_character_,  signif(AVAL, signif_dig) < signif(ANRLO, signif_dig) ~ \"1\",  signif(AVAL, signif_dig) >= signif(ANRLO, signif_dig) ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(ANRHI) | is.na(BRTHDT) | is.na(LBDT) ~ NA_character_,  signif(AVAL, signif_dig) >  signif(ANRHI, signif_dig) ~ \"4\",  signif(AVAL, signif_dig) <= signif(ANRHI, signif_dig) ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(BRTHDT) | is.na(LBDT) ~ NA_character_,  signif(AVAL, signif_dig) >  2*17.1 ~ \"4\",  signif(AVAL, signif_dig) >  1.5*17.1 ~ \"3\",  signif(AVAL, signif_dig) >  17.1 ~ \"2\",  is.na(ANRHI) ~ NA_character_,  signif(AVAL, signif_dig) >= signif(ANRHI, signif_dig) ~ \"1\",  signif(AVAL, signif_dig) < signif(ANRHI, signif_dig) ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(ANRHI) | is.na(BRTHDT) | is.na(LBDT) ~ NA_character_,  signif(AVAL, signif_dig) >=  5*ANRHI ~ \"4\",  signif(AVAL, signif_dig) >=  2.6*ANRHI ~ \"3\",  signif(AVAL, signif_dig) >= 1.6*ANRHI ~ \"2\",  signif(AVAL, signif_dig) >= 1.1*ANRHI ~ \"1\",  signif(AVAL, signif_dig) < 1.1*ANRHI ~ \"0\"  )","NA_character_","case_when(  is.na(AVAL) | is.na(BRTHDT) | is.na(LBDT) ~ NA_character_,  signif(AVAL, signif_dig) >= 3.38 ~ \"4\",  signif(AVAL, signif_dig) >= 3.13 ~ \"3\",  signif(AVAL, signif_dig) >= 2.88 ~ \"2\",  signif(AVAL, signif_dig) >= 2.65 ~ \"1\",  signif(AVAL, signif_dig) < 2.65 ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(BRTHDT) | is.na(LBDT) ~ NA_character_,  signif(AVAL, signif_dig) >= 3.38 ~ \"4\",  signif(AVAL, signif_dig) >= 3.23 ~ \"3\",  signif(AVAL, signif_dig) >= 3.1 ~ \"2\",  signif(AVAL, signif_dig) >= 2.88 ~ \"1\",  signif(AVAL, signif_dig) < 2.88 ~ \"0\"  )","case_when(  is.na(AVAL) ~ NA_character_,  signif(AVAL, signif_dig) >= 1.8 ~ \"4\",  signif(AVAL, signif_dig) >= 1.6 ~ \"3\",  signif(AVAL, signif_dig) >= 1.5 ~ \"2\",  is.na(ANRHI) ~ NA_character_,  signif(AVAL, signif_dig) > signif(ANRHI, signif_dig) ~ \"1\",  signif(AVAL, signif_dig) <= signif(ANRHI, signif_dig) ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(BRTHDT) | is.na(LBDT) ~ NA_character_,  signif(AVAL, signif_dig) < 1.53 ~ \"4\",  signif(AVAL, signif_dig) < 1.75 ~ \"3\",  signif(AVAL, signif_dig) < 1.95 ~ \"2\",  signif(AVAL, signif_dig) < 2.1 ~ \"1\",  signif(AVAL, signif_dig) >= 2.1 ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(BRTHDT) | is.na(LBDT) ~ NA_character_,  signif(AVAL, signif_dig) < 1.38 ~ \"4\",  signif(AVAL, signif_dig) < 1.5 ~ \"3\",  signif(AVAL, signif_dig) < 1.63 ~ \"2\",  signif(AVAL, signif_dig) < 1.88 ~ \"1\",  signif(AVAL, signif_dig) >= 1.88 ~ \"0\"  )","case_when(  is.na(AVAL) ~ NA_character_,  signif(AVAL, signif_dig) < 0.8 ~ \"4\",  signif(AVAL, signif_dig) < 0.9 ~ \"3\",  signif(AVAL, signif_dig) < 1 ~ \"2\",  is.na(ANRLO) ~ NA_character_,  signif(AVAL, signif_dig) < signif(ANRLO, signif_dig) ~ \"1\",  signif(AVAL, signif_dig) >= signif(ANRLO, signif_dig) ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(ANRHI) ~ NA_character_,  signif(AVAL, signif_dig) >=  signif(20*ANRHI, signif_dig) ~ \"4\",  signif(AVAL, signif_dig) >=  signif(10*ANRHI, signif_dig) ~ \"3\",  signif(AVAL, signif_dig) >= signif(6*ANRHI, signif_dig) ~ \"2\",  signif(AVAL, signif_dig) >= signif(3*ANRHI, signif_dig) ~ \"1\",  signif(AVAL, signif_dig) < signif(3*ANRHI, signif_dig) ~ \"0\"  )","case_when(  is.na(AVAL) ~ NA_character_,  !is.na(ANRHI) & signif(AVAL, signif_dig) >=  signif(3.5*ANRHI, signif_dig) ~ \"4\",  !is.na(BASE) & signif(AVAL, signif_dig) >=  signif(2*BASE, signif_dig) ~ \"4\",  !is.na(ANRHI) & signif(AVAL, signif_dig) >  signif(1.8*ANRHI, signif_dig) ~ \"3\",  !is.na(BASE) & signif(AVAL, signif_dig) >= signif(1.5*BASE, signif_dig) ~ \"3\",  !is.na(ANRHI) & signif(AVAL, signif_dig) > signif(1.3*ANRHI, signif_dig) ~ \"2\",  !is.na(BASE) & signif(AVAL, signif_dig) >= signif(1.3*BASE, signif_dig) ~ \"2\",  is.na(ANRHI) ~ NA_character_,  signif(AVAL, signif_dig) >= signif(1.1*ANRHI, signif_dig) ~ \"1\",  signif(AVAL, signif_dig) < signif(1.1*ANRHI, signif_dig) ~ \"0\"  )","case_when(  is.na(AVAL) ~ NA_character_,  signif(AVAL, signif_dig) >= 27.75 ~ \"4\",  signif(AVAL, signif_dig) >= 13.89 ~ \"3\",  signif(AVAL, signif_dig) >= 6.95 ~ \"2\",  signif(AVAL, signif_dig) >= 6.11 ~ \"1\",  signif(AVAL, signif_dig) < 6.11 ~ \"0\"  )","case_when(  is.na(AVAL) ~ NA_character_,  signif(AVAL, signif_dig) >= 27.75 ~ \"4\",  signif(AVAL, signif_dig) >= 13.89 ~ \"3\",  signif(AVAL, signif_dig) >= 8.89 ~ \"2\",  signif(AVAL, signif_dig) >= 6.44 ~ \"1\",  signif(AVAL, signif_dig) < 6.44 ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(BRTHDT) | is.na(LBDT) ~ NA_character_,  signif(AVAL, signif_dig) < 1.67 ~ \"4\",  signif(AVAL, signif_dig) < 2.22 ~ \"3\",  signif(AVAL, signif_dig) < 3.05 ~ \"2\",  signif(AVAL, signif_dig) < 3.55 ~ \"1\",  signif(AVAL, signif_dig) >= 3.55 ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(BRTHDT) | is.na(LBDT) ~ NA_character_,  signif(AVAL, signif_dig) < 1.67 ~ \"4\",  signif(AVAL, signif_dig) < 2.22 ~ \"3\",  signif(AVAL, signif_dig) < 2.78 ~ \"2\",  signif(AVAL, signif_dig) < 3 ~ \"1\",  signif(AVAL, signif_dig) >= 3 ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(ANRHI) ~ NA_character_,  signif(AVAL, signif_dig) >= signif(2*ANRHI, signif_dig) ~ \"2\",  signif(AVAL, signif_dig) >= signif(ANRHI, signif_dig) ~ \"1\",  signif(AVAL, signif_dig) < signif(ANRHI, signif_dig) ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(ANRHI) ~ NA_character_,  signif(AVAL, signif_dig) >=  signif(5*ANRHI, signif_dig) ~ \"4\",  signif(AVAL, signif_dig) >=  signif(3*ANRHI, signif_dig) ~ \"3\",  signif(AVAL, signif_dig) >= signif(1.5*ANRHI, signif_dig) ~ \"2\",  signif(AVAL, signif_dig) >= signif(1.1*ANRHI, signif_dig) ~ \"1\",  signif(AVAL, signif_dig) < signif(1.1*ANRHI, signif_dig) ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(BRTHDT) | is.na(LBDT) ~ NA_character_,  signif(AVAL, signif_dig) >= 7.77 ~ \"3\",  signif(AVAL, signif_dig) >= 6.19 ~ \"2\",  signif(AVAL, signif_dig) >= 5.18 ~ \"1\",  signif(AVAL, signif_dig) < 5.18 ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(BRTHDT) | is.na(LBDT) ~ NA_character_,  signif(AVAL, signif_dig) >= 7.77 ~ \"3\",  signif(AVAL, signif_dig) >= 5.15 ~ \"2\",  signif(AVAL, signif_dig) >= 4.4 ~ \"1\",  signif(AVAL, signif_dig) < 4.4 ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(BRTHDT) | is.na(LBDT) ~ NA_character_,  signif(AVAL, signif_dig) >= 4.9 ~ \"3\",  signif(AVAL, signif_dig) >= 4.12 ~ \"2\",  signif(AVAL, signif_dig) >= 3.37 ~ \"1\",  signif(AVAL, signif_dig) < 3.37 ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(BRTHDT) | is.na(LBDT) ~ NA_character_,  signif(AVAL, signif_dig) >= 4.9 ~ \"3\",  signif(AVAL, signif_dig) >= 3.34 ~ \"2\",  signif(AVAL, signif_dig) >= 2.85 ~ \"1\",  signif(AVAL, signif_dig) < 2.85 ~ \"0\"  )","NA_character_","case_when(  is.na(AVAL) ~ NA_character_,  signif(AVAL, signif_dig) > 11.4 ~ \"4\",  signif(AVAL, signif_dig) > 5.7 ~ \"3\",  signif(AVAL, signif_dig) > 3.42 ~ \"2\",  signif(AVAL, signif_dig) >= 1.71 ~ \"1\",  signif(AVAL, signif_dig) < 1.71 ~ \"0\"  )","case_when(  is.na(AVAL) ~ NA_character_,  signif(AVAL, signif_dig) < 0.3 ~ \"4\",  signif(AVAL, signif_dig) < 0.45 ~ \"3\",  signif(AVAL, signif_dig) < 0.6 ~ \"2\",  signif(AVAL, signif_dig) < 0.7 ~ \"1\",  signif(AVAL, signif_dig) >= 0.7 ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(BRTHDT) | is.na(LBDT) ~ NA_character_,  signif(AVAL, signif_dig) < 0.32 ~ \"4\",  signif(AVAL, signif_dig) < 0.45 ~ \"3\",  signif(AVAL, signif_dig) < 0.65 ~ \"2\",  is.na(ANRLO) ~ NA_character_,  signif(AVAL, signif_dig) < signif(ANRLO, signif_dig) ~ \"1\",  signif(AVAL, signif_dig) >= signif(ANRLO, signif_dig) ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(BRTHDT) | is.na(LBDT) ~ NA_character_,  signif(AVAL, signif_dig) < 0.48 ~ \"4\",  signif(AVAL, signif_dig) < 0.81 ~ \"3\",  signif(AVAL, signif_dig) < 0.97 ~ \"2\",  signif(AVAL, signif_dig) < 1.13 ~ \"1\",  signif(AVAL, signif_dig) >= 1.13 ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(BRTHDT) | is.na(LBDT) ~ NA_character_,  signif(AVAL, signif_dig) < 0.48 ~ \"4\",  signif(AVAL, signif_dig) < 0.81 ~ \"3\",  signif(AVAL, signif_dig) < 1.13 ~ \"2\",  signif(AVAL, signif_dig) < 1.45 ~ \"1\",  signif(AVAL, signif_dig) >= 1.45 ~ \"0\"  )","case_when(  is.na(AVAL) ~ NA_character_,  signif(AVAL, signif_dig) >= 7 ~ \"4\",  signif(AVAL, signif_dig) >= 6.5 ~ \"3\",  signif(AVAL, signif_dig) >= 6 ~ \"2\",  signif(AVAL, signif_dig) >= 5.6 ~ \"1\",  signif(AVAL, signif_dig) < 5.6 ~ \"0\"  )","case_when(  is.na(AVAL) ~ NA_character_,  signif(AVAL, signif_dig) < 2 ~ \"4\",  signif(AVAL, signif_dig) < 2.5 ~ \"3\",  signif(AVAL, signif_dig) < 3 ~ \"2\",  signif(AVAL, signif_dig) < 3.4 ~ \"1\",  signif(AVAL, signif_dig) >= 3.4 ~ \"0\"  )","case_when(  is.na(AVAL) ~ NA_character_,  signif(AVAL, signif_dig) >= 160 ~ \"4\",  signif(AVAL, signif_dig) >= 154 ~ \"3\",  signif(AVAL, signif_dig) >= 150 ~ \"2\",  signif(AVAL, signif_dig) >= 146 ~ \"1\",  signif(AVAL, signif_dig) < 146 ~ \"0\"  )","case_when(  is.na(AVAL) ~ NA_character_,  signif(AVAL, signif_dig) <= 120 ~ \"4\",  signif(AVAL, signif_dig) < 125 ~ \"3\",  signif(AVAL, signif_dig) < 130 ~ \"2\",  signif(AVAL, signif_dig) < 135 ~ \"1\",  signif(AVAL, signif_dig) >= 135 ~ \"0\"  )","case_when(  is.na(AVAL) ~ NA_character_,  signif(AVAL, signif_dig) >= 890 ~ \"4\",  signif(AVAL, signif_dig) >= 710 ~ \"3\",  signif(AVAL, signif_dig) >= 590 ~ \"2\",  signif(AVAL, signif_dig) >= 450 ~ \"1\",  signif(AVAL, signif_dig) < 450 ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(BRTHDT) | is.na(LBDT) ~ NA_character_,  signif(AVAL, signif_dig) < 0.1 ~ \"4\",  signif(AVAL, signif_dig) < 0.2 ~ \"3\",  signif(AVAL, signif_dig) < 0.3 ~ \"2\",  signif(AVAL, signif_dig) < 0.4 ~ \"1\",  signif(AVAL, signif_dig) >= 0.4 ~ \"0\"  )","NA_character_","case_when(  is.na(AVAL) | is.na(BRTHDT) | is.na(LBDT) ~ NA_character_,  signif(AVAL, signif_dig) < 0.35 ~ \"4\",  signif(AVAL, signif_dig) < 0.5 ~ \"3\",  signif(AVAL, signif_dig) < 0.6 ~ \"2\",  signif(AVAL, signif_dig) < 0.65 ~ \"1\",  signif(AVAL, signif_dig) >= 0.65 ~ \"0\"  )","NA_character_","case_when(  is.na(AVAL) | is.na(BRTHDT) | is.na(LBDT) ~ NA_character_,  signif(AVAL, signif_dig) < 0.4 ~ \"4\",  signif(AVAL, signif_dig) < 0.6 ~ \"3\",  signif(AVAL, signif_dig) < 0.8 ~ \"2\",  signif(AVAL, signif_dig) <= 1 ~ \"1\",  signif(AVAL, signif_dig) > 1 ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(BRTHDT) | is.na(LBDT) ~ NA_character_,  signif(AVAL, signif_dig) < 0.75 ~ \"4\",  signif(AVAL, signif_dig) < 1 ~ \"3\",  signif(AVAL, signif_dig) < 1.25 ~ \"2\",  signif(AVAL, signif_dig) <= 1.5 ~ \"1\",  signif(AVAL, signif_dig) > 1.5 ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(BRTHDT) | is.na(LBDT) ~ NA_character_,  signif(AVAL, signif_dig) < 1.5 ~ \"4\",  signif(AVAL, signif_dig) < 3 ~ \"3\",  signif(AVAL, signif_dig) < 4 ~ \"2\",  signif(AVAL, signif_dig) <= 5 ~ \"1\",  signif(AVAL, signif_dig) > 5 ~ \"0\"  )","case_when(  is.na(AVAL) ~ NA_character_,  signif(AVAL, signif_dig) <  0.5 ~ \"4\",  is.na(ANRLO) ~ NA_character_,  signif(AVAL, signif_dig) <  signif(0.25*ANRLO, signif_dig) ~ \"4\",  signif(AVAL, signif_dig) < 0.75 ~ \"3\",  signif(AVAL, signif_dig) <  signif(0.5*ANRLO, signif_dig) ~ \"3\",  signif(AVAL, signif_dig) <  1 ~ \"2\",  signif(AVAL, signif_dig) <  signif(0.75*ANRLO, signif_dig) ~ \"2\",  signif(AVAL, signif_dig) <  2 ~ \"1\",  signif(AVAL, signif_dig) <  signif(ANRLO, signif_dig) ~ \"1\",  signif(AVAL, signif_dig) >= signif(ANRLO, signif_dig) ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(SEX) | is.na(BRTHDT) | is.na(LBDT) ~ NA_character_,  signif(AVAL, signif_dig) < 70 ~ \"4\",  signif(AVAL, signif_dig) < 90 ~ \"3\",  signif(AVAL, signif_dig) < 100 ~ \"2\",  signif(AVAL, signif_dig) <= 109 ~ \"1\",  signif(AVAL, signif_dig) > 109 ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(SEX)  | is.na(BRTHDT) | is.na(LBDT) ~ NA_character_,  signif(AVAL, signif_dig) < 65 ~ \"4\",  signif(AVAL, signif_dig) < 85 ~ \"3\",  signif(AVAL, signif_dig) < 95 ~ \"2\",  signif(AVAL, signif_dig) <= 104 ~ \"1\",  signif(AVAL, signif_dig) > 104 ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(BRTHDT) | is.na(LBDT) ~ NA_character_,  signif(AVAL, signif_dig) < 65 ~ \"4\",  signif(AVAL, signif_dig) < 85 ~ \"3\",  signif(AVAL, signif_dig) < 95 ~ \"2\",  signif(AVAL, signif_dig) <= 104 ~ \"1\",  signif(AVAL, signif_dig) > 104 ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(BRTHDT) | is.na(LBDT) ~ NA_character_,  signif(AVAL, signif_dig) < 60 ~ \"4\",  signif(AVAL, signif_dig) < 70 ~ \"3\",  signif(AVAL, signif_dig) < 85 ~ \"2\",  signif(AVAL, signif_dig) <= 96 ~ \"1\",  signif(AVAL, signif_dig) > 96 ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(BRTHDT) | is.na(LBDT) ~ NA_character_,  signif(AVAL, signif_dig) < 67 ~ \"4\",  signif(AVAL, signif_dig) < 80 ~ \"3\",  signif(AVAL, signif_dig) < 95 ~ \"2\",  signif(AVAL, signif_dig) <= 110 ~ \"1\",  signif(AVAL, signif_dig) > 110 ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(BRTHDT) | is.na(LBDT) ~ NA_character_,  signif(AVAL, signif_dig) < 80 ~ \"4\",  signif(AVAL, signif_dig) < 90 ~ \"3\",  signif(AVAL, signif_dig) < 110 ~ \"2\",  signif(AVAL, signif_dig) <= 130 ~ \"1\",  signif(AVAL, signif_dig) > 130 ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(BRTHDT) | is.na(LBDT) ~ NA_character_,  signif(AVAL, signif_dig) < 90 ~ \"4\",  signif(AVAL, signif_dig) < 100 ~ \"3\",  signif(AVAL, signif_dig) < 130 ~ \"2\",  signif(AVAL, signif_dig) <= 140 ~ \"1\",  signif(AVAL, signif_dig) > 140 ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(ANRHI) ~ NA_character_,  signif(AVAL, signif_dig) >=  signif(3*ANRHI, signif_dig) ~ \"4\",  signif(AVAL, signif_dig) >=  signif(2*ANRHI, signif_dig) ~ \"3\",  signif(AVAL, signif_dig) >= signif(1.5*ANRHI, signif_dig) ~ \"2\",  signif(AVAL, signif_dig) >= signif(1.1*ANRHI, signif_dig) ~ \"1\",  signif(AVAL, signif_dig) < signif(1.1*ANRHI, signif_dig) ~ \"0\"  )","case_when(  is.na(AVAL) ~ NA_character_,  signif(AVAL, signif_dig) >=  20 ~ \"4\",  signif(AVAL, signif_dig) >=  15 ~ \"3\",  signif(AVAL, signif_dig) >= 10 ~ \"2\",  signif(AVAL, signif_dig) >= 5 ~ \"1\",  signif(AVAL, signif_dig) < 5 ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(ANRHI) ~ NA_character_,  signif(AVAL, signif_dig) >=  signif(3*ANRHI, signif_dig) ~ \"4\",  signif(AVAL, signif_dig) >=  signif(2.33*ANRHI, signif_dig) ~ \"3\",  signif(AVAL, signif_dig) >= signif(1.66*ANRHI, signif_dig) ~ \"2\",  signif(AVAL, signif_dig) >= signif(1.1*ANRHI, signif_dig) ~ \"1\",  signif(AVAL, signif_dig) < signif(1.1*ANRHI, signif_dig) ~ \"0\"  )","case_when(  is.na(AVAL) ~ NA_character_,  signif(AVAL, signif_dig) < 25 ~ \"4\",  signif(AVAL, signif_dig) < 50 ~ \"3\",  signif(AVAL, signif_dig) < 100 ~ \"2\",  signif(AVAL, signif_dig) < 125 ~ \"1\",  signif(AVAL, signif_dig) >= 125 ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(ANRHI) ~ NA_character_,  signif(AVAL, signif_dig) >=  signif(3*ANRHI, signif_dig) ~ \"4\",  signif(AVAL, signif_dig) >=  signif(1.5*ANRHI, signif_dig) ~ \"3\",  signif(AVAL, signif_dig) >= signif(1.25*ANRHI, signif_dig) ~ \"2\",  signif(AVAL, signif_dig) >= signif(1.1*ANRHI, signif_dig) ~ \"1\",  signif(AVAL, signif_dig) < signif(1.1*ANRHI, signif_dig) ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(BRTHDT) | is.na(LBDT) ~ NA_character_,  signif(AVAL, signif_dig) < 1 ~ \"4\",  signif(AVAL, signif_dig) < 1.5 ~ \"3\",  signif(AVAL, signif_dig) < 2 ~ \"2\",  signif(AVAL, signif_dig) < 2.5 ~ \"1\",  signif(AVAL, signif_dig) >= 2.5 ~ \"0\"  )","case_when(  is.na(AVAL) | is.na(BRTHDT) | is.na(LBDT) ~ NA_character_,  signif(AVAL, signif_dig) < 2.5 ~ \"4\",  signif(AVAL, signif_dig) < 4 ~ \"3\",  signif(AVAL, signif_dig) < 5.5 ~ \"2\",  signif(AVAL, signif_dig) < 7 ~ \"1\",  signif(AVAL, signif_dig) >= 7 ~ \"0\"  )"]},"columns":[{"id":"TERM","name":"TERM","type":"character"},{"id":"GRADE_CRITERIA_CODE","name":"GRADE_CRITERIA_CODE","type":"character"}],"resizable":true,"defaultPageSize":4,"highlight":true,"bordered":true,"striped":true,"dataKey":"8fa319e59eefe4722d1000fa5630ae3a"},"children":[]},"class":"reactR_markup"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<!-- The first version of this conclusion was generated with ChatGPT. -->
<p>The recent challenges faced by <a href="https://github.com/pharmaverse/admiral">{admiral}</a> in dealing with floating point values shed light on the complexities and nuances of working with these numerical representations. Floating point values, as we’ve seen, are approximations of real numbers and can lead to unexpected issues in mathematical operations, especially when using exact comparators like <code>==</code> and <code>&gt;=</code>. The differences between how these values are stored and computed can result in platform-specific discrepancies and unexpected behavior.</p>
<p>Several potential solutions were explored to address this issue, including rounding, using <code>near()</code> or <code>all.equal()</code> functions, or implementing custom infix operators as seen in the fpCompare package. However, the most elegant and practical solution adopted in <a href="https://github.com/pharmaverse/admiral">{admiral}</a> was to use the <code>signif()</code> function to round values to a specified number of significant digits. This approach allows for reliable and consistent comparisons without adding unnecessary complexity to the code base.</p>
<p>Readers and developers should be vigilant when working with floating point values in their own code or when utilizing <a href="https://github.com/pharmaverse/admiral">{admiral}</a> for their projects. Keep in mind that some floating point values can look like integers at first glance as in the above example of <code>1.1*100</code>. The experience with floating point issues in <a href="https://github.com/pharmaverse/admiral">{admiral}</a> serves as a valuable reminder of the potential pitfalls associated with numerical precision in programming. It’s crucial to exercise caution when performing comparisons with floating point numbers as small discrepancies can have significant downstream implications. When writing your own comparisons consider the following best practices:</p>
<ol type="1">
<li><p><strong>Avoid Exact Comparisons:</strong> As highlighted earlier, using exact comparators like == or &gt;= when dealing with floating point values can lead to unexpected results. Instead, opt for methods that take into account a tolerance or margin of error, such as the <code>near()</code> function or the <code>signif()</code> approach discussed in this context.</p></li>
<li><p><strong>Platform Independence:</strong> Be aware that floating point representations may differ across various platforms or environments. Always test your code on multiple platforms to ensure consistency in results.</p></li>
<li><p><strong>Documentation and Comments:</strong> When writing code that potentially involves floating point comparisons, it’s advisable to include clear documentation and comments that explain the reasoning behind your approach. This will help others understand and maintain the code effectively.</p></li>
<li><p><strong>Testing and Validation:</strong> Implement thorough testing and validation procedures to verify the correctness of your code, particularly when it relies on floating point comparisons. This should include specific tests that would flag floating point issues on any machine or platform.</p></li>
</ol>
<p>By heeding these precautions and understanding the intricacies of floating point representations, you can mitigate the risk of encountering unexpected behavior in your code. Whether you’re working with <a href="https://github.com/pharmaverse/admiral">{admiral}</a> or any other software, a cautious and informed approach to handling floating point values is essential for maintaining code accuracy and reliability.</p>
<p>** This is a number of the smallest magnitude for which a difference is still detected. I.e. <code>.Machine$double.eps / 1.8</code> is still detectable, while <code>.Machine$double.eps / 2</code> is not detectable any longer (at least on my machine):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb72-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># eps / 1.8 is still detectable:</span></span>
<span id="cb72-2">.Machine<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>double.eps <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.8</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb74-1">.Machine<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>double.eps <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<!--------------- appendices go here ----------------->
</section>
<div class="cell">
<div class="cell-output-display">


</div>
</div>



<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2024-04-08 12:10:41.275058</p>
</div></section><section id="details" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-10-30_floating_point/code_sections.qmd">source code</a>, <a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-10-30_floating_point/renv.lock">R environment</a></p>
</div></section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{thoma2023,
  author = {Thoma, Stefan},
  title = {Floating Point},
  date = {2023-10-30},
  url = {https://pharmaverse.github.io/blog/posts/2023-10-30_floating_point/floating_point.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-thoma2023" class="csl-entry quarto-appendix-citeas">
Thoma, Stefan. 2023. <span>“Floating Point.”</span> October 30, 2023. <a href="https://pharmaverse.github.io/blog/posts/2023-10-30_floating_point/floating_point.html">https://pharmaverse.github.io/blog/posts/2023-10-30_floating_point/floating_point.html</a>.
</div></div></section></div> ]]></description>
  <category>admiral</category>
  <guid>https://pharmaverse.github.io/blog/posts/2023-10-30_floating_point/floating_point.html</guid>
  <pubDate>Mon, 30 Oct 2023 00:00:00 GMT</pubDate>
  <media:content url="https://pharmaverse.github.io/blog/posts/2023-10-30_floating_point/admiral.png" medium="image" type="image/png" height="108" width="144"/>
</item>
<item>
  <title>Reproducing the R Submissions Pilot 2 Shiny Application using Rhino</title>
  <dc:creator>Ismael Rodriguez</dc:creator>
  <dc:creator>Vedha Viyash</dc:creator>
  <dc:creator>André Veríssimo</dc:creator>
  <dc:creator>APPSILON </dc:creator>
  <link>https://pharmaverse.github.io/blog/posts/2023-08-14_rhino_submission_2/rhino_submission_2.html</link>
  <description><![CDATA[ 





<!--------------- typical setup ----------------->
<!--------------- post begins here ----------------->
<p>There is significant momentum in driving the adoption of R packages in the life sciences industries, in particular, the R Consortium Submissions Working Group is dedicated to promoting the use of R for regulatory submissions to the FDA.</p>
<p>The <a href="https://rconsortium.github.io/submissions-wg/">R Consortium Submissions Working Group</a> successfully completed an R-based submission in November 2021 through the eCTD portal (R Submissions Pilot 1). This Pilot was completed on <a href="https://github.com/RConsortium/submissions-wg/blob/main/_Documents/Summary_R_Pilot_Submission2.pdf">March 10, 2022</a> after a successful statistical review and evaluation by the FDA staff.</p>
<p>Moving forward, the <a href="https://rconsortium.github.io/submissions-wg/pilot2.html">Pilot 2</a> aimed to include a Shiny application that the FDA staff could deploy on their own servers. The R Consortium recently announced that <a href="https://www.r-consortium.org/announcement/2023/10/05/shiny-app-successfully-reviewed-by-fda-cder-staff-pilot-2-announcement-2">on September 27, 2023</a>, the R Submissions Working Group successfully completed the follow-up to the Pilot 2 R Shiny-based submission and received a response letter from FDA CDER. This marks the first publicly available submission package that includes a Shiny component. The full FDA response letter can be found <a href="https://github.com/RConsortium/submissions-wg/blob/0f1dc5c30985d413f75d196c2b6caa96231b26ee/_Documents/Summary_R_Pilot2_Submission%2027SEP2023.pdf">here</a>.</p>
<p>The Shiny application that was sent for the Pilot 2 had the goal to display the 4 Tables, Listings and Figures (TLFs) that were sent for the Pilot 1 with basic filtering functionality.&nbsp;</p>
<p>The submission package adhered to the eCTD folder structure and contained 5 deliverables. Among the deliverables was the proprietary R package {pilot2wrappers}, which enables the execution of the Shiny application.&nbsp;</p>
<p>The FDA staff were expected to receive the electronic submission packages in the eCTD format, install and load open-source R packages used as dependencies in the included Shiny application, reconstruct and load the submitted Shiny application, and communicate potential improvements in writing.&nbsp;</p>
<p>In the following stage, the R Consortium’s R Submission Working Group launched Pilot 4, aiming to investigate innovative technologies like Linux containers and web assembly. These technologies are being explored to package a Shiny application into a self-contained unit, streamlining the transfer and execution processes for the application.</p>
<p>In this post, our aim is to outline how we used the Rhino framework to reproduce the Shiny application that was successfully submitted to the FDA for the Pilot 2 project. Additionally, we detail the challenges identified during the process and how we were able to successfully address them by using an open-source package.</p>
<section id="reproducing-the-r-submission-pilot-2-shiny-app-using-rhino" class="level2">
<h2 class="anchored" data-anchor-id="reproducing-the-r-submission-pilot-2-shiny-app-using-rhino">Reproducing the R Submission Pilot 2 Shiny App using Rhino</h2>
<p>While the original Shiny application submitted to the FDA was wrapped using {Golem}, we replicated the application using our in-house developed framework <a href="https://appsilon.github.io/rhino/">Rhino</a>. The main motivation was to provide an example of an R Submission that is not an R package and to identify and solve any issues that may arise from this approach.</p>
<p>Our demo application (<a href="https://go.appsilon.com/fda-clinical-trial">FDA-pilot-app</a>) is accessible on our website, alongside other Shiny and Rhinoverse <a href="https://go.appsilon.com/demo-apps">demonstration apps</a>.</p>
<div class="quarto-video"><video id="video_shortcode_videojs_video1" class="video-js vjs-default-skin vjs-fluid" controls="" preload="auto" data-setup="{}" title=""><source src="https://appsilon.com/static/35215a117d1bc17fac2179f059c3709f/rhino_fda_pilot_r_shiny_app_e-ctd.webm?_=6"></video></div>
<p>The code for FDA-pilot-app is <a href="https://go.appsilon.com/fda-app-github">open-source</a>. You can create your own Rhino-based application by following our <a href="https://go.appsilon.com/rhino-tutorial-github">tutorial</a> and viewing our workshop, which is available on <a href="https://go.appsilon.com/rhino-workshop-youtube">YouTube</a>.&nbsp;</p>
</section>
<section id="brief-introduction-to-rhino" class="level2">
<h2 class="anchored" data-anchor-id="brief-introduction-to-rhino">Brief Introduction to Rhino</h2>
<p><a href="https://appsilon.com/fda-clinical-trial-submissions-with-r-shiny-rhino/"><img src="https://pharmaverse.github.io/blog/posts/2023-08-14_rhino_submission_2/images/Rhino image-01.png" class="img-fluid" width="145"></a></p>
<p>The <a href="https://appsilon.github.io/rhino/">Rhino framework</a> was developed by Appsilon to create enterprise-level Shiny applications, consistently and efficiently. This framework allows developers to apply the best software engineering practices, modularize code, test it thoroughly, enhance UI aesthetics, and monitor user adoption effectively.</p>
<p>Rhino provides support in 3 main areas:</p>
<ol type="1">
<li><p><strong>Clear Code</strong>: scalable architecture, modularization based on Box and Shiny modules.</p></li>
<li><p><strong>Quality</strong>: comprehensive testing such as unit tests, E2E tests with Cypress and Shinytest2, logging, monitoring and linting.</p></li>
<li><p><strong>Automation</strong>: project startup, CI with GitHub Actions, dependencies management with {<a href="https://github.com/rstudio/renv">renv</a>}, configuration management with config, Sass and JavaScript bundling with ES6 support via Node.js.</p></li>
</ol>
<p>Rhino is an ideal fit for highly regulated environments such as regulatory submissions or other drug development processes.</p>
<section id="fda-pilot-app-structure" class="level3">
<h3 class="anchored" data-anchor-id="fda-pilot-app-structure">FDA-pilot-app structure</h3>
<p>The structure of this application is available on the <a href="https://github.com/Appsilon/rhino-fda-pilot">github</a> repository. The structure of this Shiny app is the following.</p>
<button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
<p>Click here to expand the FDA-pilot-app structure</p>
</button>
<pre id="collapseExample" class="collapse"><code>.
├── app
│   ├── view
│   │   └── demographic_table.R
|   |   └── km_plot.R
|   |   └── primary_table.R
|   |   └── efficacy_table.R
|   |   └── completion_table.R
│   ├── logic
│   │   └── adam_data.R
│   │   └── eff_modles.R
│   │   └── formatters.R
│   │   └── helpers.R
│   │   └── kmplot_helpers.R
│   │   └── Tplyr_helpers.R
│   ├── data
│   │   └── adam
│   │       └── adadas.xpt
│   │       └── adlbc.xpt
│   │       └── adsl.xpt
│   │       └── adtte.xpt
│   ├── docs
│   │   └── about.md
│   ├── js
│   │   └── index.js
│   ├── static
│   │   └── favicon.ico
│   ├── styles
│   │   └── main.scss
│   └── app.R
├── tests
│   ├── cypress
│   │   └── integration
│   │       └── app.spec.js
│   ├── testthat
│   │
│   └── cypress.json
├── app.R
├── rhino_submission.Rproj
├── dependencies.R
├── renv.lock
├── rhino.yml
└── README.md</code></pre>
</section>
</section>
<section id="efficient-submissions-to-the-fda" class="level2">
<h2 class="anchored" data-anchor-id="efficient-submissions-to-the-fda">Efficient Submissions to the FDA</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pharmaverse.github.io/blog/posts/2023-08-14_rhino_submission_2/images/pkglite logo.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="144"></p>
</figure>
</div>
<p>To comply with the <a href="https://www.fda.gov/files/medical%20devices/published/Tobacco-Electronic-Submission-File-Formats-and-Specifications.pdf">Electronic Submission File Formats and Specifications</a> for the eCTD submission, the programming code should carry a “.txt” extension. In the R Submissions Pilot 3 the group did not use {pkglite} as the FDA clarified that “.zip” and “.r” files are acceptable for submission. In this case, we utilized the {<a href="https://github.com/Merck/pkglite">pkglite</a>} R package to efficiently pack and unpack the FDA-pilot-app. This approach would facilitate the FDA reviewers in setting up the submission on their systems.</p>
<p>This package allows packing R packages to “.txt” files, which are supported for the submission of proprietary packages to the FDA via the eCTD gateway.&nbsp;</p>
<section id="packing-the-fda-pilot-app-into-a-.txt-file" class="level3">
<h3 class="anchored" data-anchor-id="packing-the-fda-pilot-app-into-a-.txt-file">Packing the FDA-pilot-app into a .txt file</h3>
<p>The code below can be used to pack the Shiny application into a .txt file:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">app_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rhinosubmission"</span></span>
<span id="cb1-2">renv_spec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pkglite<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_spec</span>(</span>
<span id="cb1-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"renv"</span>,</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^settings</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.dcf$|^activate</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.R$"</span>,</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">recursive =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb1-6">)</span>
<span id="cb1-7">tests_spec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pkglite<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_tests</span>()</span>
<span id="cb1-8">app_spec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pkglite<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_auto</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"app"</span>)</span>
<span id="cb1-9">root_spec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pkglite<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_spec</span>(</span>
<span id="cb1-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>,</span>
<span id="cb1-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.Rprofile$|^rhino</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.yml$|^renv</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.lock$|^dependencies</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.R$|^config</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.yml$|^app</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.R$|^README</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.md$|</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.Rproj$"</span>,</span>
<span id="cb1-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all_files =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb1-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">recursive =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb1-14">)</span>
<span id="cb1-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Package: "</span>, app_name), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DESCRIPTION"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">append =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb1-16">pkglite<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">collate</span>(</span>
<span id="cb1-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>(),</span>
<span id="cb1-18">  renv_spec,</span>
<span id="cb1-19">  tests_spec,</span>
<span id="cb1-20">  app_spec,</span>
<span id="cb1-21">  root_spec</span>
<span id="cb1-22">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> pkglite<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pack</span>()</span>
<span id="cb1-23"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.remove</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DESCRIPTION"</span>)</span></code></pre></div>
</div>
</section>
<section id="unpacking-the-fda-pilot-app" class="level3">
<h3 class="anchored" data-anchor-id="unpacking-the-fda-pilot-app">Unpacking the FDA-pilot-app</h3>
<p>The packed “.txt” file can be unpacked into a Shiny app by using {pkglite} as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">pkglite<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unpack</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rhinosubmission.txt"</span>)</span></code></pre></div>
</div>
</section>
</section>
<section id="lessons-learned" class="level2">
<h2 class="anchored" data-anchor-id="lessons-learned">Lessons Learned</h2>
<p>Our initial objective was to prove that it would be possible to submit a Shiny application using Rhino through the eCTD gateway. During the rewriting process we identified that this could be done by integrating the open-source {pkglite} package. By following this approach, we concluded that it would be possible to submit a Shiny application through the eCTD gateway. This was also achieved through the successful submission of a package that included a Shiny component in Pilot 2.</p>
<p>Having rewritten the R Submissions Pilot 2 Shiny application using Rhino holds major implications for the adoption of our framework within the life sciences. Apart from being a strong, opinionated framework that improves reproducibility and reliability for Shiny development, using Rhino for regulatory submissions could improve the flexibility and speed in the clinical reporting pipeline. This would accelerate the adoption of R/Shiny for submissions to the FDA or other regulatory agencies.&nbsp;</p>
</section>
<section id="rhino-for-life-sciences" class="level1">
<h1>Rhino for Life Sciences</h1>
<p>Rhino, a powerful framework built on R and Shiny, facilitates the development of FDA-compliant applications in the life sciences. With its comprehensive toolset, Rhino simplifies the development process by offering secure data management, audit trails, version control, and robust validation capabilities. These features ensure that applications meet the rigorous requirements of regulatory agencies.</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<p>Zhao, Y., Xiao, N., Anderson, K., &amp; Zhang, Y. (2023). Electronic common technical document submission with analysis using R. Clinical Trials, 20(1), 89--92. https://doi.org/10.1177/17407745221123244</p>
<!--------------- appendices go here ----------------->
<div class="cell">
<div class="cell-output-display">


</div>
</div>


</section>

<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2024-04-08 12:11:13.968753</p>
</div></section><section id="details" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-08-14_rhino_submission_2/blanks_and_na.qmd">source code</a>, <a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-08-14_rhino_submission_2/renv.lock">R environment</a></p>
</div></section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{rodriguez2023,
  author = {Rodriguez, Ismael and Viyash, Vedha and Veríssimo, André and
    , APPSILON},
  title = {Reproducing the {R} {Submissions} {Pilot} 2 {Shiny}
    {Application} Using {Rhino}},
  date = {2023-10-10},
  url = {https://pharmaverse.github.io/blog/posts/2023-08-14_rhino_submission_2/rhino_submission_2.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-rodriguez2023" class="csl-entry quarto-appendix-citeas">
Rodriguez, Ismael, Vedha Viyash, André Veríssimo, and APPSILON. 2023.
<span>“Reproducing the R Submissions Pilot 2 Shiny Application Using
Rhino.”</span> October 10, 2023. <a href="https://pharmaverse.github.io/blog/posts/2023-08-14_rhino_submission_2/rhino_submission_2.html">https://pharmaverse.github.io/blog/posts/2023-08-14_rhino_submission_2/rhino_submission_2.html</a>.
</div></div></section></div> ]]></description>
  <category>submission</category>
  <category>community</category>
  <guid>https://pharmaverse.github.io/blog/posts/2023-08-14_rhino_submission_2/rhino_submission_2.html</guid>
  <pubDate>Tue, 10 Oct 2023 00:00:00 GMT</pubDate>
  <media:content url="https://pharmaverse.github.io/blog/posts/2023-08-14_rhino_submission_2/Rhino_LS.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Date/Time Functions and Imputation in {admiral}</title>
  <dc:creator>Edoardo Mancini</dc:creator>
  <link>https://pharmaverse.github.io/blog/posts/2023-09-26_date_functions_and_imputation/date_functions_and_imputation.html</link>
  <description><![CDATA[ 





<!--------------- typical setup ----------------->
<!--------------- post begins here ----------------->
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Date and time is collected in SDTM as character values using the extended <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a> format <code>yyyy-dd-mmThh:mm:ss</code>. This universal format allows missing parts date or time - e.g.&nbsp;the string<code>"2019-10"</code> represents a date where the day and the time are unknown. In contrast, ADaM timing variables like <code>ADTM</code> (Analysis Datetime) or <code>ADY</code> (Analysis Relative Day) are numeric variables, which can be derived only if the date or datetime is complete.</p>
<p>Most ADaM programmers have, at one point or another, encountered situations where missing dates, unexpected formats or confusing imputation functions rendered derivations of timing variables frustrating and time consuming. <code>{admiral}</code> aims to mitigate this (where possible!) by providing functions which automatically derive date/datetime variables for you, and fill in missing date or time parts according to well-defined imputation rules.</p>
<p>In this article, we first examine the arsenal of functions provided by<code>{admiral}</code> to aid in datetime imputation and timing variable derivation. We then observe everything in action through a number of selected typical examples.</p>
</section>
<section id="datedatetime-derivation-and-imputation-functions" class="level1">
<h1>Date/Datetime Derivation and Imputation Functions</h1>
<p><code>{admiral}</code> provides the following functions for date/datetime imputation:</p>
<ul>
<li>Derivations for adding variables
<ul>
<li><a href="https://pharmaverse.github.io/admiral/reference/derive_vars_dt.html">derive_vars_dt()</a>: Adds a date variable and a date imputation flag variable (optional) based on a –DTC variable and imputation rules.</li>
<li><a href="https://pharmaverse.github.io/admiral/reference/derive_vars_dtm.html">derive_vars_dtm()</a>: Adds a datetime variable, a date imputation flag variable, and a time imputation flag variable (both optional) based on a –DTC variable and imputation rules.</li>
</ul></li>
<li>Computation functions
<ul>
<li><a href="https://pharmaverse.github.io/admiral/reference/impute_dtc_dtm.html">impute_dtc_dtm()</a>: Returns a complete ISO 8601 datetime or <code>NA</code> based on a partial ISO 8601 datetime and imputation rules.</li>
<li><a href="https://pharmaverse.github.io/admiral/reference/impute_dtc_dt.html">impute_dtc_dt()</a>: Returns a complete ISO 8601 date (without time) or <code>NA</code> based on a partial ISO 8601 date(time) and imputation rules.</li>
<li><a href="https://pharmaverse.github.io/admiral/reference/convert_dtc_to_dt.html">convert_dtc_to_dt()</a>: Returns a date if the input ISO 8601 date is complete. Otherwise, <code>NA</code> is returned.</li>
<li><a href="https://pharmaverse.github.io/admiral/reference/convert_dtc_to_dtm.html">convert_dtc_to_dtm()</a>: Returns a datetime if the input ISO 8601 date is complete (with missing time replaced by <code>"00:00:00"</code> as default). Otherwise, NA is returned.</li>
<li><a href="https://pharmaverse.github.io/admiral/reference/compute_dtf.html">compute_dtf()</a>: Returns the date imputation flag.</li>
<li><a href="https://pharmaverse.github.io/admiral/reference/compute_tmf.html">compute_tmf()</a>: Returns the time imputation flag.</li>
</ul></li>
</ul>
<p>From the point of view of a typical ADaM programmer, the functions <code>impute_*</code>, <code>convert_*</code> and <code>compute_*</code> above can be viewed as utilities for treating dates and/or imputation within any custom code. In contrast, their <code>derive_*</code> find their use in directly deriving new timing variables and/or carrying out imputation at an ADaM dataset scale.</p>
<p>For a detailed look at the Imputation rules applied by these <code>{admiral}</code> functions, please visit <a href="https://pharmaverse.github.io/admiral/articles/imputation.html#imputation-rules">this vignette</a> on the documentation website.</p>
</section>
<section id="simple-examples-with-vectors" class="level1">
<h1>Simple Examples with Vectors</h1>
<p>In the examples below, one can observe how some members of the class of utilities <code>impute_*()</code> and <code>convert_*()</code> can be employed to do the date-related heavy lifting.</p>
<section id="imputing-a-partial-date-portion" class="level2">
<h2 class="anchored" data-anchor-id="imputing-a-partial-date-portion">Imputing a Partial Date Portion</h2>
<p>It is easy impute dates to the first day/month if they are partial just by using the <code>highest_imputation</code> argument:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(admiral)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">warn.conflicts =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb1-5"></span>
<span id="cb1-6">dates <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb1-7">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-07-18T15:25:40"</span>,</span>
<span id="cb1-8">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-07-18T15:25"</span>,</span>
<span id="cb1-9">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-07-18T15"</span>,</span>
<span id="cb1-10">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-07-18"</span>,</span>
<span id="cb1-11">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-02"</span>,</span>
<span id="cb1-12">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019"</span>,</span>
<span id="cb1-13">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019"</span>,</span>
<span id="cb1-14">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019---07"</span>,</span>
<span id="cb1-15">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb1-16">)</span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">impute_dtc_dt</span>(</span>
<span id="cb1-19">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dtc =</span> dates,</span>
<span id="cb1-20">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">highest_imputation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M"</span></span>
<span id="cb1-21">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2019-07-18" "2019-07-18" "2019-07-18" "2019-07-18" "2019-02-01"
[6] "2019-01-01" "2019-01-01" "2019-01-01" NA          </code></pre>
</div>
</div>
<p>A simple modification using <code>date_imputation = "mid"</code> or <code>date_imputation = "last"</code> or enables the imputation to be made using the middle or last day/month instead:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Impute to last day/month if date is partial</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">impute_dtc_dt</span>(</span>
<span id="cb3-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dtc =</span> dates,</span>
<span id="cb3-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">highest_imputation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M"</span>,</span>
<span id="cb3-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date_imputation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"last"</span>,</span>
<span id="cb3-6">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2019-07-18" "2019-07-18" "2019-07-18" "2019-07-18" "2019-02-28"
[6] "2019-12-31" "2019-12-31" "2019-12-31" NA          </code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Impute to mid day/month if date is partial</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">impute_dtc_dt</span>(</span>
<span id="cb5-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dtc =</span> dates,</span>
<span id="cb5-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">highest_imputation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M"</span>,</span>
<span id="cb5-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date_imputation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mid"</span></span>
<span id="cb5-6">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2019-07-18" "2019-07-18" "2019-07-18" "2019-07-18" "2019-02-15"
[6] "2019-06-30" "2019-06-30" "2019-06-30" NA          </code></pre>
</div>
</div>
<p>But what if there exist minimum dates that the imputed date cannot exceed? Here, the <code>min_date</code> argument comes to the rescue:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">impute_dtc_dt</span>(</span>
<span id="cb7-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2020-12"</span>,</span>
<span id="cb7-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min_dates =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb7-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2020-12-06"</span>),</span>
<span id="cb7-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2020-11-11"</span>)</span>
<span id="cb7-6">  ),</span>
<span id="cb7-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">highest_imputation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M"</span></span>
<span id="cb7-8">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2020-12-06"</code></pre>
</div>
</div>
</section>
<section id="computing-date-imputation-flags" class="level2">
<h2 class="anchored" data-anchor-id="computing-date-imputation-flags">Computing Date Imputation Flags</h2>
<p>When it comes to carrying out an imputation, the twin task is to flag the type of imputation that was executed. Here, functions like <code>compute_dtf()</code> make this straightforward. For this function, all that needs to be done is to pass a date character date to the <code>dtc</code> argument, and the resulting imputed date to the <code>dt</code> argument. This will then return the right date imputation flag - see the examples below for some possible behaviors:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compute_dtf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dtc =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-07"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dt =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-07-18"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "D"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compute_dtf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dtc =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dt =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-07-18"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "M"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compute_dtf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dtc =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--06-01T00:00"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dt =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-06-01"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Y"</code></pre>
</div>
</div>
</section>
</section>
<section id="action-examples" class="level1">
<h1>Action Examples</h1>
<p>The <code>derive_*()</code> functions are essentially wrappers around the aforementioned <code>impute_*()</code> and <code>compute_*()</code> functions. In the following section, we explore examples where ADaM variables can be derived using this class of functions.</p>
<section id="creating-an-imputed-datetime-and-date-variable-and-imputation-flag-variables" class="level2">
<h2 class="anchored" data-anchor-id="creating-an-imputed-datetime-and-date-variable-and-imputation-flag-variables">Creating an Imputed Datetime and Date Variable and Imputation Flag Variables</h2>
<p>As described previously, <code>derive_vars_dtm()</code> derives an imputed datetime variable and the corresponding date and time imputation flags. The imputed date variable can then be derived by using <code>derive_vars_dtm_to_dt()</code>. It is not necessary and advisable to perform the imputation for the date variable if it was already done for the datetime variable. CDISC considers the datetime and the date variable as two representations of the same date. Thus the imputation must be the same and the imputation flags are valid for both the datetime and the date variable.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">ae <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb15-2">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>AESTDTC,</span>
<span id="cb15-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-08-09T12:34:56"</span>,</span>
<span id="cb15-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-04-12"</span>,</span>
<span id="cb15-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2010-09"</span>,</span>
<span id="cb15-6">  <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span></span>
<span id="cb15-7">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb15-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">derive_vars_dtm</span>(</span>
<span id="cb15-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dtc =</span> AESTDTC,</span>
<span id="cb15-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_vars_prefix =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AST"</span>,</span>
<span id="cb15-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">highest_imputation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M"</span>,</span>
<span id="cb15-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date_imputation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first"</span>,</span>
<span id="cb15-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time_imputation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first"</span></span>
<span id="cb15-14">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb15-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">derive_vars_dtm_to_dt</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(ASTDTM))</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: left;">AESTDTC</th>
<th style="text-align: left;">ASTDTM</th>
<th style="text-align: left;">ASTDTF</th>
<th style="text-align: left;">ASTTMF</th>
<th style="text-align: left;">ASTDT</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">2019-08-09T12:34:56</td>
<td style="text-align: left;">2019-08-09 12:34:56</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">2019-08-09</td>
</tr>
<tr class="even">
<td style="text-align: left;">2019-04-12</td>
<td style="text-align: left;">2019-04-12 00:00:00</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">H</td>
<td style="text-align: left;">2019-04-12</td>
</tr>
<tr class="odd">
<td style="text-align: left;">2010-09</td>
<td style="text-align: left;">2010-09-01 00:00:00</td>
<td style="text-align: left;">D</td>
<td style="text-align: left;">H</td>
<td style="text-align: left;">2010-09-01</td>
</tr>
<tr class="even">
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="creating-an-imputed-date-variable-and-imputation-flag-variable" class="level2">
<h2 class="anchored" data-anchor-id="creating-an-imputed-date-variable-and-imputation-flag-variable">Creating an Imputed Date Variable and Imputation Flag Variable</h2>
<p>If an imputed date variable without a corresponding datetime variable is required, it can be derived by the <code>derive_vars_dt()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">ae <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb16-2">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>AESTDTC,</span>
<span id="cb16-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-08-09T12:34:56"</span>,</span>
<span id="cb16-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-04-12"</span>,</span>
<span id="cb16-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2010-09"</span>,</span>
<span id="cb16-6">  <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span></span>
<span id="cb16-7">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">derive_vars_dt</span>(</span>
<span id="cb16-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dtc =</span> AESTDTC,</span>
<span id="cb16-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_vars_prefix =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AST"</span>,</span>
<span id="cb16-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">highest_imputation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M"</span>,</span>
<span id="cb16-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date_imputation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first"</span></span>
<span id="cb16-13">  )</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: left;">AESTDTC</th>
<th style="text-align: left;">ASTDT</th>
<th style="text-align: left;">ASTDTF</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">2019-08-09T12:34:56</td>
<td style="text-align: left;">2019-08-09</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="even">
<td style="text-align: left;">2019-04-12</td>
<td style="text-align: left;">2019-04-12</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="odd">
<td style="text-align: left;">2010-09</td>
<td style="text-align: left;">2010-09-01</td>
<td style="text-align: left;">D</td>
</tr>
<tr class="even">
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="imputing-time-without-imputing-date" class="level2">
<h2 class="anchored" data-anchor-id="imputing-time-without-imputing-date">Imputing Time Without Imputing Date</h2>
<p>If the time should be imputed but not the date, the <code>highest_imputation</code> argument should be set to <code>"h"</code>. This results in <code>NA</code> if the date is partial. As no date is imputed the date imputation flag is not created.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">ae <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb17-2">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>AESTDTC,</span>
<span id="cb17-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-08-09T12:34:56"</span>,</span>
<span id="cb17-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-04-12"</span>,</span>
<span id="cb17-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2010-09"</span>,</span>
<span id="cb17-6">  <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span></span>
<span id="cb17-7">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb17-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">derive_vars_dtm</span>(</span>
<span id="cb17-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dtc =</span> AESTDTC,</span>
<span id="cb17-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_vars_prefix =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AST"</span>,</span>
<span id="cb17-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">highest_imputation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"h"</span>,</span>
<span id="cb17-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time_imputation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first"</span></span>
<span id="cb17-13">  )</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: left;">AESTDTC</th>
<th style="text-align: left;">ASTDTM</th>
<th style="text-align: left;">ASTTMF</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">2019-08-09T12:34:56</td>
<td style="text-align: left;">2019-08-09 12:34:56</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="even">
<td style="text-align: left;">2019-04-12</td>
<td style="text-align: left;">2019-04-12 00:00:00</td>
<td style="text-align: left;">H</td>
</tr>
<tr class="odd">
<td style="text-align: left;">2010-09</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="even">
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="avoiding-imputed-dates-before-a-particular-date" class="level2">
<h2 class="anchored" data-anchor-id="avoiding-imputed-dates-before-a-particular-date">Avoiding Imputed Dates Before a Particular Date</h2>
<p>Usually an adverse event start date is imputed as the earliest date of all possible dates when filling the missing parts. The result may be a date before treatment start date. This is not desirable because the adverse event would not be considered as treatment emergent and excluded from the adverse event summaries. This can be avoided by specifying the treatment start date variable (<code>TRTSDTM</code>) for the <code>min_dates</code> argument.</p>
<p>Importantly, <code>TRTSDTM</code> is used as imputed date only if the non missing date and time parts of <code>AESTDTC</code> coincide with those of <code>TRTSDTM</code>. Therefore <code>2019-10</code> is not imputed as <code>2019-11-11 12:34:56</code>. This ensures that collected information is not changed by the imputation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">ae <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb18-2">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>AESTDTC,              <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>TRTSDTM,</span>
<span id="cb18-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-08-09T12:34:56"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd_hms</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-11-11T12:34:56"</span>),</span>
<span id="cb18-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-10"</span>,             <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd_hms</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-11-11T12:34:56"</span>),</span>
<span id="cb18-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-11"</span>,             <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd_hms</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-11-11T12:34:56"</span>),</span>
<span id="cb18-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-12-04"</span>,          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd_hms</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-11-11T12:34:56"</span>)</span>
<span id="cb18-7">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb18-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">derive_vars_dtm</span>(</span>
<span id="cb18-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dtc =</span> AESTDTC,</span>
<span id="cb18-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_vars_prefix =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AST"</span>,</span>
<span id="cb18-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">highest_imputation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M"</span>,</span>
<span id="cb18-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date_imputation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first"</span>,</span>
<span id="cb18-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time_imputation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first"</span>,</span>
<span id="cb18-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min_dates =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(TRTSDTM)</span>
<span id="cb18-15">  )</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<colgroup>
<col style="width: 27%">
<col style="width: 27%">
<col style="width: 27%">
<col style="width: 9%">
<col style="width: 9%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">AESTDTC</th>
<th style="text-align: left;">TRTSDTM</th>
<th style="text-align: left;">ASTDTM</th>
<th style="text-align: left;">ASTDTF</th>
<th style="text-align: left;">ASTTMF</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">2019-08-09T12:34:56</td>
<td style="text-align: left;">2019-11-11 12:34:56</td>
<td style="text-align: left;">2019-08-09 12:34:56</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="even">
<td style="text-align: left;">2019-10</td>
<td style="text-align: left;">2019-11-11 12:34:56</td>
<td style="text-align: left;">2019-10-01 00:00:00</td>
<td style="text-align: left;">D</td>
<td style="text-align: left;">H</td>
</tr>
<tr class="odd">
<td style="text-align: left;">2019-11</td>
<td style="text-align: left;">2019-11-11 12:34:56</td>
<td style="text-align: left;">2019-11-11 12:34:56</td>
<td style="text-align: left;">D</td>
<td style="text-align: left;">H</td>
</tr>
<tr class="even">
<td style="text-align: left;">2019-12-04</td>
<td style="text-align: left;">2019-11-11 12:34:56</td>
<td style="text-align: left;">2019-12-04 00:00:00</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">H</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="avoiding-imputed-dates-after-a-particular-date" class="level2">
<h2 class="anchored" data-anchor-id="avoiding-imputed-dates-after-a-particular-date">Avoiding Imputed Dates After a Particular Date</h2>
<p>If a date is imputed as the latest date of all possible dates when filling the missing parts, it should not result in dates after data cut off or death. This can be achieved by specifying the dates for the <code>max_dates</code> argument.</p>
<p>Importantly, non missing date parts are not changed. Thus <code>2019-12-04</code> is imputed as <code>2019-12-04 23:59:59</code> although it is after the data cut off date. It may make sense to replace it by the data cut off date but this is not part of the imputation. It should be done in a separate data cleaning or data cut off step.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">ae <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb19-2">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>AEENDTC,              <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>DTHDT,            <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>DCUTDT,</span>
<span id="cb19-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-08-09T12:34:56"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-11-11"</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-12-02"</span>),</span>
<span id="cb19-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-11"</span>,             <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-11-11"</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-12-02"</span>),</span>
<span id="cb19-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-12"</span>,             <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-12-02"</span>),</span>
<span id="cb19-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-12-04"</span>,          <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-12-02"</span>)</span>
<span id="cb19-7">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb19-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">derive_vars_dtm</span>(</span>
<span id="cb19-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dtc =</span> AEENDTC,</span>
<span id="cb19-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_vars_prefix =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AEN"</span>,</span>
<span id="cb19-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">highest_imputation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M"</span>,</span>
<span id="cb19-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date_imputation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"last"</span>,</span>
<span id="cb19-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time_imputation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"last"</span>,</span>
<span id="cb19-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_dates =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(DTHDT, DCUTDT)</span>
<span id="cb19-15">  )</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<colgroup>
<col style="width: 26%">
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 26%">
<col style="width: 9%">
<col style="width: 9%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">AEENDTC</th>
<th style="text-align: left;">DTHDT</th>
<th style="text-align: left;">DCUTDT</th>
<th style="text-align: left;">AENDTM</th>
<th style="text-align: left;">AENDTF</th>
<th style="text-align: left;">AENTMF</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">2019-08-09T12:34:56</td>
<td style="text-align: left;">2019-11-11</td>
<td style="text-align: left;">2019-12-02</td>
<td style="text-align: left;">2019-08-09 12:34:56</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="even">
<td style="text-align: left;">2019-11</td>
<td style="text-align: left;">2019-11-11</td>
<td style="text-align: left;">2019-12-02</td>
<td style="text-align: left;">2019-11-11 23:59:59</td>
<td style="text-align: left;">D</td>
<td style="text-align: left;">H</td>
</tr>
<tr class="odd">
<td style="text-align: left;">2019-12</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">2019-12-02</td>
<td style="text-align: left;">2019-12-02 23:59:59</td>
<td style="text-align: left;">D</td>
<td style="text-align: left;">H</td>
</tr>
<tr class="even">
<td style="text-align: left;">2019-12-04</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">2019-12-02</td>
<td style="text-align: left;">2019-12-04 23:59:59</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">H</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="imputation-without-creating-a-new-variable" class="level2">
<h2 class="anchored" data-anchor-id="imputation-without-creating-a-new-variable">Imputation Without Creating a New Variable</h2>
<p>If imputation is required without creating a new variable the <code>convert_dtc_to_dt()</code> function can be called to obtain a vector of imputed dates. It can be used for example here:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">mh <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb20-2">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>MHSTDTC,     <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>TRTSDT,</span>
<span id="cb20-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-04"</span>,    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-04-15"</span>),</span>
<span id="cb20-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-04-01"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-04-15"</span>),</span>
<span id="cb20-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-05"</span>,    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-04-15"</span>),</span>
<span id="cb20-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-06-21"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-04-15"</span>)</span>
<span id="cb20-7">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb20-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(</span>
<span id="cb20-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">convert_dtc_to_dt</span>(</span>
<span id="cb20-10">      MHSTDTC,</span>
<span id="cb20-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">highest_imputation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M"</span>,</span>
<span id="cb20-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date_imputation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first"</span></span>
<span id="cb20-13">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TRTSDT</span>
<span id="cb20-14">  )</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: left;">MHSTDTC</th>
<th style="text-align: left;">TRTSDT</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">2019-04</td>
<td style="text-align: left;">2019-04-15</td>
</tr>
<tr class="even">
<td style="text-align: left;">2019-04-01</td>
<td style="text-align: left;">2019-04-15</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="using-more-than-one-imputation-rule-for-a-variable" class="level2">
<h2 class="anchored" data-anchor-id="using-more-than-one-imputation-rule-for-a-variable">Using More Than One Imputation Rule for a Variable</h2>
<p>Using different imputation rules depending on the observation can be done by using the higher-order function <code>slice_derivation()</code>, which applies a derivation function differently (by varying its arguments) in different subsections of a dataset. For example, consider this Vital Signs case where pre-dose records require a different treatment to other records:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">vs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb21-2">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>VSDTC,                <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>VSTPT,</span>
<span id="cb21-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-08-09T12:34:56"</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,</span>
<span id="cb21-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-10-12"</span>,          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PRE-DOSE"</span>,</span>
<span id="cb21-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-11-10"</span>,          <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,</span>
<span id="cb21-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-12-04"</span>,          <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb21-7">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb21-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_derivation</span>(</span>
<span id="cb21-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">derivation =</span> derive_vars_dtm,</span>
<span id="cb21-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">params</span>(</span>
<span id="cb21-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dtc =</span> VSDTC,</span>
<span id="cb21-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_vars_prefix =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span></span>
<span id="cb21-13">    ),</span>
<span id="cb21-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">derivation_slice</span>(</span>
<span id="cb21-15">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> VSTPT <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PRE-DOSE"</span>,</span>
<span id="cb21-16">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">params</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time_imputation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first"</span>)</span>
<span id="cb21-17">    ),</span>
<span id="cb21-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">derivation_slice</span>(</span>
<span id="cb21-19">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb21-20">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">params</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time_imputation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"last"</span>)</span>
<span id="cb21-21">    )</span>
<span id="cb21-22">  )</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: left;">VSDTC</th>
<th style="text-align: left;">VSTPT</th>
<th style="text-align: left;">ADTM</th>
<th style="text-align: left;">ATMF</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">2019-08-09T12:34:56</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">2019-08-09 12:34:56</td>
<td style="text-align: left;">NA</td>
</tr>
<tr class="even">
<td style="text-align: left;">2019-11-10</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">2019-11-10 23:59:59</td>
<td style="text-align: left;">H</td>
</tr>
<tr class="odd">
<td style="text-align: left;">2019-12-04</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">2019-12-04 23:59:59</td>
<td style="text-align: left;">H</td>
</tr>
<tr class="even">
<td style="text-align: left;">2019-10-12</td>
<td style="text-align: left;">PRE-DOSE</td>
<td style="text-align: left;">2019-10-12 00:00:00</td>
<td style="text-align: left;">H</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Deriving timing variables and carrying out imputations is tricky at the best of times, but hopefully this blog post can shed some light on how make this all easier using the <code>{admiral}</code> package! As <code>{admiral}</code> developers we are always interested in knowing how users are employing the package for their ADaM needs, so if you have any comments or feedback related to this topic, don’t be afraid to leave a comment on our <a href="https://app.slack.com/client/T028PB489D3/C02M8KN8269">Slack channel</a> or on the <a href="https://github.com/pharmaverse/admiral/">Github repository</a>, either as an issue or as a discussion.</p>
<p>For an even more detailed treatment of this topic, users are once again invited to read the corresponding <a href="https://pharmaverse.github.io/admiral/articles/imputation.html">vignette</a> on the documentation website, from which this article was adapted.</p>
<!--------------- appendices go here ----------------->


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{mancini2023,
  author = {Mancini, Edoardo},
  title = {Date/Time {Functions} and {Imputation} in \{Admiral\}},
  date = {2023-09-26},
  url = {https://pharmaverse.github.io/blog/posts/2023-09-26_date_functions_and_imputation/date_functions_and_imputation.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-mancini2023" class="csl-entry quarto-appendix-citeas">
Mancini, Edoardo. 2023. <span>“Date/Time Functions and Imputation in
{Admiral} .”</span> September 26, 2023. <a href="https://pharmaverse.github.io/blog/posts/2023-09-26_date_functions_and_imputation/date_functions_and_imputation.html">https://pharmaverse.github.io/blog/posts/2023-09-26_date_functions_and_imputation/date_functions_and_imputation.html</a>.
</div></div></section></div> ]]></description>
  <category>admiral</category>
  <category>ADaM</category>
  <category>Date/Time</category>
  <guid>https://pharmaverse.github.io/blog/posts/2023-09-26_date_functions_and_imputation/date_functions_and_imputation.html</guid>
  <pubDate>Tue, 26 Sep 2023 00:00:00 GMT</pubDate>
  <media:content url="https://pharmaverse.github.io/blog/posts/2023-09-26_date_functions_and_imputation/admiral.png" medium="image" type="image/png" height="108" width="144"/>
</item>
<item>
  <title>The pharmaverse (hi)story</title>
  <dc:creator>Nicholas Eugenio</dc:creator>
  <link>https://pharmaverse.github.io/blog/posts/2023-10-10_pharmaverse_story/pharmaverse_story.html</link>
  <description><![CDATA[ 





<!--------------- typical setup ----------------->
<!--------------- post begins here ----------------->
<p>Pharmaverse: from motivation to present</p>
<section id="human-history-and-pharmaverse-context" class="level2">
<h2 class="anchored" data-anchor-id="human-history-and-pharmaverse-context">Human history and pharmaverse context</h2>
<p>Since the Australian Aboriginal, the earliest peoples recorded to have inhabited the Earth and who have been in Australia for at least 65,000 to 80,000 years (<a href="https://www.britannica.com/topic/Australian-Aboriginal">Encyclopædia Britannica</a>), human beings live in group. Whether to protect yourself, increase your life expectancy or simply share tasks.</p>
<p>For most aspects of life, it doesn’t make sense to think, act or work alone for two main reasons:</p>
<ol type="1">
<li><p>You will spend more energy and time;</p></li>
<li><p>Someone else may be facing (or have faced) the same situation.</p></li>
</ol>
<p>The English poet John Donne used to say <em>“No man is an island entire of itself; every man is a piece of the continent, a part of the main;”</em>. I can’t disagree with him. And I dare say that Ari Siggaard Knoph (Novo Nordisk), Michael Rimler (GSK), Michael Stackhouse (Atorus), Ross Farrugia (Roche), and Sumesh Kalappurakal (Janssen) can’t disagree with him either. They are the founders of <a href="https://pharmaverse.org/">pharmaverse</a>, members of its Council and kindly shared their memories of how independent companies, in mid-2020, worked together in the creation of a set of packages developed to support the clinical reporting pipeline.</p>
<p>If you are not familiar with this pipeline, the important thing to know is that, in a nutshell, pharmaceutical companies must follow a bunch of standardized procedures and formats (from Clinical Data Interchange Standards Consortium, <a href="https://www.cdisc.org/">CDISC</a>) when submitting clinical results to Health Authorities. The focus is on this: <strong>different</strong> companies seeking the <strong>same</strong> standards for outputs.</p>
<p>Paraphrasing Ross Farrugia (Roche) <em>Breaking boundaries through open-source collaboration</em> presentation in <a href="https://www.youtube.com/watch?v=APMDOS4v9Hk">R/Pharma 2022</a> and thinking of the development of a new drug, we are talking about a “post-competitive” scenario: the drug has already been discovered and the companies should “just” produce and deliver standardized results.</p>
</section>
<section id="clinical-reporting-outputs" class="level2">
<h2 class="anchored" data-anchor-id="clinical-reporting-outputs">Clinical reporting outputs</h2>
<p>Rationally, we can say that companies face the same challenges in these steps of the process. Not so intuitively, we can also say they were working in silos on that before 2018. Just as Isaac Newton and Gottfried W. Leibniz <a href="https://en.wikipedia.org/wiki/History_of_calculus">independently developed the theory of infinitesimal calculus</a>, pharmaceutical companies were independently working on R solutions for this pipeline.</p>
<p>But on August 16 and 17 of the mentioned year above, they gathered at the first edition of <a href="https://rinpharma.com/">R/Pharma conference</a> to discuss R and open-source tooling for drug development (the reasons why open-source is an advantageous approach can be found in this <a href="https://pharmaverse.github.io/blog/posts/2023-07-20_cross_company_dev/cross_industry_dev.html">post</a> written by Stefan Thoma). And according to Isabela Velásquez’s article, <a href="https://posit.co/blog/pharmaverse-packages-for-clinical-reporting-workflows/">Pharmaverse: Packages for clinical reporting workflows</a>, one of the most popular questions in this conference was “Is the package code available or on <a href="https://cran.r-project.org/">CRAN</a>?”.</p>
<p>Well, many of them were. And not necessarily at that date, but just to mention a few: <a href="https://atorus-research.github.io/pharmaRTF/index.html"><em>pharmaRTF</em></a> and <a href="https://atorus-research.github.io/Tplyr/index.html"><em>Tplyr</em></a> from Atorus, <a href="https://merck.github.io/r2rtf/"><em>r2rtf</em></a> from Merck, <a href="https://insightsengineering.github.io/rtables/main/"><em>rtables</em></a> from Roche, etc. The thing is that, overall, there were almost 10000 other packages as well (today, almost 20000). And that took to another two questions:</p>
<ol type="1">
<li><p>With this overwhelming number of packages on CRAN, how to find the ones related to solving “clinical reporting problems”?</p></li>
<li><p>Once the packages were found, how to choose which one to use among those that have the same functional purpose?</p></li>
</ol>
<p>So, again, companies re-started to working in silos to find those answers. But now, in collaborative silos and with common goals: create extremely useful packages to solve pharmaceutical-specific gaps once and solve them well!</p>
</section>
<section id="first-partnerships" class="level2">
<h2 class="anchored" data-anchor-id="first-partnerships">First partnerships</h2>
<p>In 2020, Michael Stackhouse (Atorus) and Michael Rimler (GSK) talked and formed a partnership between their companies to develop a few more packages, including <a href="https://github.com/atorus-research/metacore"><em>metacore</em></a>, to read, store and manipulate metadata for ADaMs/SDTMs in a standardized object; <a href="https://github.com/atorus-research/xportr"><em>xportr</em></a>, to create submission compliant SAS transport files and perform pharma specific dataset level validation checks; and <a href="https://github.com/pharmaverse/logrx"><em>logrx</em></a> (ex-<em>timber</em>), to build log to support reproducibility and traceability of an R script.</p>
<p>Around the same time, Thomas Neitmann (currently at Denali Therapeutics, then at Roche) and Michael Rimler (GSK) discovered that both were working with ADaM in R, so Thomas Neitmann (currently at Denali Therapeutics, then at Roche), Ross Farrugia (Roche) and Michael Rimler (GSK) saw an opportunity there and GSK started their partnership with Roche to build and release <a href="https://github.com/pharmaverse/admiral"><em>admiral</em></a> package.</p>
<p>The idea of working together, the sense of community, and the appetite from organizations built more and more, with incentive and priority established up into the programming heads council.</p>
<p>Janssen had a huge effort in building R capabilities going on as well, by releasing <a href="https://github.com/pharmaverse/tidytlg"><em>tidytlg</em></a> and <a href="https://github.com/pharmaverse/envsetup"><em>envsetup</em></a>), so eventually Michael Rimler (GSK), Michael Stackhouse (Atorus) and Ross Farrugia (Roche) formalized <a href="https://pharmaverse.org/">pharmaverse</a> and formed the council, adding in Sumesh Kalappurakal (Janssen) and Ari Siggaard Knoph (Novo Nordisk) later joined as the fifth council member.</p>
</section>
<section id="release-growth-and-developments" class="level2">
<h2 class="anchored" data-anchor-id="release-growth-and-developments">Release, growth and developments</h2>
<p>At the end of their presentation <a href="https://www.youtube.com/watch?v=NW9qp5QOlIU">“Closing the Gap: Creating an End to End R Package Toolkit for the Clinical Reporting Pipeline.”</a>, in <a href="https://rinpharma.com/event/rinpharma2021/">R/Pharma 2021</a>, Ben Straub (GSK) and Eli Miller (Atorus) welcomed the community to the <a href="https://pharmaverse.org/">pharmaverse</a>, a curated collection of packages developed by various pharmaceutical companies to support open-source clinical workflows.</p>
<p>From the outset, the name <a href="https://pharmaverse.org/">pharmaverse</a> was chosen so that it could be a neutral home, unrelated to any company. Also, it was established as not being a consortium, which means that founders don’t own, fund, or maintain the packages. Some individuals and companies maintain them but often allowing for community contributions and being licensed permissively so that there is always a feeling of community ownership. The focus of <a href="https://pharmaverse.org/">pharmaverse</a> early on, and today, is on inter organization cooperation, to build an environment where, if organizations identify that they have a joint problem that they want to solve, this is the right space to work on and release it.</p>
<p><a href="https://pharmaverse.org/">Pharmaverse</a> has grown a lot, at the time of writing this post we have &gt;25 packages recommended in <a href="https://pharmaverse.org/e2eclinical/">pharmaverse</a>, and this has led to a partnership with <a href="https://phuse.global/About_PHUSE">PHUSE</a> to get support from their organization and platform, and because they are eager to advance and support <a href="https://pharmaverse.org/charter/">pharmaverse mission</a>.</p>
<p>Despite all its structure, it is impossible to say that we have a single solution for each clinical reporting analysis when it comes to <a href="https://pharmaverse.org/">pharmaverse</a>, a single pathway is impractical. Instead, it is necessary to accept viable tools fitting different pathways into <a href="https://pharmaverse.org/">pharmaverse</a> to direct and give people options as to what might work for them. After all, even though we live together as a community, we still have our own unique internal problems.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pharmaverse.github.io/blog/posts/2023-10-10_pharmaverse_story/logos.png" class="img-fluid figure-img"></p>
<figcaption>Sample of pharmaverse packages</figcaption>
</figure>
</div>
<!--------------- appendices go here ----------------->
</section>
<div class="cell">
<div class="cell-output-display">


</div>
</div>



<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2024-04-08 12:11:25.973411</p>
</div></section><section id="details" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-08-30_pharmaverse_story/index.qmd">source code</a>, <a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-08-30_pharmaverse_story/renv.lock">R environment</a></p>
</div></section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{eugenio2023,
  author = {Eugenio, Nicholas},
  title = {The Pharmaverse (Hi)story},
  date = {2023-08-30},
  url = {https://pharmaverse.github.io/blog/posts/2023-10-10_pharmaverse_story/pharmaverse_story.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-eugenio2023" class="csl-entry quarto-appendix-citeas">
Eugenio, Nicholas. 2023. <span>“The Pharmaverse (Hi)story.”</span>
August 30, 2023. <a href="https://pharmaverse.github.io/blog/posts/2023-10-10_pharmaverse_story/pharmaverse_story.html">https://pharmaverse.github.io/blog/posts/2023-10-10_pharmaverse_story/pharmaverse_story.html</a>.
</div></div></section></div> ]]></description>
  <category>community</category>
  <guid>https://pharmaverse.github.io/blog/posts/2023-10-10_pharmaverse_story/pharmaverse_story.html</guid>
  <pubDate>Wed, 30 Aug 2023 00:00:00 GMT</pubDate>
  <media:content url="https://pharmaverse.github.io/blog/posts/2023-10-10_pharmaverse_story/pharmaverse.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Rounding</title>
  <dc:creator>Kangjie Zhang</dc:creator>
  <link>https://pharmaverse.github.io/blog/posts/2023-07-24_rounding/rounding.html</link>
  <description><![CDATA[ 





<!--------------- typical setup ----------------->
<!--------------- post begins here ----------------->
<section id="rounding-methods" class="level2">
<h2 class="anchored" data-anchor-id="rounding-methods">Rounding methods</h2>
<p>Both SAS and base R have the function <code>round()</code>, which rounds the input to the specified number of decimal places. However, they use different approaches when rounding off a 5:</p>
<ul>
<li><p>SAS <code>round()</code> <a href="https://en.wikipedia.org/wiki/Rounding#Rounding_half_up">rounds half up</a>. This is the most common method of rounding.</p></li>
<li><p>base R <code>round()</code> <a href="https://en.m.wikipedia.org/wiki/IEEE_754#Roundings_to_nearest">rounds to the nearest even</a>. Therefore <code>round(0.5)</code> is <code>0</code> and <code>round(-1.5)</code> is <code>-2</code>. Note from the base R round documentation:</p>
<ul>
<li><div>
<blockquote class="blockquote">
<p>this is dependent on OS services and on representation error (since e.g.&nbsp;<code>0.15</code> is not represented exactly, the rounding rule applies to the represented number and not to the printed number, and so <code>round(0.15, 1)</code> could be either <code>0.1</code> or <code>0.2</code>).</p>
</blockquote>
</div></li>
</ul></li>
</ul>
<p>Although base R does not have the option for “round half up”, there are functions available in other R packages (e.g., <code>janitor</code>, <code>tidytlg</code>).</p>
<p>In general, there are many often used rounding methods. In the table below, you can find examples of them applied to the number 1.45.</p>
<table class="table">
<colgroup>
<col style="width: 13%">
<col style="width: 23%">
<col style="width: 23%">
<col style="width: 8%">
<col style="width: 10%">
<col style="width: 17%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">round half up</th>
<th style="text-align: center;">round to even</th>
<th style="text-align: center;">round up</th>
<th style="text-align: center;">round down</th>
<th style="text-align: center;">round towards zero</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Example: 1.45</td>
<td style="text-align: center;"><p>1.5</p>
<p>(round to 1 decimal place)</p></td>
<td style="text-align: center;"><p>1.4</p>
<p>(round to 1 decimal place)</p></td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">1</td>
</tr>
</tbody>
</table>
<p>Here are the corresponding ways to implement these methods in SAS and R.</p>
<table class="table">
<colgroup>
<col style="width: 7%">
<col style="width: 31%">
<col style="width: 13%">
<col style="width: 15%">
<col style="width: 13%">
<col style="width: 15%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">round half up</th>
<th style="text-align: center;">round to even</th>
<th style="text-align: center;">round up</th>
<th style="text-align: center;">round down</th>
<th style="text-align: center;">round towards zero</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">SAS</td>
<td style="text-align: center;"><code>round()</code></td>
<td style="text-align: center;"><code>rounde()</code></td>
<td style="text-align: center;"><code>ceil()</code></td>
<td style="text-align: center;"><code>floor()</code></td>
<td style="text-align: center;"><code>int()</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">R</td>
<td style="text-align: center;"><div style="background-color: yellow">
<p><code>janitor::round_half_up()</code></p>
<div style="background-color: yellow">
<div>
<p><code>tidytlg::roundSAS()</code></p>
</div>
</div>
</div></td>
<td style="text-align: center;"><div>
<p><code>base::round()</code></p>
</div></td>
<td style="text-align: center;"><div>
<p><code>base::ceiling()</code></p>
</div></td>
<td style="text-align: center;"><div>
<p><code>base::floor()</code></p>
</div></td>
<td style="text-align: center;"><div>
<p><code>base::trunc()</code></p>
</div></td>
</tr>
</tbody>
</table>
<p>This table is summarized from links below, where more detailed discussions can be found -</p>
<ul>
<li><p>Two SAS blogs about <a href="https://blogs.sas.com/content/iml/2019/11/11/round-to-even.html">round-to-even</a> and <a href="https://blogs.sas.com/content/iml/2011/10/03/rounding-up-rounding-down.html">rounding-up-rounding-down</a></p></li>
<li><p>R documentation: Base R <a href="https://stat.ethz.ch/R-manual/R-devel/library/base/html/Round.html">Round</a>, <a href="https://sfirke.github.io/janitor/reference/round_half_up.html"><code>janitor::round_half_up()</code></a>, <a href="https://pharmaverse.github.io/tidytlg/main/reference/roundSAS.html"><code>tidytlg::roundSAS()</code></a></p></li>
<li><p><a href="https://psiaims.github.io/CAMIS/">CAMIS</a> (Comparing Analysis Method Implementations in Software): A cross-industry initiative to document discrepant results between software. <a href="https://psiaims.github.io/CAMIS/Comp/r-sas_rounding.html">Rounding</a> is one of the comparisons, and there are much more <a href="https://psiaims.github.io/CAMIS/">on this page</a>!</p></li>
</ul>
</section>
<section id="round-half-up-in-r" class="level2">
<h2 class="anchored" data-anchor-id="round-half-up-in-r">Round half up in R</h2>
<p>The motivation for having a ‘round half up’ function is clear: it’s a widely used rounding method, but there are no such options available in base R.</p>
<p>There are multiple forums that have discussed this topic, and quite a few functions already available. But which ones to choose? Are they safe options?</p>
<p>The first time I needed to round half up in R, I chose the function from a <a href="https://www.lexjansen.com/phuse-us/2020/ct/CT05.pdf">PHUSE paper</a> and applied it to my study. It works fine for a while until I encountered the following precision issue when double programming in R for TLGs made in SAS.</p>
<section id="numerical-precision-issue" class="level3">
<h3 class="anchored" data-anchor-id="numerical-precision-issue">Numerical precision issue</h3>
<p>Example of rounding half up for 2436.845, with 2 decimal places:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a function that rounds half up</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># exact copy from: https://www.lexjansen.com/phuse-us/2020/ct/CT05.pdf</span></span>
<span id="cb1-3">ut_round <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb1-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x is the value to be rounded</span></span>
<span id="cb1-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># n is the precision of the rounding</span></span>
<span id="cb1-6">  scale <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>n</span>
<span id="cb1-7">  y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trunc</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scale <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sign</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> scale</span>
<span id="cb1-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the rounded number</span></span>
<span id="cb1-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(y)</span>
<span id="cb1-10">}</span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># round half up for 2436.845, with 2 decimal places</span></span>
<span id="cb1-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ut_round</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2436.845</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2436.84</code></pre>
</div>
</div>
<p>The expected result is 2436.85, but the output rounds it down. Thanks to the community effort, there are already discussions and resolution available in a <a href="https://stackoverflow.com/questions/12688717/round-up-from-5#comment110611119_12688836">StackOverflow post</a> -</p>
<blockquote class="blockquote">
<p>There are numerical precision issues, e.g., <code>round2(2436.845, 2)</code> returns <code>2436.84.</code> Changing <code>z + 0.5 to z + 0.5 + sqrt(.Machine$double.eps)</code> seems to work for me. – Gregor Thomas Jun 24, 2020 at 2:16</p>
</blockquote>
<ul>
<li><p><code>.Machine$double.eps</code> is a built-in constant in R that represents the smallest positive floating-point number that can be represented on the system (reference: <a href="https://www.math.ucla.edu/~anderson/rw1001/library/base/html/zMachine.html">Machine Characteristics</a>)</p></li>
<li><p>The expression <code>+ sqrt(.Machine$double.eps)</code> is used to add a very small value to mitigate floating-point precision issues.</p></li>
<li><p>For more information about computational precision and floating-point, see the following links -</p>
<ul>
<li>R: <a href="https://cran.r-project.org/doc/FAQ/R-FAQ.html#Why-doesn_0027t-R-think-these-numbers-are-equal_003f">Why doesn’t R think these numbers are equal?</a></li>
<li>SAS: <a href="https://documentation.sas.com/doc/en/lrcon/9.4/p0ji1unv6thm0dn1gp4t01a1u0g6.htm">Numerical Accuracy in SAS Software</a></li>
</ul></li>
</ul>
<p>After the fix:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># revised rounds half up</span></span>
<span id="cb3-2">ut_round1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb3-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x is the value to be rounded</span></span>
<span id="cb3-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># n is the precision of the rounding</span></span>
<span id="cb3-5">  scale <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>n</span>
<span id="cb3-6">  y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trunc</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scale <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sign</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(.Machine<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>double.eps)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> scale</span>
<span id="cb3-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the rounded number</span></span>
<span id="cb3-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(y)</span>
<span id="cb3-9">}</span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># round half up for 2436.845, with 2 decimal places</span></span>
<span id="cb3-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ut_round1</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2436.845</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2436.85</code></pre>
</div>
</div>
</section>
<section id="we-are-not-alone" class="level3">
<h3 class="anchored" data-anchor-id="we-are-not-alone">We are not alone</h3>
<p>The same issue occurred in the following functions/options as well, and has been raised by users:</p>
<ul>
<li><p><code>janitor::round_half_up()</code>: <a href="https://github.com/sfirke/janitor/issues/396">issue</a> was raised and fixed in v2.1.0</p></li>
<li><p><code>Tplyr</code>: <code>options(tplyr.IBMRounding = TRUE)</code>, <a href="https://github.com/atorus-research/Tplyr/issues/124">issue</a> was raised</p></li>
<li><p><code>scrutiny::round_up_from()/round_up()</code>: <a href="https://github.com/lhdjung/scrutiny/issues/43">issue</a> was raised and fixed</p></li>
<li><p>... and many others!</p></li>
</ul>
</section>
<section id="which-ones-to-use" class="level3">
<h3 class="anchored" data-anchor-id="which-ones-to-use">Which ones to use?</h3>
<p>The following functions have the precision issue mentioned above fixed, they all share the same logic from this <a href="https://stackoverflow.com/questions/12688717/round-up-from-5">StackOverflow post</a>.</p>
<ul>
<li><a href="https://sfirke.github.io/janitor/reference/round_half_up.html"><code>janitor::round_half_up()</code></a> <strong>version &gt;= 2.1.0</strong></li>
<li><a href="https://pharmaverse.github.io/tidytlg/main/reference/roundSAS.html"><code>tidytlg::roundSAS()</code></a>
<ul>
<li>this function has two more arguments that can convert the result to character and allow a character string to indicate missing values</li>
</ul></li>
<li><a href="https://lhdjung.github.io/scrutiny/reference/rounding-common.html"><code>scrutiny::round_up_from()/round_up()</code></a> <strong>version &gt;= 0.2.5</strong>
<ul>
<li><p><code>round_up_from()</code> has a <code>threshold</code> argument for rounding up, which adds flexibility for rounding up</p></li>
<li><p><code>round_up()</code> rounds up from 5, which is a special case of <code>round_up_from()</code></p></li>
</ul></li>
</ul>
</section>
<section id="are-they-safe-options" class="level3">
<h3 class="anchored" data-anchor-id="are-they-safe-options">Are they safe options?</h3>
<p>Those “round half up” functions do not offer the same level of precision and accuracy as the base R round function.</p>
<p>For example, let’s consider a value <code>a</code> that is slightly less than <code>1.5</code>. If we choose round half up approach to round <code>a</code> to 0 decimal places, an output of <code>1</code> is expected. However, those functions yield a result of <code>2</code> because <code>1.5 - a</code> is less than <code>sqrt(.Machine$double.eps)</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(.Machine<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>double.eps)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ut_round1</span>(a, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">janitor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round_half_up</span>(a, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
</div>
<p>This behavior aligns the floating point number comparison functions <code>all.equal()</code> and <code>dplyr::near()</code> with default tolerance <code>.Machine$double.eps^0.5</code>, where 1.5 and <code>a</code> are treated as equal.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all.equal</span>(a, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">near</span>(a, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>We can get the expected results from base R <code>round</code> as it provides greater accuracy.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(a)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1</code></pre>
</div>
</div>
<p>Here is an example when base R <code>round</code> reaches the precision limit:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># b is slightly less than 1.5</span></span>
<span id="cb15-2">b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> .Machine<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>double.eps</span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1 is expected but the result is 2</span></span>
<span id="cb15-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(b)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
</div>
<p>The precision and accuracy requirements can vary depending on the application. Therefore, it is essential to be aware each function’s performance in your specific context before making a choice.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<blockquote class="blockquote">
<p>With the differences in default behaviour across languages, you could consider your QC strategy and whether an acceptable level of fuzz in the electronic comparisons could be allowed for cases such as rounding when making comparisons between 2 codes written in different languages as long as this is documented. Alternatively you could document the exact rounding approach to be used in the SAP and then match this regardless of programming language used. - Ross Farrugia</p>
</blockquote>
<p>Thanks Ross Farrugia, Ben Straub, Edoardo Mancini and Liming for reviewing this blog post and providing valuable feedback!</p>
<p>If you spot an issue or have different opinions, please don’t hesitate to raise them through <a href="https://github.com/pharmaverse/blog">pharmaverse/blog</a>!</p>
<!--------------- appendices go here ----------------->
</section>
<div class="cell">
<div class="cell-output-display">


</div>
</div>



<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2024-04-08 12:11:12.156626</p>
</div></section><section id="details" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-07-24_rounding/index.qmd">source code</a>, <a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-07-24_rounding/renv.lock">R environment</a></p>
</div></section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{zhang2023,
  author = {Zhang, Kangjie},
  title = {Rounding},
  date = {2023-08-22},
  url = {https://pharmaverse.github.io/blog/posts/2023-07-24_rounding/rounding.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-zhang2023" class="csl-entry quarto-appendix-citeas">
Zhang, Kangjie. 2023. <span>“Rounding.”</span> August 22, 2023. <a href="https://pharmaverse.github.io/blog/posts/2023-07-24_rounding/rounding.html">https://pharmaverse.github.io/blog/posts/2023-07-24_rounding/rounding.html</a>.
</div></div></section></div> ]]></description>
  <category>rounding</category>
  <guid>https://pharmaverse.github.io/blog/posts/2023-07-24_rounding/rounding.html</guid>
  <pubDate>Tue, 22 Aug 2023 00:00:00 GMT</pubDate>
  <media:content url="https://pharmaverse.github.io/blog/posts/2023-07-24_rounding/rounding.png" medium="image" type="image/png" height="138" width="144"/>
</item>
<item>
  <title>It’s all relative? - Calculating Relative Days using admiral</title>
  <dc:creator>Ben Straub</dc:creator>
  <link>https://pharmaverse.github.io/blog/posts/2023-08-08_study_day/study_day.html</link>
  <description><![CDATA[ 





<!--------------- typical setup ----------------->
<!--------------- post begins here ----------------->
<p>Creating <code>--DY</code> variables for your ADaMs is super easy using <a href="https://pharmaverse.github.io/admiral/reference/derive_vars_dy.html"><code>derive_vars_dy()</code></a> from the <a href="https://pharmaverse.github.io/admiral/">admiral package</a>.</p>
<p>Let’s build some dummy data with 4 subjects, a start date/time for treatment (<code>TRTSDTM</code>), an analysis start date/time variable (<code>ASTDTM</code>) and an analysis end date variable (<code>AENDT</code>).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(admiral)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-4"></span>
<span id="cb1-5">adam <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb1-6">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>USUBJID, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>TRTSDTM, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>ASTDTM, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>AENDT,</span>
<span id="cb1-7">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"001"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-01-17T23:59:59"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-01-18T13:09:O9"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-01-20"</span>,</span>
<span id="cb1-8">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"002"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-02-25T23:59:59"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-03-18T14:09:O9"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-03-24"</span>,</span>
<span id="cb1-9">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"003"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-02-12T23:59:59"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-02-18T11:03:O9"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-04-17"</span>,</span>
<span id="cb1-10">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"004"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-03-17T23:59:59"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-03-19T13:09:O9"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-05-04"</span></span>
<span id="cb1-11">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb1-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">TRTSDTM =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_datetime</span>(TRTSDTM),</span>
<span id="cb1-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ASTDTM =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_datetime</span>(ASTDTM),</span>
<span id="cb1-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">AENDT =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(AENDT)</span>
<span id="cb1-16">  )</span></code></pre></div>
</div>
<p>Okay! Next we run our dataset through <code>derive_vars_dy()</code>, specifying:</p>
<ul>
<li>the reference date of the variable we want the calculation to be done against (<code>reference_date</code> argument);</li>
<li>the variables required to help calculate the relative days (<code>source_vars</code> argument).</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">derive_vars_dy</span>(</span>
<span id="cb2-2">  adam,</span>
<span id="cb2-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">reference_date =</span> TRTSDTM,</span>
<span id="cb2-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">source_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(ASTDTM, AENDT)</span>
<span id="cb2-5">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 6
  USUBJID TRTSDTM             ASTDTM              AENDT      ASTDY AENDY
  &lt;chr&gt;   &lt;dttm&gt;              &lt;dttm&gt;              &lt;date&gt;     &lt;dbl&gt; &lt;dbl&gt;
1 001     2014-01-17 23:59:59 2014-01-18 13:09:09 2014-01-20     2     4
2 002     2014-02-25 23:59:59 2014-03-18 14:09:09 2014-03-24    22    28
3 003     2014-02-12 23:59:59 2014-02-18 11:03:09 2014-04-17     7    65
4 004     2014-03-17 23:59:59 2014-03-19 13:09:09 2014-05-04     3    49</code></pre>
</div>
</div>
<p>That’s it! We got both our <code>ASTDY</code> and <code>AENDY</code> variables in only a few short lines of code!</p>
<p>What if I want my variables to have a different naming convention?</p>
<p>Easy! In the <code>source_vars</code> argument if you want your variables to be called <code>DEMOADY</code> and <code>DEMOEDY</code> just do <code>DEMOADY = ASTDTM</code> and <code>DEMOEDY = AENDT</code> and <code>derive_vars_dy()</code> will do the rest!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">derive_vars_dy</span>(</span>
<span id="cb4-2">  adam,</span>
<span id="cb4-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">reference_date =</span> TRTSDTM,</span>
<span id="cb4-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">source_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">DEMOADY =</span> ASTDTM, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">DEMOEDY =</span> AENDT)</span>
<span id="cb4-5">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 6
  USUBJID TRTSDTM             ASTDTM              AENDT      DEMOADY DEMOEDY
  &lt;chr&gt;   &lt;dttm&gt;              &lt;dttm&gt;              &lt;date&gt;       &lt;dbl&gt;   &lt;dbl&gt;
1 001     2014-01-17 23:59:59 2014-01-18 13:09:09 2014-01-20       2       4
2 002     2014-02-25 23:59:59 2014-03-18 14:09:09 2014-03-24      22      28
3 003     2014-02-12 23:59:59 2014-02-18 11:03:09 2014-04-17       7      65
4 004     2014-03-17 23:59:59 2014-03-19 13:09:09 2014-05-04       3      49</code></pre>
</div>
</div>
<p>If you want to get <code>--DT</code> or <code>--DTM</code> variables using <code>admiral</code> then check out <a href="https://pharmaverse.github.io/admiral/reference/derive_vars_dt.html"><code>derive_vars_dt()</code></a> and <a href="https://pharmaverse.github.io/admiral/reference/derive_vars_dtm.html"><code>derive_vars_dtm()</code></a>. If things are messy in your data, e.g.&nbsp;partial dates, both functions have great imputation abilities, which we will cover in an upcoming blog post!</p>
<!--------------- appendices go here ----------------->
<div class="cell">
<div class="cell-output-display">


</div>
</div>



<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2024-04-08 12:11:27.942806</p>
</div></section><section id="details" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-08-08_study_day/code_sections.qmd">source code</a>, <a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-08-08_study_day/renv.lock">R environment</a></p>
</div></section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{straub2023,
  author = {Straub, Ben},
  title = {It’s All Relative? - {Calculating} {Relative} {Days} Using
    Admiral},
  date = {2023-08-08},
  url = {https://pharmaverse.github.io/blog/posts/2023-08-08_study_day/study_day.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-straub2023" class="csl-entry quarto-appendix-citeas">
Straub, Ben. 2023. <span>“It’s All Relative? - Calculating Relative Days
Using Admiral.”</span> August 8, 2023. <a href="https://pharmaverse.github.io/blog/posts/2023-08-08_study_day/study_day.html">https://pharmaverse.github.io/blog/posts/2023-08-08_study_day/study_day.html</a>.
</div></div></section></div> ]]></description>
  <category>admiral</category>
  <category>ADaMs</category>
  <guid>https://pharmaverse.github.io/blog/posts/2023-08-08_study_day/study_day.html</guid>
  <pubDate>Tue, 08 Aug 2023 00:00:00 GMT</pubDate>
  <media:content url="https://pharmaverse.github.io/blog/posts/2023-08-08_study_day/admiral.png" medium="image" type="image/png" height="108" width="144"/>
</item>
<item>
  <title>Cross-Industry Open Source Package Development</title>
  <dc:creator>Stefan Thoma</dc:creator>
  <link>https://pharmaverse.github.io/blog/posts/2023-07-20_cross_company_dev/cross_industry_dev.html</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>This post is based on <a href="https://stefanthoma.github.io/useR_2023_admiral/#/title-slide">a talk</a> given at the <a href="https://user-regional-2023.gitlab.io/basel/">regional useR! conference on July 21st 2023 in Basel</a>. I took the opportunity to present my personal perspective on the current cross-industry package development efforts with a particular focus on the transformation of the job description of statistical programmers. As I have only recently started my position at Roche, my personal perspective is the perspective of a newcomer. I have a background in Psychology and Statistics and joined Roche in November 2022 as an intern switching to a permanent position as a statistical programmer – what they call analytical data scientist now – in April 2023. I spend about 20% of my time in such a cross-industry package development project, which was a major reason for applying for this position. In this post I would like to explain how we work in this project, and why this had such an impact on my decision to join Roche.</p>
<section id="context" class="level2">
<h2 class="anchored" data-anchor-id="context">Context</h2>
<p>My decision was influenced by two current industry trends:</p>
<p>First, the switch to a more language agnostic and open source approach for clinical reporting and data analysis. At the moment, R seems to be the best fitting tool for the job, but the systems used here are language agnostic in general. This is related, but does not necessarily lead to the second trend: The move toward cross-industry collaboration when developing clinical reporting software.</p>
<p>As the industry moves toward new (to them) programming languages, fit-for-purpose tools need(ed) to be developed. The realization that siloed solutions – in an area where competitiveness does not benefit patients – are simply resource hungry ways to solve the same problem in parallel provided a great argument for a shift toward collaborations.</p>
<p>Such cross-industry collaborations gave rise to the pharmaverse, a curated collection of R packages designed to solve clinical reporting in R. <a href="https://github.com/pharmaverse/admiral">{admiral}</a>, the project that I work on, is part of the <a href="https://pharmaverse.org/">pharmaverse</a> and covers the creation of ADaM data sets (CDISC standard data). These data sets are subsequently used to produce tables, listings, and graphs and are usually part of the submission package for regulators.<br>
<!-- You can read about the inception of [{admiral}](https://github.com/pharmaverse/admiral) in [this recent blog post by ...](). --></p>
</section>
<section id="insights" class="level2">
<h2 class="anchored" data-anchor-id="insights">Insights</h2>
<p>When creating an open source package in an industry where currently there is a lot of traction you have to move fast. No, I don’t mean: Move fast and break things. I mean: Communicate! Get people on board! We aimed <a href="https://github.com/pharmaverse/admiral">{admiral}</a> to be <strong>the</strong> package for ADaM creation even before deciding to create the package together with GSK. By being transparent about our endeavor, e.g.&nbsp;Thomas Neitmann (then at Roche) posting on LinkedIn, we managed to connect with Michael Rimler from GSK and soon realized that we were dealing with the exact same challenge at both companies, and that a collaborative effort would improve the final product while reducing individual efforts. A working prototype of <a href="https://github.com/pharmaverse/admiral">{admiral}</a> was to be created by GSK and Roche within six months, and would then be open sourced. In our effort to communicate openly, we informed statistical programmers from over 20 companies about the <a href="https://github.com/pharmaverse/admiral">{admiral}</a> project and invited them to try it out and provide feedback once released. In the end, we received over 500 comments from over 50 programmers.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check out the latest admiral release from CRAN:</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"admiral"</span>)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(admiral)</span></code></pre></div>
</div>
<p>This was instrumental in creating a product that was optimised for general usage in the clinical reporting field and ensured that other companies would not unknowingly invest into their own solution to this challenge. Open sourcing early is particularly beneficial because this ensures from the get-go that code created is aimed at a general audience, and not company specific (perhaps by accident).</p>
<p><a href="https://github.com/pharmaverse/admiral">{admiral}</a> was created with the long term goal of having a stable and flexible solution for the clinical reporting pipeline. In that spirit, its permissive <a href="https://www.apache.org/licenses/LICENSE-2.0">apache 2.0 licence</a> (jointly owned by Roche and GSK) further strengthens trust into the project, namely for three reasons:</p>
<ul>
<li><p>Jointly owned means that efforts to monetize the code-base by one company could be vetoed by the other. The permissive licence ensures that in such an unlikely case, the code-base that has been published would stay available and could always be used and improved upon by others.</p></li>
<li><p>Having this package backed by Roche and GSK ensures (as far as this is ever possible) funding for properly maintaining the packages. This is crucial, as a package is rarely <strong>finished</strong>.</p></li>
<li><p>Up to now, experts from many more companies have joined <a href="https://github.com/pharmaverse/admiral">{admiral}</a> or one of its therapeutic area specific package-extensions, inspiring even more trust into its reliability.</p></li>
</ul>
<p>If you would like to learn more about licenses for open source projects in the clinical reporting world please check out the <a href="https://phuse-org.github.io/E2E-OS-Guidance/">recent PHUSE E2E Guidance on open source license</a></p>
</section>
<section id="development-workflow" class="level2">
<h2 class="anchored" data-anchor-id="development-workflow">Development workflow</h2>
<p>Every improvement, task, or feature we want to implement on <a href="https://github.com/pharmaverse/admiral">{admiral}</a> starts as an issue on our <a href="https://github.com/pharmaverse/admiral">GitHub repository</a>. It is the centerpiece of our development workflow, along with our <a href="https://pharmaverse.github.io/admiraldev/articles/programming_strategy.html">developer guides</a> which describe in detail the strategies, conventions, and workflows used in development. The guides help us keep the <a href="https://github.com/pharmaverse/admiral">{admiral}</a> package internally consistent (e.g.&nbsp;naming conventions, function logic) but also ensure that <a href="https://github.com/pharmaverse/admiral">{admiral}</a> adjacent packages follow the same conventions and share the user interface. This is further helped by the implemented CICD pipeline which ensures styling convention and spelling (and much more).</p>
<p>The core package developers team meets once a week (twice a week before a release) to discuss progress and priorities. Here, the role of product lead (currently <a href="https://www.linkedin.com/in/edoardo-mancini-7a4a40148/">Edoardo Mancini</a> at Roche) and technical lead (currently <a href="https://www.linkedin.com/in/ben-straub/">Ben Straub</a> at GSK) is to set priorities and track the release schedule. These stand-up meetings are centered around the <a href="https://github.com/orgs/pharmaverse/projects/12">project-board</a> which gives a complete overview of activities and progress. Issues are mostly self-assigned so developers can really chose what they want to work on.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pharmaverse.github.io/blog/posts/2023-07-20_cross_company_dev/project_board.png" class="img-fluid figure-img"></p>
<figcaption>GitHub project board</figcaption>
</figure>
</div>
<p>By design, <a href="https://github.com/pharmaverse/admiral">{admiral}</a> is community built. Most developers working on the project are statistical programmers working on clinical reporting themselves. As an open source project, community input is highly valued, and anyone using <a href="https://github.com/pharmaverse/admiral">{admiral}</a> is encouraged to submit issues or take on issues as part of the development team. We also do occasional events to bring the statistical programmers community and the developers closer together. Just last February we organised the <a href="https://github.com/pharmaverse/admiral">{admiral}</a> hackathon which had up to 500 participants.</p>
</section>
<section id="impact" class="level2">
<h2 class="anchored" data-anchor-id="impact">Impact</h2>
<p>For Roche, cross-industry package development work out in their favor: They get access to software created by specialists and users from across the industry but paying only a fraction of the developmental costs. Of course, they don’t have total developmental control but they do get a seat at the table. Any gaps between the open source <a href="https://github.com/pharmaverse/admiral">{admiral}</a> package and the proprietary Roche workflow were bridged by the internal {admiralroche} package.</p>
<p>The switch towards a more language agnostic platform, and open source languages specifically, opens the door to a broad population of university graduates with diverse backgrounds. I personally would not have considered this position five years ago due to a misalignment of skills and job requirements. Working towards an industry standard open source solution will also ensure that skills learned at one company are more easily transferable to external positions, further making the position much more attractive. Access to such a broad pool of potential candidates is clearly beneficial for recruitment at Roche, but also facilitates diversity in teams which makes for a more interesting and effective work place.</p>
<p>Open source development comes with much more transparency by definition. Recognition of contributions are built in - anyone can see who did what. This recognition escapes the confines of your company as it is visible to anyone looking at the repository. Anyone can not only see at any time what is being worked on, what discussions are happening and which direction is being taken, but can also participate and contribute. Transparency also applies to errors in the code and how the team is dealing with them. In such an environment it is practically impossible to hide or cover up errors and corrections. Instead, they have to be dealt with publicly and in the open. This openness about errors also helps seeing errors as a natural occurrence that needs to be dealt with. Space for errors encourages learning and is really beneficial for growing both skills and integrity.</p>
<p>As you work on a team that spans multiple companies, traditional corporate hierarchies do not apply. Of course, there will always be a sort of hierarchy of experience or skills, but these work in your favor: You will know who to ask for help, and teams are generally very happy for contributors of any skill level. Contributions also need not be in code: Inputs into discussions and domain knowledge contributions are highly valued as well. The flip-side of working in a team without your manager oversight: They may not be directly aware of the work you do. That’s why you have to write blog posts :)</p>
<p>The possibility for statistical programmers to pivot towards developing software or writing blog-posts such as this really transforms and broadens their job description. It is this transformation that is reflected by the choice of Roche to re-brand statistical programmers as analytical data scientists. The fact that cross-industry development is being advocated for really lets programmers expand their network outside of their company.</p>
<p>The <a href="https://github.com/pharmaverse/admiral">{admiral}</a> project serves as a testament to the power of collaborative open-source development and the potential it holds for the future of work in this industry.</p>
<!--------------- appendices go here ----------------->


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{thoma2023,
  author = {Thoma, Stefan},
  title = {Cross-Industry {Open} {Source} {Package} {Development}},
  date = {2023-07-25},
  url = {https://pharmaverse.github.io/blog/posts/2023-07-20_cross_company_dev/cross_industry_dev.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-thoma2023" class="csl-entry quarto-appendix-citeas">
Thoma, Stefan. 2023. <span>“Cross-Industry Open Source Package
Development.”</span> July 25, 2023. <a href="https://pharmaverse.github.io/blog/posts/2023-07-20_cross_company_dev/cross_industry_dev.html">https://pharmaverse.github.io/blog/posts/2023-07-20_cross_company_dev/cross_industry_dev.html</a>.
</div></div></section></div> ]]></description>
  <category>community</category>
  <category>admiral</category>
  <guid>https://pharmaverse.github.io/blog/posts/2023-07-20_cross_company_dev/cross_industry_dev.html</guid>
  <pubDate>Tue, 25 Jul 2023 00:00:00 GMT</pubDate>
  <media:content url="https://pharmaverse.github.io/blog/posts/2023-07-20_cross_company_dev/Rbasel.png" medium="image" type="image/png" height="108" width="144"/>
</item>
<item>
  <title>How to use Code Sections</title>
  <dc:creator>Edoardo Mancini</dc:creator>
  <link>https://pharmaverse.github.io/blog/posts/2023-07-14_code_sections/code_sections.html</link>
  <description><![CDATA[ 





<!--------------- typical setup ----------------->
<!--------------- post begins here ----------------->
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>The <a href="https://pharmaverse.github.io/admiral/"><code>admiral</code></a> package embraces a modular style of programming, where blocks of code are pieced together in sequence to create an ADaM dataset. However, with the well-documented advantages of the modular approach comes the recognition that scripts will on average be longer. As such, astute programmers working in RStudio are constantly on the lookout for quick ways to effectively navigate their scripts. Enter <strong>code sections</strong>!</p>
</section>
<section id="so-what-are-code-sections-and-why-are-they-useful" class="level2">
<h2 class="anchored" data-anchor-id="so-what-are-code-sections-and-why-are-they-useful">So, what are code sections and why are they useful?</h2>
<p><a href="https://docs.posit.co/ide/user/ide/guide/code/code-sections.html">Code Sections</a> are separators for long R scripts or functions in RStudio. They can be set up by inserting a comment line followed by four or more dashes in between portions of code, like so:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First code section ----</span></span>
<span id="cb1-2"></span>
<span id="cb1-3">a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Second code section ----</span></span>
<span id="cb1-6"></span>
<span id="cb1-7">b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Third code section ----</span></span>
<span id="cb1-10"></span>
<span id="cb1-11">c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span></code></pre></div>
</div>
<p>RStudio then recognizes the code sections automatically, and enables you to:</p>
<ul>
<li>Collapse and expand them using the arrow displayed next to the line number, or with the handy shortcuts <code>Alt+L</code>/<code>Shift+Alt+L</code> on Windows or <code>Cmd+Option+L</code>/<code>Cmd+Shift+Option+L</code> on Mac.</li>
<li>Travel in between them using the navigator at the bottom of the code pane, or by pressing <code>Shift+Alt+J</code> on Windows or <code>Cmd+Shift+Option+J</code> on Mac.</li>
<li>View an outline of the file using the “Outline” button at the top right of the pane and/or the orange hashtag “Section Navigator” button at the bottom left of the pane.</li>
</ul>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pharmaverse.github.io/blog/posts/2023-07-14_code_sections/section_navigator.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Collapsed sections, outline view and the section navigator for the example above.</figcaption>
</figure>
</div>
</div>
</div>
<p>It is also possible to create subsections by using two hashtags at the start of a comment line:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First code section ----</span></span>
<span id="cb2-2">a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## A code subsection ----</span></span>
<span id="cb2-5">b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Second code section ----</span></span>
<span id="cb2-8">c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pharmaverse.github.io/blog/posts/2023-07-14_code_sections/subsections.png" class="img-fluid figure-img" style="width:45.0%"></p>
<figcaption>Code subsections for the example above.</figcaption>
</figure>
</div>
</div>
</div>
<p>For a complete list of Code Sections shortcuts, and for further information, see <a href="https://docs.posit.co/ide/user/ide/guide/code/code-sections.html#menu-commands-and-shortcuts">here</a>.</p>
</section>
<section id="code-sections-on-admiral" class="level1">
<h1>Code Sections on <code>admiral</code></h1>
<p>Within the <a href="https://pharmaverse.github.io/admiral/"><code>admiral</code></a> package, heavy use of code sections is made in scripts such as our template ADaM programs. This ensures that they are more traversable and also encourages good commenting practices throughout the program. Here is an example using the ADAE template program:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(admiral)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_ad_template</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ADAE"</span>)</span></code></pre></div>
</div>
<p>Once the user saves this template program and opens it in their local file system, a 100+ line file instantly becomes more tractable due to the code sections that have been inserted.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pharmaverse.github.io/blog/posts/2023-07-14_code_sections/adae_code_sections.png" class="img-fluid figure-img" style="width:45.0%"></p>
<figcaption>A screenshot of the code sections in the ADAE template script</figcaption>
</figure>
</div>
</div>
</div>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Code sections are an easy way to navigate long scripts and foster good commenting practices. They are used extensively in the <a href="https://pharmaverse.github.io/admiral/"><code>admiral</code></a> package, but there is no reason that you cannot start using them yourself in your day-to-day R programming!</p>
<!--------------- appendices go here ----------------->
</section>
<div class="cell">
<div class="cell-output-display">


</div>
</div>


</section>

<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2024-04-08 12:10:47.422501</p>
</div></section><section id="details" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-07-14_code_sections/code_sections.qmd">source code</a>, <a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-07-14_code_sections/renv.lock">R environment</a></p>
</div></section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{mancini2023,
  author = {Mancini, Edoardo},
  title = {How to Use {Code} {Sections}},
  date = {2023-07-14},
  url = {https://pharmaverse.github.io/blog/posts/2023-07-14_code_sections/code_sections.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-mancini2023" class="csl-entry quarto-appendix-citeas">
Mancini, Edoardo. 2023. <span>“How to Use Code Sections.”</span> July
14, 2023. <a href="https://pharmaverse.github.io/blog/posts/2023-07-14_code_sections/code_sections.html">https://pharmaverse.github.io/blog/posts/2023-07-14_code_sections/code_sections.html</a>.
</div></div></section></div> ]]></description>
  <category>ADaMs</category>
  <category>Tips and Tricks</category>
  <guid>https://pharmaverse.github.io/blog/posts/2023-07-14_code_sections/code_sections.html</guid>
  <pubDate>Fri, 14 Jul 2023 00:00:00 GMT</pubDate>
  <media:content url="https://pharmaverse.github.io/blog/posts/2023-07-14_code_sections/rstudio-hex.PNG" medium="image"/>
</item>
</channel>
</rss>
